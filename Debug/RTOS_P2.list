
RTOS_P2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b40  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08006ce0  08006ce0  00007ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e74  08006e74  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006e74  08006e74  00007e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e7c  08006e7c  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e7c  08006e7c  00007e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e80  08006e80  00007e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006e84  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e18  20000060  08006ee4  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e78  08006ee4  00008e78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a16f  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036bc  00000000  00000000  000221ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c0  00000000  00000000  000258c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012a7  00000000  00000000  00027080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000038ba  00000000  00000000  00028327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b06c  00000000  00000000  0002bbe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5b8e  00000000  00000000  00046c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec7db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006aa8  00000000  00000000  000ec820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000f32c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006cc8 	.word	0x08006cc8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08006cc8 	.word	0x08006cc8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <Light_LED>:
void getADC(void *argument);
void LEDlevel(void *argument);
void dispUART(void *argument);

/* USER CODE BEGIN PFP */
void Light_LED(){
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	if(x_val < 4096/5){
 8000574:	4b4d      	ldr	r3, [pc, #308]	@ (80006ac <Light_LED+0x13c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f240 3232 	movw	r2, #818	@ 0x332
 800057c:	4293      	cmp	r3, r2
 800057e:	dc19      	bgt.n	80005b4 <Light_LED+0x44>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000580:	2201      	movs	r2, #1
 8000582:	2140      	movs	r1, #64	@ 0x40
 8000584:	484a      	ldr	r0, [pc, #296]	@ (80006b0 <Light_LED+0x140>)
 8000586:	f001 fc3f 	bl	8001e08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2180      	movs	r1, #128	@ 0x80
 800058e:	4848      	ldr	r0, [pc, #288]	@ (80006b0 <Light_LED+0x140>)
 8000590:	f001 fc3a 	bl	8001e08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 8000594:	2200      	movs	r2, #0
 8000596:	2101      	movs	r1, #1
 8000598:	4846      	ldr	r0, [pc, #280]	@ (80006b4 <Light_LED+0x144>)
 800059a:	f001 fc35 	bl	8001e08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2102      	movs	r1, #2
 80005a2:	4844      	ldr	r0, [pc, #272]	@ (80006b4 <Light_LED+0x144>)
 80005a4:	f001 fc30 	bl	8001e08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2104      	movs	r1, #4
 80005ac:	4841      	ldr	r0, [pc, #260]	@ (80006b4 <Light_LED+0x144>)
 80005ae:	f001 fc2b 	bl	8001e08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
			HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
			HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1);
		}
}
 80005b2:	e078      	b.n	80006a6 <Light_LED+0x136>
		} else if(x_val < 4096*2/5){
 80005b4:	4b3d      	ldr	r3, [pc, #244]	@ (80006ac <Light_LED+0x13c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f240 6265 	movw	r2, #1637	@ 0x665
 80005bc:	4293      	cmp	r3, r2
 80005be:	dc19      	bgt.n	80005f4 <Light_LED+0x84>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2140      	movs	r1, #64	@ 0x40
 80005c4:	483a      	ldr	r0, [pc, #232]	@ (80006b0 <Light_LED+0x140>)
 80005c6:	f001 fc1f 	bl	8001e08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	2180      	movs	r1, #128	@ 0x80
 80005ce:	4838      	ldr	r0, [pc, #224]	@ (80006b0 <Light_LED+0x140>)
 80005d0:	f001 fc1a 	bl	8001e08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2101      	movs	r1, #1
 80005d8:	4836      	ldr	r0, [pc, #216]	@ (80006b4 <Light_LED+0x144>)
 80005da:	f001 fc15 	bl	8001e08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2102      	movs	r1, #2
 80005e2:	4834      	ldr	r0, [pc, #208]	@ (80006b4 <Light_LED+0x144>)
 80005e4:	f001 fc10 	bl	8001e08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2104      	movs	r1, #4
 80005ec:	4831      	ldr	r0, [pc, #196]	@ (80006b4 <Light_LED+0x144>)
 80005ee:	f001 fc0b 	bl	8001e08 <HAL_GPIO_WritePin>
}
 80005f2:	e058      	b.n	80006a6 <Light_LED+0x136>
		} else if(x_val < 4096*3/5){
 80005f4:	4b2d      	ldr	r3, [pc, #180]	@ (80006ac <Light_LED+0x13c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f640 1298 	movw	r2, #2456	@ 0x998
 80005fc:	4293      	cmp	r3, r2
 80005fe:	dc19      	bgt.n	8000634 <Light_LED+0xc4>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000600:	2201      	movs	r2, #1
 8000602:	2140      	movs	r1, #64	@ 0x40
 8000604:	482a      	ldr	r0, [pc, #168]	@ (80006b0 <Light_LED+0x140>)
 8000606:	f001 fbff 	bl	8001e08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 800060a:	2201      	movs	r2, #1
 800060c:	2180      	movs	r1, #128	@ 0x80
 800060e:	4828      	ldr	r0, [pc, #160]	@ (80006b0 <Light_LED+0x140>)
 8000610:	f001 fbfa 	bl	8001e08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8000614:	2201      	movs	r2, #1
 8000616:	2101      	movs	r1, #1
 8000618:	4826      	ldr	r0, [pc, #152]	@ (80006b4 <Light_LED+0x144>)
 800061a:	f001 fbf5 	bl	8001e08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2102      	movs	r1, #2
 8000622:	4824      	ldr	r0, [pc, #144]	@ (80006b4 <Light_LED+0x144>)
 8000624:	f001 fbf0 	bl	8001e08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 8000628:	2200      	movs	r2, #0
 800062a:	2104      	movs	r1, #4
 800062c:	4821      	ldr	r0, [pc, #132]	@ (80006b4 <Light_LED+0x144>)
 800062e:	f001 fbeb 	bl	8001e08 <HAL_GPIO_WritePin>
}
 8000632:	e038      	b.n	80006a6 <Light_LED+0x136>
		} else if(x_val < 4096*4/5){
 8000634:	4b1d      	ldr	r3, [pc, #116]	@ (80006ac <Light_LED+0x13c>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f640 42cb 	movw	r2, #3275	@ 0xccb
 800063c:	4293      	cmp	r3, r2
 800063e:	dc19      	bgt.n	8000674 <Light_LED+0x104>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000640:	2201      	movs	r2, #1
 8000642:	2140      	movs	r1, #64	@ 0x40
 8000644:	481a      	ldr	r0, [pc, #104]	@ (80006b0 <Light_LED+0x140>)
 8000646:	f001 fbdf 	bl	8001e08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 800064a:	2201      	movs	r2, #1
 800064c:	2180      	movs	r1, #128	@ 0x80
 800064e:	4818      	ldr	r0, [pc, #96]	@ (80006b0 <Light_LED+0x140>)
 8000650:	f001 fbda 	bl	8001e08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8000654:	2201      	movs	r2, #1
 8000656:	2101      	movs	r1, #1
 8000658:	4816      	ldr	r0, [pc, #88]	@ (80006b4 <Light_LED+0x144>)
 800065a:	f001 fbd5 	bl	8001e08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 800065e:	2201      	movs	r2, #1
 8000660:	2102      	movs	r1, #2
 8000662:	4814      	ldr	r0, [pc, #80]	@ (80006b4 <Light_LED+0x144>)
 8000664:	f001 fbd0 	bl	8001e08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2104      	movs	r1, #4
 800066c:	4811      	ldr	r0, [pc, #68]	@ (80006b4 <Light_LED+0x144>)
 800066e:	f001 fbcb 	bl	8001e08 <HAL_GPIO_WritePin>
}
 8000672:	e018      	b.n	80006a6 <Light_LED+0x136>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000674:	2201      	movs	r2, #1
 8000676:	2140      	movs	r1, #64	@ 0x40
 8000678:	480d      	ldr	r0, [pc, #52]	@ (80006b0 <Light_LED+0x140>)
 800067a:	f001 fbc5 	bl	8001e08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 800067e:	2201      	movs	r2, #1
 8000680:	2180      	movs	r1, #128	@ 0x80
 8000682:	480b      	ldr	r0, [pc, #44]	@ (80006b0 <Light_LED+0x140>)
 8000684:	f001 fbc0 	bl	8001e08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8000688:	2201      	movs	r2, #1
 800068a:	2101      	movs	r1, #1
 800068c:	4809      	ldr	r0, [pc, #36]	@ (80006b4 <Light_LED+0x144>)
 800068e:	f001 fbbb 	bl	8001e08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 8000692:	2201      	movs	r2, #1
 8000694:	2102      	movs	r1, #2
 8000696:	4807      	ldr	r0, [pc, #28]	@ (80006b4 <Light_LED+0x144>)
 8000698:	f001 fbb6 	bl	8001e08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1);
 800069c:	2201      	movs	r2, #1
 800069e:	2104      	movs	r1, #4
 80006a0:	4804      	ldr	r0, [pc, #16]	@ (80006b4 <Light_LED+0x144>)
 80006a2:	f001 fbb1 	bl	8001e08 <HAL_GPIO_WritePin>
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	2000007c 	.word	0x2000007c
 80006b0:	40020000 	.word	0x40020000
 80006b4:	40020400 	.word	0x40020400

080006b8 <Tf_LED>:

void Tf_LED(){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 80006bc:	2200      	movs	r2, #0
 80006be:	2140      	movs	r1, #64	@ 0x40
 80006c0:	480c      	ldr	r0, [pc, #48]	@ (80006f4 <Tf_LED+0x3c>)
 80006c2:	f001 fba1 	bl	8001e08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2180      	movs	r1, #128	@ 0x80
 80006ca:	480a      	ldr	r0, [pc, #40]	@ (80006f4 <Tf_LED+0x3c>)
 80006cc:	f001 fb9c 	bl	8001e08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2101      	movs	r1, #1
 80006d4:	4808      	ldr	r0, [pc, #32]	@ (80006f8 <Tf_LED+0x40>)
 80006d6:	f001 fb97 	bl	8001e08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2102      	movs	r1, #2
 80006de:	4806      	ldr	r0, [pc, #24]	@ (80006f8 <Tf_LED+0x40>)
 80006e0:	f001 fb92 	bl	8001e08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2104      	movs	r1, #4
 80006e8:	4803      	ldr	r0, [pc, #12]	@ (80006f8 <Tf_LED+0x40>)
 80006ea:	f001 fb8d 	bl	8001e08 <HAL_GPIO_WritePin>
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40020000 	.word	0x40020000
 80006f8:	40020400 	.word	0x40020400

080006fc <Menu_Display>:


void Menu_Display(){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
	char buffer[20] = "_";
 8000702:	235f      	movs	r3, #95	@ 0x5f
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	f107 0308 	add.w	r3, r7, #8
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
	sprintf(buffer, "Voltage = %d\r\n",x_val);
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <Menu_Display+0x3c>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	4908      	ldr	r1, [pc, #32]	@ (800073c <Menu_Display+0x40>)
 800071c:	4618      	mov	r0, r3
 800071e:	f005 fe33 	bl	8006388 <siprintf>
	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 20);
 8000722:	1d39      	adds	r1, r7, #4
 8000724:	2314      	movs	r3, #20
 8000726:	2214      	movs	r2, #20
 8000728:	4805      	ldr	r0, [pc, #20]	@ (8000740 <Menu_Display+0x44>)
 800072a:	f002 fc19 	bl	8002f60 <HAL_UART_Transmit>
}
 800072e:	bf00      	nop
 8000730:	3718      	adds	r7, #24
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	2000007c 	.word	0x2000007c
 800073c:	08006d28 	.word	0x08006d28
 8000740:	20000124 	.word	0x20000124

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000748:	f000 fcbc 	bl	80010c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074c:	f000 f854 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000750:	f000 f966 	bl	8000a20 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000754:	f000 f8ba 	bl	80008cc <MX_ADC1_Init>
  MX_I2C1_Init();
 8000758:	f000 f90a 	bl	8000970 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800075c:	f000 f936 	bl	80009cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000760:	f003 f894 	bl	800388c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000764:	4a15      	ldr	r2, [pc, #84]	@ (80007bc <main+0x78>)
 8000766:	2100      	movs	r1, #0
 8000768:	4815      	ldr	r0, [pc, #84]	@ (80007c0 <main+0x7c>)
 800076a:	f003 f8d9 	bl	8003920 <osThreadNew>
 800076e:	4603      	mov	r3, r0
 8000770:	4a14      	ldr	r2, [pc, #80]	@ (80007c4 <main+0x80>)
 8000772:	6013      	str	r3, [r2, #0]

  /* creation of pickButtonTask */
  pickButtonTaskHandle = osThreadNew(pickButton, NULL, &pickButtonTask_attributes);
 8000774:	4a14      	ldr	r2, [pc, #80]	@ (80007c8 <main+0x84>)
 8000776:	2100      	movs	r1, #0
 8000778:	4814      	ldr	r0, [pc, #80]	@ (80007cc <main+0x88>)
 800077a:	f003 f8d1 	bl	8003920 <osThreadNew>
 800077e:	4603      	mov	r3, r0
 8000780:	4a13      	ldr	r2, [pc, #76]	@ (80007d0 <main+0x8c>)
 8000782:	6013      	str	r3, [r2, #0]

  /* creation of getADCTask */
  getADCTaskHandle = osThreadNew(getADC, NULL, &getADCTask_attributes);
 8000784:	4a13      	ldr	r2, [pc, #76]	@ (80007d4 <main+0x90>)
 8000786:	2100      	movs	r1, #0
 8000788:	4813      	ldr	r0, [pc, #76]	@ (80007d8 <main+0x94>)
 800078a:	f003 f8c9 	bl	8003920 <osThreadNew>
 800078e:	4603      	mov	r3, r0
 8000790:	4a12      	ldr	r2, [pc, #72]	@ (80007dc <main+0x98>)
 8000792:	6013      	str	r3, [r2, #0]

  /* creation of LEDlevelTask */
  LEDlevelTaskHandle = osThreadNew(LEDlevel, NULL, &LEDlevelTask_attributes);
 8000794:	4a12      	ldr	r2, [pc, #72]	@ (80007e0 <main+0x9c>)
 8000796:	2100      	movs	r1, #0
 8000798:	4812      	ldr	r0, [pc, #72]	@ (80007e4 <main+0xa0>)
 800079a:	f003 f8c1 	bl	8003920 <osThreadNew>
 800079e:	4603      	mov	r3, r0
 80007a0:	4a11      	ldr	r2, [pc, #68]	@ (80007e8 <main+0xa4>)
 80007a2:	6013      	str	r3, [r2, #0]

  /* creation of dispUARTTask */
  dispUARTTaskHandle = osThreadNew(dispUART, NULL, &dispUARTTask_attributes);
 80007a4:	4a11      	ldr	r2, [pc, #68]	@ (80007ec <main+0xa8>)
 80007a6:	2100      	movs	r1, #0
 80007a8:	4811      	ldr	r0, [pc, #68]	@ (80007f0 <main+0xac>)
 80007aa:	f003 f8b9 	bl	8003920 <osThreadNew>
 80007ae:	4603      	mov	r3, r0
 80007b0:	4a10      	ldr	r2, [pc, #64]	@ (80007f4 <main+0xb0>)
 80007b2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007b4:	f003 f88e 	bl	80038d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <main+0x74>
 80007bc:	08006d74 	.word	0x08006d74
 80007c0:	08000b05 	.word	0x08000b05
 80007c4:	2000016c 	.word	0x2000016c
 80007c8:	08006d98 	.word	0x08006d98
 80007cc:	08000b15 	.word	0x08000b15
 80007d0:	20000170 	.word	0x20000170
 80007d4:	08006dbc 	.word	0x08006dbc
 80007d8:	08000b55 	.word	0x08000b55
 80007dc:	20000174 	.word	0x20000174
 80007e0:	08006de0 	.word	0x08006de0
 80007e4:	08000b91 	.word	0x08000b91
 80007e8:	20000178 	.word	0x20000178
 80007ec:	08006e04 	.word	0x08006e04
 80007f0:	08000bc5 	.word	0x08000bc5
 80007f4:	2000017c 	.word	0x2000017c

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b094      	sub	sp, #80	@ 0x50
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 0320 	add.w	r3, r7, #32
 8000802:	2230      	movs	r2, #48	@ 0x30
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f005 fdde 	bl	80063c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800081c:	2300      	movs	r3, #0
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	4b28      	ldr	r3, [pc, #160]	@ (80008c4 <SystemClock_Config+0xcc>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000824:	4a27      	ldr	r2, [pc, #156]	@ (80008c4 <SystemClock_Config+0xcc>)
 8000826:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800082a:	6413      	str	r3, [r2, #64]	@ 0x40
 800082c:	4b25      	ldr	r3, [pc, #148]	@ (80008c4 <SystemClock_Config+0xcc>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000838:	2300      	movs	r3, #0
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	4b22      	ldr	r3, [pc, #136]	@ (80008c8 <SystemClock_Config+0xd0>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000844:	4a20      	ldr	r2, [pc, #128]	@ (80008c8 <SystemClock_Config+0xd0>)
 8000846:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	4b1e      	ldr	r3, [pc, #120]	@ (80008c8 <SystemClock_Config+0xd0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800085c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000860:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000862:	2302      	movs	r3, #2
 8000864:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000866:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800086a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800086c:	2319      	movs	r3, #25
 800086e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000870:	2390      	movs	r3, #144	@ 0x90
 8000872:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000874:	2302      	movs	r3, #2
 8000876:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000878:	2304      	movs	r3, #4
 800087a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087c:	f107 0320 	add.w	r3, r7, #32
 8000880:	4618      	mov	r0, r3
 8000882:	f001 fc1f 	bl	80020c4 <HAL_RCC_OscConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800088c:	f000 fa00 	bl	8000c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000890:	230f      	movs	r3, #15
 8000892:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000894:	2302      	movs	r3, #2
 8000896:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800089c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	2102      	movs	r1, #2
 80008ac:	4618      	mov	r0, r3
 80008ae:	f001 fe81 	bl	80025b4 <HAL_RCC_ClockConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008b8:	f000 f9ea 	bl	8000c90 <Error_Handler>
  }
}
 80008bc:	bf00      	nop
 80008be:	3750      	adds	r7, #80	@ 0x50
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40007000 	.word	0x40007000

080008cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008d2:	463b      	mov	r3, r7
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008de:	4b21      	ldr	r3, [pc, #132]	@ (8000964 <MX_ADC1_Init+0x98>)
 80008e0:	4a21      	ldr	r2, [pc, #132]	@ (8000968 <MX_ADC1_Init+0x9c>)
 80008e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000964 <MX_ADC1_Init+0x98>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000964 <MX_ADC1_Init+0x98>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000964 <MX_ADC1_Init+0x98>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000964 <MX_ADC1_Init+0x98>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008fc:	4b19      	ldr	r3, [pc, #100]	@ (8000964 <MX_ADC1_Init+0x98>)
 80008fe:	2200      	movs	r2, #0
 8000900:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000904:	4b17      	ldr	r3, [pc, #92]	@ (8000964 <MX_ADC1_Init+0x98>)
 8000906:	2200      	movs	r2, #0
 8000908:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800090a:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <MX_ADC1_Init+0x98>)
 800090c:	4a17      	ldr	r2, [pc, #92]	@ (800096c <MX_ADC1_Init+0xa0>)
 800090e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000910:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <MX_ADC1_Init+0x98>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000916:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <MX_ADC1_Init+0x98>)
 8000918:	2201      	movs	r2, #1
 800091a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800091c:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <MX_ADC1_Init+0x98>)
 800091e:	2200      	movs	r2, #0
 8000920:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000924:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <MX_ADC1_Init+0x98>)
 8000926:	2201      	movs	r2, #1
 8000928:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800092a:	480e      	ldr	r0, [pc, #56]	@ (8000964 <MX_ADC1_Init+0x98>)
 800092c:	f000 fc0c 	bl	8001148 <HAL_ADC_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000936:	f000 f9ab 	bl	8000c90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800093e:	2301      	movs	r3, #1
 8000940:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000946:	463b      	mov	r3, r7
 8000948:	4619      	mov	r1, r3
 800094a:	4806      	ldr	r0, [pc, #24]	@ (8000964 <MX_ADC1_Init+0x98>)
 800094c:	f000 fdc0 	bl	80014d0 <HAL_ADC_ConfigChannel>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000956:	f000 f99b 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000088 	.word	0x20000088
 8000968:	40012000 	.word	0x40012000
 800096c:	0f000001 	.word	0x0f000001

08000970 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000974:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <MX_I2C1_Init+0x50>)
 8000976:	4a13      	ldr	r2, [pc, #76]	@ (80009c4 <MX_I2C1_Init+0x54>)
 8000978:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800097a:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <MX_I2C1_Init+0x50>)
 800097c:	4a12      	ldr	r2, [pc, #72]	@ (80009c8 <MX_I2C1_Init+0x58>)
 800097e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000980:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <MX_I2C1_Init+0x50>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <MX_I2C1_Init+0x50>)
 8000988:	2200      	movs	r2, #0
 800098a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800098c:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <MX_I2C1_Init+0x50>)
 800098e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000992:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000994:	4b0a      	ldr	r3, [pc, #40]	@ (80009c0 <MX_I2C1_Init+0x50>)
 8000996:	2200      	movs	r2, #0
 8000998:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800099a:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <MX_I2C1_Init+0x50>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a0:	4b07      	ldr	r3, [pc, #28]	@ (80009c0 <MX_I2C1_Init+0x50>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a6:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <MX_I2C1_Init+0x50>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ac:	4804      	ldr	r0, [pc, #16]	@ (80009c0 <MX_I2C1_Init+0x50>)
 80009ae:	f001 fa45 	bl	8001e3c <HAL_I2C_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009b8:	f000 f96a 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	200000d0 	.word	0x200000d0
 80009c4:	40005400 	.word	0x40005400
 80009c8:	00061a80 	.word	0x00061a80

080009cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d0:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009d2:	4a12      	ldr	r2, [pc, #72]	@ (8000a1c <MX_USART2_UART_Init+0x50>)
 80009d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009d6:	4b10      	ldr	r3, [pc, #64]	@ (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009de:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f0:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009f2:	220c      	movs	r2, #12
 80009f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f6:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009fc:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	@ (8000a18 <MX_USART2_UART_Init+0x4c>)
 8000a04:	f002 fa5c 	bl	8002ec0 <HAL_UART_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a0e:	f000 f93f 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000124 	.word	0x20000124
 8000a1c:	40004400 	.word	0x40004400

08000a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000af8 <MX_GPIO_Init+0xd8>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a2e      	ldr	r2, [pc, #184]	@ (8000af8 <MX_GPIO_Init+0xd8>)
 8000a40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b2c      	ldr	r3, [pc, #176]	@ (8000af8 <MX_GPIO_Init+0xd8>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	4b28      	ldr	r3, [pc, #160]	@ (8000af8 <MX_GPIO_Init+0xd8>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a27      	ldr	r2, [pc, #156]	@ (8000af8 <MX_GPIO_Init+0xd8>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b25      	ldr	r3, [pc, #148]	@ (8000af8 <MX_GPIO_Init+0xd8>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	4b21      	ldr	r3, [pc, #132]	@ (8000af8 <MX_GPIO_Init+0xd8>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a20      	ldr	r2, [pc, #128]	@ (8000af8 <MX_GPIO_Init+0xd8>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000af8 <MX_GPIO_Init+0xd8>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	21c0      	movs	r1, #192	@ 0xc0
 8000a8e:	481b      	ldr	r0, [pc, #108]	@ (8000afc <MX_GPIO_Init+0xdc>)
 8000a90:	f001 f9ba 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2107      	movs	r1, #7
 8000a98:	4819      	ldr	r0, [pc, #100]	@ (8000b00 <MX_GPIO_Init+0xe0>)
 8000a9a:	f001 f9b5 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000a9e:	23c0      	movs	r3, #192	@ 0xc0
 8000aa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4811      	ldr	r0, [pc, #68]	@ (8000afc <MX_GPIO_Init+0xdc>)
 8000ab6:	f001 f80b 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED5_Pin;
 8000aba:	2307      	movs	r3, #7
 8000abc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480b      	ldr	r0, [pc, #44]	@ (8000b00 <MX_GPIO_Init+0xe0>)
 8000ad2:	f000 fffd 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000ad6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ada:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000adc:	2300      	movs	r3, #0
 8000ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4804      	ldr	r0, [pc, #16]	@ (8000afc <MX_GPIO_Init+0xdc>)
 8000aec:	f000 fff0 	bl	8001ad0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af0:	bf00      	nop
 8000af2:	3720      	adds	r7, #32
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020000 	.word	0x40020000
 8000b00:	40020400 	.word	0x40020400

08000b04 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f002 ff99 	bl	8003a44 <osDelay>
 8000b12:	e7fb      	b.n	8000b0c <StartDefaultTask+0x8>

08000b14 <pickButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pickButton */
void pickButton(void *argument)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pickButton */
  /* Infinite loop */
  for(;;)
  {

	  if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_RESET)
 8000b1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b20:	480a      	ldr	r0, [pc, #40]	@ (8000b4c <pickButton+0x38>)
 8000b22:	f001 f959 	bl	8001dd8 <HAL_GPIO_ReadPin>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d107      	bne.n	8000b3c <pickButton+0x28>
	  {
		  osDelay(300);	// debounce
 8000b2c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000b30:	f002 ff88 	bl	8003a44 <osDelay>
		  button1_pressed = 1;
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <pickButton+0x3c>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	e002      	b.n	8000b42 <pickButton+0x2e>
	  }
	  else button1_pressed = 0;
 8000b3c:	4b04      	ldr	r3, [pc, #16]	@ (8000b50 <pickButton+0x3c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
//	  {
//		  osDelay(300);	// debounce
//		  button2_pressed = 1;
//	  }

    osDelay(100);
 8000b42:	2064      	movs	r0, #100	@ 0x64
 8000b44:	f002 ff7e 	bl	8003a44 <osDelay>
	  if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_RESET)
 8000b48:	e7e8      	b.n	8000b1c <pickButton+0x8>
 8000b4a:	bf00      	nop
 8000b4c:	40020000 	.word	0x40020000
 8000b50:	20000080 	.word	0x20000080

08000b54 <getADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getADC */
void getADC(void *argument)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getADC */
  /* Infinite loop */
	 while(1)
	  {

		  HAL_ADC_Start(&hadc1);
 8000b5c:	480a      	ldr	r0, [pc, #40]	@ (8000b88 <getADC+0x34>)
 8000b5e:	f000 fb37 	bl	80011d0 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 8000b62:	210a      	movs	r1, #10
 8000b64:	4808      	ldr	r0, [pc, #32]	@ (8000b88 <getADC+0x34>)
 8000b66:	f000 fc1a 	bl	800139e <HAL_ADC_PollForConversion>
		  x_val = (HAL_ADC_GetValue(&hadc1));
 8000b6a:	4807      	ldr	r0, [pc, #28]	@ (8000b88 <getADC+0x34>)
 8000b6c:	f000 fca2 	bl	80014b4 <HAL_ADC_GetValue>
 8000b70:	4603      	mov	r3, r0
 8000b72:	461a      	mov	r2, r3
 8000b74:	4b05      	ldr	r3, [pc, #20]	@ (8000b8c <getADC+0x38>)
 8000b76:	601a      	str	r2, [r3, #0]
		  HAL_ADC_Stop(&hadc1);
 8000b78:	4803      	ldr	r0, [pc, #12]	@ (8000b88 <getADC+0x34>)
 8000b7a:	f000 fbdd 	bl	8001338 <HAL_ADC_Stop>

		  // process ADC values here


	    osDelay(10);
 8000b7e:	200a      	movs	r0, #10
 8000b80:	f002 ff60 	bl	8003a44 <osDelay>
		  HAL_ADC_Start(&hadc1);
 8000b84:	bf00      	nop
 8000b86:	e7e9      	b.n	8000b5c <getADC+0x8>
 8000b88:	20000088 	.word	0x20000088
 8000b8c:	2000007c 	.word	0x2000007c

08000b90 <LEDlevel>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LEDlevel */
void LEDlevel(void *argument)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LEDlevel */
  /* Infinite loop */
	while(1)
	  {
		  if(button1_pressed == 1){
 8000b98:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <LEDlevel+0x30>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d10c      	bne.n	8000bba <LEDlevel+0x2a>
				Light_LED();
 8000ba0:	f7ff fce6 	bl	8000570 <Light_LED>
				osDelay(300);
 8000ba4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000ba8:	f002 ff4c 	bl	8003a44 <osDelay>
				Tf_LED();
 8000bac:	f7ff fd84 	bl	80006b8 <Tf_LED>
				osDelay(300);
 8000bb0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000bb4:	f002 ff46 	bl	8003a44 <osDelay>
 8000bb8:	e7ee      	b.n	8000b98 <LEDlevel+0x8>
			}
			else Light_LED();
 8000bba:	f7ff fcd9 	bl	8000570 <Light_LED>
		  if(button1_pressed == 1){
 8000bbe:	e7eb      	b.n	8000b98 <LEDlevel+0x8>
 8000bc0:	20000080 	.word	0x20000080

08000bc4 <dispUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dispUART */
void dispUART(void *argument)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dispUART */
  /* Infinite loop */
	Menu_Display();
 8000bcc:	f7ff fd96 	bl	80006fc <Menu_Display>
		char buffer2[20] = "_";
 8000bd0:	235f      	movs	r3, #95	@ 0x5f
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]

		  for(;;)
		  {
			  // select user input
			  if (HAL_UART_Receive(&huart2, &choice, sizeof(choice), 10) == HAL_OK)
 8000be2:	230a      	movs	r3, #10
 8000be4:	2201      	movs	r2, #1
 8000be6:	491a      	ldr	r1, [pc, #104]	@ (8000c50 <dispUART+0x8c>)
 8000be8:	481a      	ldr	r0, [pc, #104]	@ (8000c54 <dispUART+0x90>)
 8000bea:	f002 fa44 	bl	8003076 <HAL_UART_Receive>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d11f      	bne.n	8000c34 <dispUART+0x70>
			  {
				switch (choice) {
 8000bf4:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <dispUART+0x8c>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b31      	cmp	r3, #49	@ 0x31
 8000bfa:	d002      	beq.n	8000c02 <dispUART+0x3e>
 8000bfc:	2b32      	cmp	r3, #50	@ 0x32
 8000bfe:	d010      	beq.n	8000c22 <dispUART+0x5e>
					case '2':
						HAL_UART_Transmit(&huart2, (uint8_t*)"HELLO WORLD\r\n", sizeof("HELLO WORLD\r\n") - 1, 10);
						Menu_Display();
						break;
					default:
						break;
 8000c00:	e018      	b.n	8000c34 <dispUART+0x70>
						sprintf(buffer2, "Voltage = %d\r\n",x_val);
 8000c02:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <dispUART+0x94>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	4914      	ldr	r1, [pc, #80]	@ (8000c5c <dispUART+0x98>)
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f005 fbbb 	bl	8006388 <siprintf>
						HAL_UART_Transmit(&huart2, buffer2, sizeof(buffer2), 20);
 8000c12:	f107 010c 	add.w	r1, r7, #12
 8000c16:	2314      	movs	r3, #20
 8000c18:	2214      	movs	r2, #20
 8000c1a:	480e      	ldr	r0, [pc, #56]	@ (8000c54 <dispUART+0x90>)
 8000c1c:	f002 f9a0 	bl	8002f60 <HAL_UART_Transmit>
						break;
 8000c20:	e008      	b.n	8000c34 <dispUART+0x70>
						HAL_UART_Transmit(&huart2, (uint8_t*)"HELLO WORLD\r\n", sizeof("HELLO WORLD\r\n") - 1, 10);
 8000c22:	230a      	movs	r3, #10
 8000c24:	220d      	movs	r2, #13
 8000c26:	490e      	ldr	r1, [pc, #56]	@ (8000c60 <dispUART+0x9c>)
 8000c28:	480a      	ldr	r0, [pc, #40]	@ (8000c54 <dispUART+0x90>)
 8000c2a:	f002 f999 	bl	8002f60 <HAL_UART_Transmit>
						Menu_Display();
 8000c2e:	f7ff fd65 	bl	80006fc <Menu_Display>
						break;
 8000c32:	bf00      	nop
				}
			  }else{

			  }

			  if(button1_pressed)
 8000c34:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <dispUART+0xa0>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d005      	beq.n	8000c48 <dispUART+0x84>
			  {
				  HAL_UART_Transmit(&huart2, (uint8_t*)"Button1 pressed\r\n", sizeof("Button1 pressed\r\n"), 10);
 8000c3c:	230a      	movs	r3, #10
 8000c3e:	2212      	movs	r2, #18
 8000c40:	4909      	ldr	r1, [pc, #36]	@ (8000c68 <dispUART+0xa4>)
 8000c42:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <dispUART+0x90>)
 8000c44:	f002 f98c 	bl	8002f60 <HAL_UART_Transmit>
		//			  HAL_UART_Transmit(&huart1, (uint8_t*)"Button2 pressed\r\n", sizeof("Button2 pressed\r\n"), 10);
		//			  button2_pressed = 0;
		//		  }


			osDelay(100);
 8000c48:	2064      	movs	r0, #100	@ 0x64
 8000c4a:	f002 fefb 	bl	8003a44 <osDelay>
			  if (HAL_UART_Receive(&huart2, &choice, sizeof(choice), 10) == HAL_OK)
 8000c4e:	e7c8      	b.n	8000be2 <dispUART+0x1e>
 8000c50:	20000084 	.word	0x20000084
 8000c54:	20000124 	.word	0x20000124
 8000c58:	2000007c 	.word	0x2000007c
 8000c5c:	08006d28 	.word	0x08006d28
 8000c60:	08006d38 	.word	0x08006d38
 8000c64:	20000080 	.word	0x20000080
 8000c68:	08006d48 	.word	0x08006d48

08000c6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a04      	ldr	r2, [pc, #16]	@ (8000c8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d101      	bne.n	8000c82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c7e:	f000 fa43 	bl	8001108 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40000800 	.word	0x40000800

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <Error_Handler+0x8>

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4b12      	ldr	r3, [pc, #72]	@ (8000cf0 <HAL_MspInit+0x54>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000caa:	4a11      	ldr	r2, [pc, #68]	@ (8000cf0 <HAL_MspInit+0x54>)
 8000cac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf0 <HAL_MspInit+0x54>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf0 <HAL_MspInit+0x54>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf0 <HAL_MspInit+0x54>)
 8000cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cce:	4b08      	ldr	r3, [pc, #32]	@ (8000cf0 <HAL_MspInit+0x54>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	210f      	movs	r1, #15
 8000cde:	f06f 0001 	mvn.w	r0, #1
 8000ce2:	f000 fecb 	bl	8001a7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800

08000cf4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	@ 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a17      	ldr	r2, [pc, #92]	@ (8000d70 <HAL_ADC_MspInit+0x7c>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d127      	bne.n	8000d66 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b16      	ldr	r3, [pc, #88]	@ (8000d74 <HAL_ADC_MspInit+0x80>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1e:	4a15      	ldr	r2, [pc, #84]	@ (8000d74 <HAL_ADC_MspInit+0x80>)
 8000d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d26:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <HAL_ADC_MspInit+0x80>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <HAL_ADC_MspInit+0x80>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d74 <HAL_ADC_MspInit+0x80>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <HAL_ADC_MspInit+0x80>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d52:	2303      	movs	r3, #3
 8000d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4805      	ldr	r0, [pc, #20]	@ (8000d78 <HAL_ADC_MspInit+0x84>)
 8000d62:	f000 feb5 	bl	8001ad0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d66:	bf00      	nop
 8000d68:	3728      	adds	r7, #40	@ 0x28
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40012000 	.word	0x40012000
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40020000 	.word	0x40020000

08000d7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	@ 0x28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a19      	ldr	r2, [pc, #100]	@ (8000e00 <HAL_I2C_MspInit+0x84>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d12b      	bne.n	8000df6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	4b18      	ldr	r3, [pc, #96]	@ (8000e04 <HAL_I2C_MspInit+0x88>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	4a17      	ldr	r2, [pc, #92]	@ (8000e04 <HAL_I2C_MspInit+0x88>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dae:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <HAL_I2C_MspInit+0x88>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dba:	23c0      	movs	r3, #192	@ 0xc0
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dbe:	2312      	movs	r3, #18
 8000dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dca:	2304      	movs	r3, #4
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480c      	ldr	r0, [pc, #48]	@ (8000e08 <HAL_I2C_MspInit+0x8c>)
 8000dd6:	f000 fe7b 	bl	8001ad0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <HAL_I2C_MspInit+0x88>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de2:	4a08      	ldr	r2, [pc, #32]	@ (8000e04 <HAL_I2C_MspInit+0x88>)
 8000de4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dea:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_I2C_MspInit+0x88>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000df6:	bf00      	nop
 8000df8:	3728      	adds	r7, #40	@ 0x28
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40005400 	.word	0x40005400
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020400 	.word	0x40020400

08000e0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	@ 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a19      	ldr	r2, [pc, #100]	@ (8000e90 <HAL_UART_MspInit+0x84>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d12b      	bne.n	8000e86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	4b18      	ldr	r3, [pc, #96]	@ (8000e94 <HAL_UART_MspInit+0x88>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e36:	4a17      	ldr	r2, [pc, #92]	@ (8000e94 <HAL_UART_MspInit+0x88>)
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e3e:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <HAL_UART_MspInit+0x88>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <HAL_UART_MspInit+0x88>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	4a10      	ldr	r2, [pc, #64]	@ (8000e94 <HAL_UART_MspInit+0x88>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <HAL_UART_MspInit+0x88>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e66:	230c      	movs	r3, #12
 8000e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e76:	2307      	movs	r3, #7
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4805      	ldr	r0, [pc, #20]	@ (8000e98 <HAL_UART_MspInit+0x8c>)
 8000e82:	f000 fe25 	bl	8001ad0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	@ 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40004400 	.word	0x40004400
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020000 	.word	0x40020000

08000e9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08e      	sub	sp, #56	@ 0x38
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	4b33      	ldr	r3, [pc, #204]	@ (8000f80 <HAL_InitTick+0xe4>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb4:	4a32      	ldr	r2, [pc, #200]	@ (8000f80 <HAL_InitTick+0xe4>)
 8000eb6:	f043 0304 	orr.w	r3, r3, #4
 8000eba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ebc:	4b30      	ldr	r3, [pc, #192]	@ (8000f80 <HAL_InitTick+0xe4>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ec8:	f107 0210 	add.w	r2, r7, #16
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 fd4e 	bl	8002974 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ed8:	6a3b      	ldr	r3, [r7, #32]
 8000eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d103      	bne.n	8000eea <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ee2:	f001 fd1f 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 8000ee6:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ee8:	e004      	b.n	8000ef4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000eea:	f001 fd1b 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ef6:	4a23      	ldr	r2, [pc, #140]	@ (8000f84 <HAL_InitTick+0xe8>)
 8000ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8000efc:	0c9b      	lsrs	r3, r3, #18
 8000efe:	3b01      	subs	r3, #1
 8000f00:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000f02:	4b21      	ldr	r3, [pc, #132]	@ (8000f88 <HAL_InitTick+0xec>)
 8000f04:	4a21      	ldr	r2, [pc, #132]	@ (8000f8c <HAL_InitTick+0xf0>)
 8000f06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000f08:	4b1f      	ldr	r3, [pc, #124]	@ (8000f88 <HAL_InitTick+0xec>)
 8000f0a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f0e:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000f10:	4a1d      	ldr	r2, [pc, #116]	@ (8000f88 <HAL_InitTick+0xec>)
 8000f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f14:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000f16:	4b1c      	ldr	r3, [pc, #112]	@ (8000f88 <HAL_InitTick+0xec>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <HAL_InitTick+0xec>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f22:	4b19      	ldr	r3, [pc, #100]	@ (8000f88 <HAL_InitTick+0xec>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000f28:	4817      	ldr	r0, [pc, #92]	@ (8000f88 <HAL_InitTick+0xec>)
 8000f2a:	f001 fd55 	bl	80029d8 <HAL_TIM_Base_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000f34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d11b      	bne.n	8000f74 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000f3c:	4812      	ldr	r0, [pc, #72]	@ (8000f88 <HAL_InitTick+0xec>)
 8000f3e:	f001 fda5 	bl	8002a8c <HAL_TIM_Base_Start_IT>
 8000f42:	4603      	mov	r3, r0
 8000f44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000f48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d111      	bne.n	8000f74 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f50:	201e      	movs	r0, #30
 8000f52:	f000 fdaf 	bl	8001ab4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b0f      	cmp	r3, #15
 8000f5a:	d808      	bhi.n	8000f6e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	201e      	movs	r0, #30
 8000f62:	f000 fd8b 	bl	8001a7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f66:	4a0a      	ldr	r2, [pc, #40]	@ (8000f90 <HAL_InitTick+0xf4>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	e002      	b.n	8000f74 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3738      	adds	r7, #56	@ 0x38
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40023800 	.word	0x40023800
 8000f84:	431bde83 	.word	0x431bde83
 8000f88:	20000180 	.word	0x20000180
 8000f8c:	40000800 	.word	0x40000800
 8000f90:	20000004 	.word	0x20000004

08000f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <NMI_Handler+0x4>

08000f9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <HardFault_Handler+0x4>

08000fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <MemManage_Handler+0x4>

08000fac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <BusFault_Handler+0x4>

08000fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <UsageFault_Handler+0x4>

08000fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000fd0:	4802      	ldr	r0, [pc, #8]	@ (8000fdc <TIM4_IRQHandler+0x10>)
 8000fd2:	f001 fdbd 	bl	8002b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000180 	.word	0x20000180

08000fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe8:	4a14      	ldr	r2, [pc, #80]	@ (800103c <_sbrk+0x5c>)
 8000fea:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <_sbrk+0x60>)
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff4:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d102      	bne.n	8001002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <_sbrk+0x64>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	@ (8001048 <_sbrk+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001002:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	429a      	cmp	r2, r3
 800100e:	d207      	bcs.n	8001020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001010:	f005 f9e2 	bl	80063d8 <__errno>
 8001014:	4603      	mov	r3, r0
 8001016:	220c      	movs	r2, #12
 8001018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e009      	b.n	8001034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001020:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001026:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	4a05      	ldr	r2, [pc, #20]	@ (8001044 <_sbrk+0x64>)
 8001030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20010000 	.word	0x20010000
 8001040:	00000400 	.word	0x00000400
 8001044:	200001c8 	.word	0x200001c8
 8001048:	20001e78 	.word	0x20001e78

0800104c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <SystemInit+0x20>)
 8001052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001056:	4a05      	ldr	r2, [pc, #20]	@ (800106c <SystemInit+0x20>)
 8001058:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800105c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001070:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001074:	f7ff ffea 	bl	800104c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001078:	480c      	ldr	r0, [pc, #48]	@ (80010ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800107a:	490d      	ldr	r1, [pc, #52]	@ (80010b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800107c:	4a0d      	ldr	r2, [pc, #52]	@ (80010b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001080:	e002      	b.n	8001088 <LoopCopyDataInit>

08001082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001086:	3304      	adds	r3, #4

08001088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800108c:	d3f9      	bcc.n	8001082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108e:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001090:	4c0a      	ldr	r4, [pc, #40]	@ (80010bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001094:	e001      	b.n	800109a <LoopFillZerobss>

08001096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001098:	3204      	adds	r2, #4

0800109a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800109c:	d3fb      	bcc.n	8001096 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800109e:	f005 f9a1 	bl	80063e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a2:	f7ff fb4f 	bl	8000744 <main>
  bx  lr    
 80010a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80010b4:	08006e84 	.word	0x08006e84
  ldr r2, =_sbss
 80010b8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80010bc:	20001e78 	.word	0x20001e78

080010c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC_IRQHandler>
	...

080010c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001104 <HAL_Init+0x40>)
 80010ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <HAL_Init+0x40>)
 80010da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a07      	ldr	r2, [pc, #28]	@ (8001104 <HAL_Init+0x40>)
 80010e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ec:	2003      	movs	r0, #3
 80010ee:	f000 fcba 	bl	8001a66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f2:	200f      	movs	r0, #15
 80010f4:	f7ff fed2 	bl	8000e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f8:	f7ff fdd0 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023c00 	.word	0x40023c00

08001108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <HAL_IncTick+0x20>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <HAL_IncTick+0x24>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a04      	ldr	r2, [pc, #16]	@ (800112c <HAL_IncTick+0x24>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008
 800112c:	200001cc 	.word	0x200001cc

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b03      	ldr	r3, [pc, #12]	@ (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	200001cc 	.word	0x200001cc

08001148 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e033      	b.n	80011c6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001162:	2b00      	cmp	r3, #0
 8001164:	d109      	bne.n	800117a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff fdc4 	bl	8000cf4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117e:	f003 0310 	and.w	r3, r3, #16
 8001182:	2b00      	cmp	r3, #0
 8001184:	d118      	bne.n	80011b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800118e:	f023 0302 	bic.w	r3, r3, #2
 8001192:	f043 0202 	orr.w	r2, r3, #2
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f000 faba 	bl	8001714 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011aa:	f023 0303 	bic.w	r3, r3, #3
 80011ae:	f043 0201 	orr.w	r2, r3, #1
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80011b6:	e001      	b.n	80011bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80011d8:	2300      	movs	r3, #0
 80011da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d101      	bne.n	80011ea <HAL_ADC_Start+0x1a>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e097      	b.n	800131a <HAL_ADC_Start+0x14a>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d018      	beq.n	8001232 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 0201 	orr.w	r2, r2, #1
 800120e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001210:	4b45      	ldr	r3, [pc, #276]	@ (8001328 <HAL_ADC_Start+0x158>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a45      	ldr	r2, [pc, #276]	@ (800132c <HAL_ADC_Start+0x15c>)
 8001216:	fba2 2303 	umull	r2, r3, r2, r3
 800121a:	0c9a      	lsrs	r2, r3, #18
 800121c:	4613      	mov	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4413      	add	r3, r2
 8001222:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001224:	e002      	b.n	800122c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	3b01      	subs	r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f9      	bne.n	8001226 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b01      	cmp	r3, #1
 800123e:	d15f      	bne.n	8001300 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001244:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001248:	f023 0301 	bic.w	r3, r3, #1
 800124c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800125e:	2b00      	cmp	r3, #0
 8001260:	d007      	beq.n	8001272 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001266:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800126a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001276:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800127a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800127e:	d106      	bne.n	800128e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001284:	f023 0206 	bic.w	r2, r3, #6
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	645a      	str	r2, [r3, #68]	@ 0x44
 800128c:	e002      	b.n	8001294 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800129c:	4b24      	ldr	r3, [pc, #144]	@ (8001330 <HAL_ADC_Start+0x160>)
 800129e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80012a8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 031f 	and.w	r3, r3, #31
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10f      	bne.n	80012d6 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d129      	bne.n	8001318 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	e020      	b.n	8001318 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a16      	ldr	r2, [pc, #88]	@ (8001334 <HAL_ADC_Start+0x164>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d11b      	bne.n	8001318 <HAL_ADC_Start+0x148>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d114      	bne.n	8001318 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	e00b      	b.n	8001318 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001304:	f043 0210 	orr.w	r2, r3, #16
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001310:	f043 0201 	orr.w	r2, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20000000 	.word	0x20000000
 800132c:	431bde83 	.word	0x431bde83
 8001330:	40012300 	.word	0x40012300
 8001334:	40012000 	.word	0x40012000

08001338 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001346:	2b01      	cmp	r3, #1
 8001348:	d101      	bne.n	800134e <HAL_ADC_Stop+0x16>
 800134a:	2302      	movs	r3, #2
 800134c:	e021      	b.n	8001392 <HAL_ADC_Stop+0x5a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0201 	bic.w	r2, r2, #1
 8001364:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	2b00      	cmp	r3, #0
 8001372:	d109      	bne.n	8001388 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001378:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800137c:	f023 0301 	bic.w	r3, r3, #1
 8001380:	f043 0201 	orr.w	r2, r3, #1
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b084      	sub	sp, #16
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013ba:	d113      	bne.n	80013e4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80013c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013ca:	d10b      	bne.n	80013e4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d0:	f043 0220 	orr.w	r2, r3, #32
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e063      	b.n	80014ac <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80013e4:	f7ff fea4 	bl	8001130 <HAL_GetTick>
 80013e8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013ea:	e021      	b.n	8001430 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f2:	d01d      	beq.n	8001430 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d007      	beq.n	800140a <HAL_ADC_PollForConversion+0x6c>
 80013fa:	f7ff fe99 	bl	8001130 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d212      	bcs.n	8001430 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b02      	cmp	r3, #2
 8001416:	d00b      	beq.n	8001430 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141c:	f043 0204 	orr.w	r2, r3, #4
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e03d      	b.n	80014ac <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b02      	cmp	r3, #2
 800143c:	d1d6      	bne.n	80013ec <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f06f 0212 	mvn.w	r2, #18
 8001446:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d123      	bne.n	80014aa <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001466:	2b00      	cmp	r3, #0
 8001468:	d11f      	bne.n	80014aa <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001470:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001474:	2b00      	cmp	r3, #0
 8001476:	d006      	beq.n	8001486 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001482:	2b00      	cmp	r3, #0
 8001484:	d111      	bne.n	80014aa <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d105      	bne.n	80014aa <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	f043 0201 	orr.w	r2, r3, #1
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d101      	bne.n	80014ec <HAL_ADC_ConfigChannel+0x1c>
 80014e8:	2302      	movs	r3, #2
 80014ea:	e105      	b.n	80016f8 <HAL_ADC_ConfigChannel+0x228>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b09      	cmp	r3, #9
 80014fa:	d925      	bls.n	8001548 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	68d9      	ldr	r1, [r3, #12]
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	b29b      	uxth	r3, r3
 8001508:	461a      	mov	r2, r3
 800150a:	4613      	mov	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	4413      	add	r3, r2
 8001510:	3b1e      	subs	r3, #30
 8001512:	2207      	movs	r2, #7
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43da      	mvns	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	400a      	ands	r2, r1
 8001520:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68d9      	ldr	r1, [r3, #12]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	b29b      	uxth	r3, r3
 8001532:	4618      	mov	r0, r3
 8001534:	4603      	mov	r3, r0
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4403      	add	r3, r0
 800153a:	3b1e      	subs	r3, #30
 800153c:	409a      	lsls	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	430a      	orrs	r2, r1
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	e022      	b.n	800158e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6919      	ldr	r1, [r3, #16]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	461a      	mov	r2, r3
 8001556:	4613      	mov	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4413      	add	r3, r2
 800155c:	2207      	movs	r2, #7
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43da      	mvns	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	400a      	ands	r2, r1
 800156a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6919      	ldr	r1, [r3, #16]
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	b29b      	uxth	r3, r3
 800157c:	4618      	mov	r0, r3
 800157e:	4603      	mov	r3, r0
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	4403      	add	r3, r0
 8001584:	409a      	lsls	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b06      	cmp	r3, #6
 8001594:	d824      	bhi.n	80015e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	3b05      	subs	r3, #5
 80015a8:	221f      	movs	r2, #31
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43da      	mvns	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	400a      	ands	r2, r1
 80015b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	4618      	mov	r0, r3
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	3b05      	subs	r3, #5
 80015d2:	fa00 f203 	lsl.w	r2, r0, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80015de:	e04c      	b.n	800167a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b0c      	cmp	r3, #12
 80015e6:	d824      	bhi.n	8001632 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	4613      	mov	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	3b23      	subs	r3, #35	@ 0x23
 80015fa:	221f      	movs	r2, #31
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43da      	mvns	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	400a      	ands	r2, r1
 8001608:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	b29b      	uxth	r3, r3
 8001616:	4618      	mov	r0, r3
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	3b23      	subs	r3, #35	@ 0x23
 8001624:	fa00 f203 	lsl.w	r2, r0, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001630:	e023      	b.n	800167a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	3b41      	subs	r3, #65	@ 0x41
 8001644:	221f      	movs	r2, #31
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43da      	mvns	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	400a      	ands	r2, r1
 8001652:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	b29b      	uxth	r3, r3
 8001660:	4618      	mov	r0, r3
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	3b41      	subs	r3, #65	@ 0x41
 800166e:	fa00 f203 	lsl.w	r2, r0, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	430a      	orrs	r2, r1
 8001678:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800167a:	4b22      	ldr	r3, [pc, #136]	@ (8001704 <HAL_ADC_ConfigChannel+0x234>)
 800167c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a21      	ldr	r2, [pc, #132]	@ (8001708 <HAL_ADC_ConfigChannel+0x238>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d109      	bne.n	800169c <HAL_ADC_ConfigChannel+0x1cc>
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b12      	cmp	r3, #18
 800168e:	d105      	bne.n	800169c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a19      	ldr	r2, [pc, #100]	@ (8001708 <HAL_ADC_ConfigChannel+0x238>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d123      	bne.n	80016ee <HAL_ADC_ConfigChannel+0x21e>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b10      	cmp	r3, #16
 80016ac:	d003      	beq.n	80016b6 <HAL_ADC_ConfigChannel+0x1e6>
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b11      	cmp	r3, #17
 80016b4:	d11b      	bne.n	80016ee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b10      	cmp	r3, #16
 80016c8:	d111      	bne.n	80016ee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016ca:	4b10      	ldr	r3, [pc, #64]	@ (800170c <HAL_ADC_ConfigChannel+0x23c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a10      	ldr	r2, [pc, #64]	@ (8001710 <HAL_ADC_ConfigChannel+0x240>)
 80016d0:	fba2 2303 	umull	r2, r3, r2, r3
 80016d4:	0c9a      	lsrs	r2, r3, #18
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016e0:	e002      	b.n	80016e8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f9      	bne.n	80016e2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	40012300 	.word	0x40012300
 8001708:	40012000 	.word	0x40012000
 800170c:	20000000 	.word	0x20000000
 8001710:	431bde83 	.word	0x431bde83

08001714 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800171c:	4b79      	ldr	r3, [pc, #484]	@ (8001904 <ADC_Init+0x1f0>)
 800171e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	431a      	orrs	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001748:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6859      	ldr	r1, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	021a      	lsls	r2, r3, #8
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800176c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6859      	ldr	r1, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800178e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6899      	ldr	r1, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68da      	ldr	r2, [r3, #12]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a6:	4a58      	ldr	r2, [pc, #352]	@ (8001908 <ADC_Init+0x1f4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d022      	beq.n	80017f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6899      	ldr	r1, [r3, #8]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6899      	ldr	r1, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	e00f      	b.n	8001812 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001800:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001810:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 0202 	bic.w	r2, r2, #2
 8001820:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6899      	ldr	r1, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7e1b      	ldrb	r3, [r3, #24]
 800182c:	005a      	lsls	r2, r3, #1
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3020 	ldrb.w	r3, [r3, #32]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d01b      	beq.n	8001878 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800184e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800185e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6859      	ldr	r1, [r3, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186a:	3b01      	subs	r3, #1
 800186c:	035a      	lsls	r2, r3, #13
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	e007      	b.n	8001888 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001886:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001896:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	051a      	lsls	r2, r3, #20
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80018bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6899      	ldr	r1, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018ca:	025a      	lsls	r2, r3, #9
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6899      	ldr	r1, [r3, #8]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	029a      	lsls	r2, r3, #10
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	609a      	str	r2, [r3, #8]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	40012300 	.word	0x40012300
 8001908:	0f000001 	.word	0x0f000001

0800190c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800191c:	4b0c      	ldr	r3, [pc, #48]	@ (8001950 <__NVIC_SetPriorityGrouping+0x44>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001928:	4013      	ands	r3, r2
 800192a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001934:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800193c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800193e:	4a04      	ldr	r2, [pc, #16]	@ (8001950 <__NVIC_SetPriorityGrouping+0x44>)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	60d3      	str	r3, [r2, #12]
}
 8001944:	bf00      	nop
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001958:	4b04      	ldr	r3, [pc, #16]	@ (800196c <__NVIC_GetPriorityGrouping+0x18>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	0a1b      	lsrs	r3, r3, #8
 800195e:	f003 0307 	and.w	r3, r3, #7
}
 8001962:	4618      	mov	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	2b00      	cmp	r3, #0
 8001980:	db0b      	blt.n	800199a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	f003 021f 	and.w	r2, r3, #31
 8001988:	4907      	ldr	r1, [pc, #28]	@ (80019a8 <__NVIC_EnableIRQ+0x38>)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	095b      	lsrs	r3, r3, #5
 8001990:	2001      	movs	r0, #1
 8001992:	fa00 f202 	lsl.w	r2, r0, r2
 8001996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000e100 	.word	0xe000e100

080019ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	db0a      	blt.n	80019d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	490c      	ldr	r1, [pc, #48]	@ (80019f8 <__NVIC_SetPriority+0x4c>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	0112      	lsls	r2, r2, #4
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	440b      	add	r3, r1
 80019d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d4:	e00a      	b.n	80019ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4908      	ldr	r1, [pc, #32]	@ (80019fc <__NVIC_SetPriority+0x50>)
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	3b04      	subs	r3, #4
 80019e4:	0112      	lsls	r2, r2, #4
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	440b      	add	r3, r1
 80019ea:	761a      	strb	r2, [r3, #24]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000e100 	.word	0xe000e100
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b089      	sub	sp, #36	@ 0x24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f1c3 0307 	rsb	r3, r3, #7
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	bf28      	it	cs
 8001a1e:	2304      	movcs	r3, #4
 8001a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3304      	adds	r3, #4
 8001a26:	2b06      	cmp	r3, #6
 8001a28:	d902      	bls.n	8001a30 <NVIC_EncodePriority+0x30>
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3b03      	subs	r3, #3
 8001a2e:	e000      	b.n	8001a32 <NVIC_EncodePriority+0x32>
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	f04f 32ff 	mov.w	r2, #4294967295
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43da      	mvns	r2, r3
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	401a      	ands	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a48:	f04f 31ff 	mov.w	r1, #4294967295
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a52:	43d9      	mvns	r1, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a58:	4313      	orrs	r3, r2
         );
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3724      	adds	r7, #36	@ 0x24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ff4c 	bl	800190c <__NVIC_SetPriorityGrouping>
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a8e:	f7ff ff61 	bl	8001954 <__NVIC_GetPriorityGrouping>
 8001a92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	68b9      	ldr	r1, [r7, #8]
 8001a98:	6978      	ldr	r0, [r7, #20]
 8001a9a:	f7ff ffb1 	bl	8001a00 <NVIC_EncodePriority>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa4:	4611      	mov	r1, r2
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff ff80 	bl	80019ac <__NVIC_SetPriority>
}
 8001aac:	bf00      	nop
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff ff54 	bl	8001970 <__NVIC_EnableIRQ>
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	@ 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
 8001aea:	e159      	b.n	8001da0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aec:	2201      	movs	r2, #1
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	f040 8148 	bne.w	8001d9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d005      	beq.n	8001b22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d130      	bne.n	8001b84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4013      	ands	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b58:	2201      	movs	r2, #1
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	091b      	lsrs	r3, r3, #4
 8001b6e:	f003 0201 	and.w	r2, r3, #1
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d017      	beq.n	8001bc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d123      	bne.n	8001c14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	08da      	lsrs	r2, r3, #3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3208      	adds	r2, #8
 8001bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	220f      	movs	r2, #15
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	08da      	lsrs	r2, r3, #3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3208      	adds	r2, #8
 8001c0e:	69b9      	ldr	r1, [r7, #24]
 8001c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	2203      	movs	r2, #3
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0203 	and.w	r2, r3, #3
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80a2 	beq.w	8001d9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b57      	ldr	r3, [pc, #348]	@ (8001db8 <HAL_GPIO_Init+0x2e8>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5e:	4a56      	ldr	r2, [pc, #344]	@ (8001db8 <HAL_GPIO_Init+0x2e8>)
 8001c60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c66:	4b54      	ldr	r3, [pc, #336]	@ (8001db8 <HAL_GPIO_Init+0x2e8>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c72:	4a52      	ldr	r2, [pc, #328]	@ (8001dbc <HAL_GPIO_Init+0x2ec>)
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	089b      	lsrs	r3, r3, #2
 8001c78:	3302      	adds	r3, #2
 8001c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	220f      	movs	r2, #15
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a49      	ldr	r2, [pc, #292]	@ (8001dc0 <HAL_GPIO_Init+0x2f0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d019      	beq.n	8001cd2 <HAL_GPIO_Init+0x202>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a48      	ldr	r2, [pc, #288]	@ (8001dc4 <HAL_GPIO_Init+0x2f4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d013      	beq.n	8001cce <HAL_GPIO_Init+0x1fe>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a47      	ldr	r2, [pc, #284]	@ (8001dc8 <HAL_GPIO_Init+0x2f8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d00d      	beq.n	8001cca <HAL_GPIO_Init+0x1fa>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a46      	ldr	r2, [pc, #280]	@ (8001dcc <HAL_GPIO_Init+0x2fc>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d007      	beq.n	8001cc6 <HAL_GPIO_Init+0x1f6>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a45      	ldr	r2, [pc, #276]	@ (8001dd0 <HAL_GPIO_Init+0x300>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d101      	bne.n	8001cc2 <HAL_GPIO_Init+0x1f2>
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	e008      	b.n	8001cd4 <HAL_GPIO_Init+0x204>
 8001cc2:	2307      	movs	r3, #7
 8001cc4:	e006      	b.n	8001cd4 <HAL_GPIO_Init+0x204>
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e004      	b.n	8001cd4 <HAL_GPIO_Init+0x204>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e002      	b.n	8001cd4 <HAL_GPIO_Init+0x204>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <HAL_GPIO_Init+0x204>
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	69fa      	ldr	r2, [r7, #28]
 8001cd6:	f002 0203 	and.w	r2, r2, #3
 8001cda:	0092      	lsls	r2, r2, #2
 8001cdc:	4093      	lsls	r3, r2
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ce4:	4935      	ldr	r1, [pc, #212]	@ (8001dbc <HAL_GPIO_Init+0x2ec>)
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	089b      	lsrs	r3, r3, #2
 8001cea:	3302      	adds	r3, #2
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cf2:	4b38      	ldr	r3, [pc, #224]	@ (8001dd4 <HAL_GPIO_Init+0x304>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d16:	4a2f      	ldr	r2, [pc, #188]	@ (8001dd4 <HAL_GPIO_Init+0x304>)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd4 <HAL_GPIO_Init+0x304>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d40:	4a24      	ldr	r2, [pc, #144]	@ (8001dd4 <HAL_GPIO_Init+0x304>)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d46:	4b23      	ldr	r3, [pc, #140]	@ (8001dd4 <HAL_GPIO_Init+0x304>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d6a:	4a1a      	ldr	r2, [pc, #104]	@ (8001dd4 <HAL_GPIO_Init+0x304>)
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d70:	4b18      	ldr	r3, [pc, #96]	@ (8001dd4 <HAL_GPIO_Init+0x304>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d94:	4a0f      	ldr	r2, [pc, #60]	@ (8001dd4 <HAL_GPIO_Init+0x304>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	61fb      	str	r3, [r7, #28]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	2b0f      	cmp	r3, #15
 8001da4:	f67f aea2 	bls.w	8001aec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001da8:	bf00      	nop
 8001daa:	bf00      	nop
 8001dac:	3724      	adds	r7, #36	@ 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40013800 	.word	0x40013800
 8001dc0:	40020000 	.word	0x40020000
 8001dc4:	40020400 	.word	0x40020400
 8001dc8:	40020800 	.word	0x40020800
 8001dcc:	40020c00 	.word	0x40020c00
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40013c00 	.word	0x40013c00

08001dd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691a      	ldr	r2, [r3, #16]
 8001de8:	887b      	ldrh	r3, [r7, #2]
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001df0:	2301      	movs	r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
 8001df4:	e001      	b.n	8001dfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	807b      	strh	r3, [r7, #2]
 8001e14:	4613      	mov	r3, r2
 8001e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e18:	787b      	ldrb	r3, [r7, #1]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e1e:	887a      	ldrh	r2, [r7, #2]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e24:	e003      	b.n	8001e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e26:	887b      	ldrh	r3, [r7, #2]
 8001e28:	041a      	lsls	r2, r3, #16
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	619a      	str	r2, [r3, #24]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e12b      	b.n	80020a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d106      	bne.n	8001e68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7fe ff8a 	bl	8000d7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2224      	movs	r2, #36	@ 0x24
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0201 	bic.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ea0:	f000 fd40 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 8001ea4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	4a81      	ldr	r2, [pc, #516]	@ (80020b0 <HAL_I2C_Init+0x274>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d807      	bhi.n	8001ec0 <HAL_I2C_Init+0x84>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4a80      	ldr	r2, [pc, #512]	@ (80020b4 <HAL_I2C_Init+0x278>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	bf94      	ite	ls
 8001eb8:	2301      	movls	r3, #1
 8001eba:	2300      	movhi	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	e006      	b.n	8001ece <HAL_I2C_Init+0x92>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4a7d      	ldr	r2, [pc, #500]	@ (80020b8 <HAL_I2C_Init+0x27c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	bf94      	ite	ls
 8001ec8:	2301      	movls	r3, #1
 8001eca:	2300      	movhi	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e0e7      	b.n	80020a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4a78      	ldr	r2, [pc, #480]	@ (80020bc <HAL_I2C_Init+0x280>)
 8001eda:	fba2 2303 	umull	r2, r3, r2, r3
 8001ede:	0c9b      	lsrs	r3, r3, #18
 8001ee0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4a6a      	ldr	r2, [pc, #424]	@ (80020b0 <HAL_I2C_Init+0x274>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d802      	bhi.n	8001f10 <HAL_I2C_Init+0xd4>
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	e009      	b.n	8001f24 <HAL_I2C_Init+0xe8>
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f16:	fb02 f303 	mul.w	r3, r2, r3
 8001f1a:	4a69      	ldr	r2, [pc, #420]	@ (80020c0 <HAL_I2C_Init+0x284>)
 8001f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f20:	099b      	lsrs	r3, r3, #6
 8001f22:	3301      	adds	r3, #1
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f36:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	495c      	ldr	r1, [pc, #368]	@ (80020b0 <HAL_I2C_Init+0x274>)
 8001f40:	428b      	cmp	r3, r1
 8001f42:	d819      	bhi.n	8001f78 <HAL_I2C_Init+0x13c>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	1e59      	subs	r1, r3, #1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f52:	1c59      	adds	r1, r3, #1
 8001f54:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f58:	400b      	ands	r3, r1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00a      	beq.n	8001f74 <HAL_I2C_Init+0x138>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1e59      	subs	r1, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f72:	e051      	b.n	8002018 <HAL_I2C_Init+0x1dc>
 8001f74:	2304      	movs	r3, #4
 8001f76:	e04f      	b.n	8002018 <HAL_I2C_Init+0x1dc>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d111      	bne.n	8001fa4 <HAL_I2C_Init+0x168>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1e58      	subs	r0, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6859      	ldr	r1, [r3, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	440b      	add	r3, r1
 8001f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f92:	3301      	adds	r3, #1
 8001f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	bf0c      	ite	eq
 8001f9c:	2301      	moveq	r3, #1
 8001f9e:	2300      	movne	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	e012      	b.n	8001fca <HAL_I2C_Init+0x18e>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1e58      	subs	r0, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6859      	ldr	r1, [r3, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	0099      	lsls	r1, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fba:	3301      	adds	r3, #1
 8001fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf0c      	ite	eq
 8001fc4:	2301      	moveq	r3, #1
 8001fc6:	2300      	movne	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_I2C_Init+0x196>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e022      	b.n	8002018 <HAL_I2C_Init+0x1dc>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10e      	bne.n	8001ff8 <HAL_I2C_Init+0x1bc>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1e58      	subs	r0, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6859      	ldr	r1, [r3, #4]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	440b      	add	r3, r1
 8001fe8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fec:	3301      	adds	r3, #1
 8001fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ff6:	e00f      	b.n	8002018 <HAL_I2C_Init+0x1dc>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	1e58      	subs	r0, r3, #1
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6859      	ldr	r1, [r3, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	0099      	lsls	r1, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	fbb0 f3f3 	udiv	r3, r0, r3
 800200e:	3301      	adds	r3, #1
 8002010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002014:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	6809      	ldr	r1, [r1, #0]
 800201c:	4313      	orrs	r3, r2
 800201e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69da      	ldr	r2, [r3, #28]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002046:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6911      	ldr	r1, [r2, #16]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68d2      	ldr	r2, [r2, #12]
 8002052:	4311      	orrs	r1, r2
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	430b      	orrs	r3, r1
 800205a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695a      	ldr	r2, [r3, #20]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0201 	orr.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2220      	movs	r2, #32
 8002092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	000186a0 	.word	0x000186a0
 80020b4:	001e847f 	.word	0x001e847f
 80020b8:	003d08ff 	.word	0x003d08ff
 80020bc:	431bde83 	.word	0x431bde83
 80020c0:	10624dd3 	.word	0x10624dd3

080020c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e267      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d075      	beq.n	80021ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80020e2:	4b88      	ldr	r3, [pc, #544]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d00c      	beq.n	8002108 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ee:	4b85      	ldr	r3, [pc, #532]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d112      	bne.n	8002120 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020fa:	4b82      	ldr	r3, [pc, #520]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002102:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002106:	d10b      	bne.n	8002120 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	4b7e      	ldr	r3, [pc, #504]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d05b      	beq.n	80021cc <HAL_RCC_OscConfig+0x108>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d157      	bne.n	80021cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e242      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002128:	d106      	bne.n	8002138 <HAL_RCC_OscConfig+0x74>
 800212a:	4b76      	ldr	r3, [pc, #472]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a75      	ldr	r2, [pc, #468]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e01d      	b.n	8002174 <HAL_RCC_OscConfig+0xb0>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002140:	d10c      	bne.n	800215c <HAL_RCC_OscConfig+0x98>
 8002142:	4b70      	ldr	r3, [pc, #448]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a6f      	ldr	r2, [pc, #444]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002148:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b6d      	ldr	r3, [pc, #436]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a6c      	ldr	r2, [pc, #432]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e00b      	b.n	8002174 <HAL_RCC_OscConfig+0xb0>
 800215c:	4b69      	ldr	r3, [pc, #420]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a68      	ldr	r2, [pc, #416]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b66      	ldr	r3, [pc, #408]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a65      	ldr	r2, [pc, #404]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 800216e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d013      	beq.n	80021a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7fe ffd8 	bl	8001130 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002184:	f7fe ffd4 	bl	8001130 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	@ 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e207      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	4b5b      	ldr	r3, [pc, #364]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0xc0>
 80021a2:	e014      	b.n	80021ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7fe ffc4 	bl	8001130 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ac:	f7fe ffc0 	bl	8001130 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b64      	cmp	r3, #100	@ 0x64
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e1f3      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021be:	4b51      	ldr	r3, [pc, #324]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0xe8>
 80021ca:	e000      	b.n	80021ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d063      	beq.n	80022a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80021da:	4b4a      	ldr	r3, [pc, #296]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00b      	beq.n	80021fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021e6:	4b47      	ldr	r3, [pc, #284]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d11c      	bne.n	800222c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021f2:	4b44      	ldr	r3, [pc, #272]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d116      	bne.n	800222c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fe:	4b41      	ldr	r3, [pc, #260]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d005      	beq.n	8002216 <HAL_RCC_OscConfig+0x152>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d001      	beq.n	8002216 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e1c7      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002216:	4b3b      	ldr	r3, [pc, #236]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4937      	ldr	r1, [pc, #220]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222a:	e03a      	b.n	80022a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002234:	4b34      	ldr	r3, [pc, #208]	@ (8002308 <HAL_RCC_OscConfig+0x244>)
 8002236:	2201      	movs	r2, #1
 8002238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223a:	f7fe ff79 	bl	8001130 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002242:	f7fe ff75 	bl	8001130 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e1a8      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002254:	4b2b      	ldr	r3, [pc, #172]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002260:	4b28      	ldr	r3, [pc, #160]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4925      	ldr	r1, [pc, #148]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]
 8002274:	e015      	b.n	80022a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002276:	4b24      	ldr	r3, [pc, #144]	@ (8002308 <HAL_RCC_OscConfig+0x244>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7fe ff58 	bl	8001130 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002284:	f7fe ff54 	bl	8001130 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e187      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002296:	4b1b      	ldr	r3, [pc, #108]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d036      	beq.n	800231c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d016      	beq.n	80022e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b6:	4b15      	ldr	r3, [pc, #84]	@ (800230c <HAL_RCC_OscConfig+0x248>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022bc:	f7fe ff38 	bl	8001130 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c4:	f7fe ff34 	bl	8001130 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e167      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002304 <HAL_RCC_OscConfig+0x240>)
 80022d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x200>
 80022e2:	e01b      	b.n	800231c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022e4:	4b09      	ldr	r3, [pc, #36]	@ (800230c <HAL_RCC_OscConfig+0x248>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ea:	f7fe ff21 	bl	8001130 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f0:	e00e      	b.n	8002310 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f2:	f7fe ff1d 	bl	8001130 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d907      	bls.n	8002310 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e150      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
 8002304:	40023800 	.word	0x40023800
 8002308:	42470000 	.word	0x42470000
 800230c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002310:	4b88      	ldr	r3, [pc, #544]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 8002312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1ea      	bne.n	80022f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 8097 	beq.w	8002458 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800232a:	2300      	movs	r3, #0
 800232c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800232e:	4b81      	ldr	r3, [pc, #516]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10f      	bne.n	800235a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	4b7d      	ldr	r3, [pc, #500]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002342:	4a7c      	ldr	r2, [pc, #496]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 8002344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002348:	6413      	str	r3, [r2, #64]	@ 0x40
 800234a:	4b7a      	ldr	r3, [pc, #488]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002356:	2301      	movs	r3, #1
 8002358:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235a:	4b77      	ldr	r3, [pc, #476]	@ (8002538 <HAL_RCC_OscConfig+0x474>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002362:	2b00      	cmp	r3, #0
 8002364:	d118      	bne.n	8002398 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002366:	4b74      	ldr	r3, [pc, #464]	@ (8002538 <HAL_RCC_OscConfig+0x474>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a73      	ldr	r2, [pc, #460]	@ (8002538 <HAL_RCC_OscConfig+0x474>)
 800236c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002372:	f7fe fedd 	bl	8001130 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237a:	f7fe fed9 	bl	8001130 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e10c      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238c:	4b6a      	ldr	r3, [pc, #424]	@ (8002538 <HAL_RCC_OscConfig+0x474>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d106      	bne.n	80023ae <HAL_RCC_OscConfig+0x2ea>
 80023a0:	4b64      	ldr	r3, [pc, #400]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 80023a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a4:	4a63      	ldr	r2, [pc, #396]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ac:	e01c      	b.n	80023e8 <HAL_RCC_OscConfig+0x324>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b05      	cmp	r3, #5
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x30c>
 80023b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 80023b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ba:	4a5e      	ldr	r2, [pc, #376]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 80023bc:	f043 0304 	orr.w	r3, r3, #4
 80023c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80023c2:	4b5c      	ldr	r3, [pc, #368]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c6:	4a5b      	ldr	r2, [pc, #364]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0x324>
 80023d0:	4b58      	ldr	r3, [pc, #352]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 80023d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d4:	4a57      	ldr	r2, [pc, #348]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 80023d6:	f023 0301 	bic.w	r3, r3, #1
 80023da:	6713      	str	r3, [r2, #112]	@ 0x70
 80023dc:	4b55      	ldr	r3, [pc, #340]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 80023de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e0:	4a54      	ldr	r2, [pc, #336]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 80023e2:	f023 0304 	bic.w	r3, r3, #4
 80023e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d015      	beq.n	800241c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f0:	f7fe fe9e 	bl	8001130 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f6:	e00a      	b.n	800240e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f8:	f7fe fe9a 	bl	8001130 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e0cb      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240e:	4b49      	ldr	r3, [pc, #292]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0ee      	beq.n	80023f8 <HAL_RCC_OscConfig+0x334>
 800241a:	e014      	b.n	8002446 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241c:	f7fe fe88 	bl	8001130 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002422:	e00a      	b.n	800243a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002424:	f7fe fe84 	bl	8001130 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002432:	4293      	cmp	r3, r2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e0b5      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243a:	4b3e      	ldr	r3, [pc, #248]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 800243c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1ee      	bne.n	8002424 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002446:	7dfb      	ldrb	r3, [r7, #23]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d105      	bne.n	8002458 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244c:	4b39      	ldr	r3, [pc, #228]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 800244e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002450:	4a38      	ldr	r2, [pc, #224]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 8002452:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002456:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 80a1 	beq.w	80025a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002462:	4b34      	ldr	r3, [pc, #208]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b08      	cmp	r3, #8
 800246c:	d05c      	beq.n	8002528 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d141      	bne.n	80024fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002476:	4b31      	ldr	r3, [pc, #196]	@ (800253c <HAL_RCC_OscConfig+0x478>)
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7fe fe58 	bl	8001130 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002484:	f7fe fe54 	bl	8001130 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e087      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002496:	4b27      	ldr	r3, [pc, #156]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f0      	bne.n	8002484 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69da      	ldr	r2, [r3, #28]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b0:	019b      	lsls	r3, r3, #6
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b8:	085b      	lsrs	r3, r3, #1
 80024ba:	3b01      	subs	r3, #1
 80024bc:	041b      	lsls	r3, r3, #16
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c4:	061b      	lsls	r3, r3, #24
 80024c6:	491b      	ldr	r1, [pc, #108]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024cc:	4b1b      	ldr	r3, [pc, #108]	@ (800253c <HAL_RCC_OscConfig+0x478>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d2:	f7fe fe2d 	bl	8001130 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024da:	f7fe fe29 	bl	8001130 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e05c      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ec:	4b11      	ldr	r3, [pc, #68]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x416>
 80024f8:	e054      	b.n	80025a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fa:	4b10      	ldr	r3, [pc, #64]	@ (800253c <HAL_RCC_OscConfig+0x478>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7fe fe16 	bl	8001130 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002508:	f7fe fe12 	bl	8001130 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e045      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251a:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <HAL_RCC_OscConfig+0x470>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x444>
 8002526:	e03d      	b.n	80025a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d107      	bne.n	8002540 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e038      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
 8002534:	40023800 	.word	0x40023800
 8002538:	40007000 	.word	0x40007000
 800253c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002540:	4b1b      	ldr	r3, [pc, #108]	@ (80025b0 <HAL_RCC_OscConfig+0x4ec>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d028      	beq.n	80025a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d121      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002566:	429a      	cmp	r2, r3
 8002568:	d11a      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002570:	4013      	ands	r3, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002576:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002578:	4293      	cmp	r3, r2
 800257a:	d111      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002586:	085b      	lsrs	r3, r3, #1
 8002588:	3b01      	subs	r3, #1
 800258a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800258c:	429a      	cmp	r2, r3
 800258e:	d107      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800

080025b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0cc      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c8:	4b68      	ldr	r3, [pc, #416]	@ (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d90c      	bls.n	80025f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	4b65      	ldr	r3, [pc, #404]	@ (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025de:	4b63      	ldr	r3, [pc, #396]	@ (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d001      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0b8      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d020      	beq.n	800263e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002608:	4b59      	ldr	r3, [pc, #356]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	4a58      	ldr	r2, [pc, #352]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002612:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002620:	4b53      	ldr	r3, [pc, #332]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	4a52      	ldr	r2, [pc, #328]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800262a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800262c:	4b50      	ldr	r3, [pc, #320]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	494d      	ldr	r1, [pc, #308]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	4313      	orrs	r3, r2
 800263c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d044      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d107      	bne.n	8002662 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002652:	4b47      	ldr	r3, [pc, #284]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d119      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e07f      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d003      	beq.n	8002672 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800266e:	2b03      	cmp	r3, #3
 8002670:	d107      	bne.n	8002682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002672:	4b3f      	ldr	r3, [pc, #252]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d109      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e06f      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002682:	4b3b      	ldr	r3, [pc, #236]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e067      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002692:	4b37      	ldr	r3, [pc, #220]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f023 0203 	bic.w	r2, r3, #3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	4934      	ldr	r1, [pc, #208]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a4:	f7fe fd44 	bl	8001130 <HAL_GetTick>
 80026a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026aa:	e00a      	b.n	80026c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ac:	f7fe fd40 	bl	8001130 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e04f      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 020c 	and.w	r2, r3, #12
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d1eb      	bne.n	80026ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026d4:	4b25      	ldr	r3, [pc, #148]	@ (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d20c      	bcs.n	80026fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e2:	4b22      	ldr	r3, [pc, #136]	@ (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ea:	4b20      	ldr	r3, [pc, #128]	@ (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e032      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002708:	4b19      	ldr	r3, [pc, #100]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4916      	ldr	r1, [pc, #88]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002716:	4313      	orrs	r3, r2
 8002718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d009      	beq.n	800273a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002726:	4b12      	ldr	r3, [pc, #72]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	490e      	ldr	r1, [pc, #56]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	4313      	orrs	r3, r2
 8002738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800273a:	f000 f821 	bl	8002780 <HAL_RCC_GetSysClockFreq>
 800273e:	4602      	mov	r2, r0
 8002740:	4b0b      	ldr	r3, [pc, #44]	@ (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	490a      	ldr	r1, [pc, #40]	@ (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 800274c:	5ccb      	ldrb	r3, [r1, r3]
 800274e:	fa22 f303 	lsr.w	r3, r2, r3
 8002752:	4a09      	ldr	r2, [pc, #36]	@ (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002756:	4b09      	ldr	r3, [pc, #36]	@ (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7fe fb9e 	bl	8000e9c <HAL_InitTick>

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40023c00 	.word	0x40023c00
 8002770:	40023800 	.word	0x40023800
 8002774:	08006e28 	.word	0x08006e28
 8002778:	20000000 	.word	0x20000000
 800277c:	20000004 	.word	0x20000004

08002780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002784:	b090      	sub	sp, #64	@ 0x40
 8002786:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002798:	4b59      	ldr	r3, [pc, #356]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x180>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 030c 	and.w	r3, r3, #12
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d00d      	beq.n	80027c0 <HAL_RCC_GetSysClockFreq+0x40>
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	f200 80a1 	bhi.w	80028ec <HAL_RCC_GetSysClockFreq+0x16c>
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <HAL_RCC_GetSysClockFreq+0x34>
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d003      	beq.n	80027ba <HAL_RCC_GetSysClockFreq+0x3a>
 80027b2:	e09b      	b.n	80028ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027b4:	4b53      	ldr	r3, [pc, #332]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x184>)
 80027b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027b8:	e09b      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027ba:	4b53      	ldr	r3, [pc, #332]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x188>)
 80027bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027be:	e098      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027c0:	4b4f      	ldr	r3, [pc, #316]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x180>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027ca:	4b4d      	ldr	r3, [pc, #308]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x180>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d028      	beq.n	8002828 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x180>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	099b      	lsrs	r3, r3, #6
 80027dc:	2200      	movs	r2, #0
 80027de:	623b      	str	r3, [r7, #32]
 80027e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027e8:	2100      	movs	r1, #0
 80027ea:	4b47      	ldr	r3, [pc, #284]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x188>)
 80027ec:	fb03 f201 	mul.w	r2, r3, r1
 80027f0:	2300      	movs	r3, #0
 80027f2:	fb00 f303 	mul.w	r3, r0, r3
 80027f6:	4413      	add	r3, r2
 80027f8:	4a43      	ldr	r2, [pc, #268]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x188>)
 80027fa:	fba0 1202 	umull	r1, r2, r0, r2
 80027fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002800:	460a      	mov	r2, r1
 8002802:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002804:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002806:	4413      	add	r3, r2
 8002808:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800280a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800280c:	2200      	movs	r2, #0
 800280e:	61bb      	str	r3, [r7, #24]
 8002810:	61fa      	str	r2, [r7, #28]
 8002812:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002816:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800281a:	f7fd fd31 	bl	8000280 <__aeabi_uldivmod>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4613      	mov	r3, r2
 8002824:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002826:	e053      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002828:	4b35      	ldr	r3, [pc, #212]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x180>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	099b      	lsrs	r3, r3, #6
 800282e:	2200      	movs	r2, #0
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	617a      	str	r2, [r7, #20]
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800283a:	f04f 0b00 	mov.w	fp, #0
 800283e:	4652      	mov	r2, sl
 8002840:	465b      	mov	r3, fp
 8002842:	f04f 0000 	mov.w	r0, #0
 8002846:	f04f 0100 	mov.w	r1, #0
 800284a:	0159      	lsls	r1, r3, #5
 800284c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002850:	0150      	lsls	r0, r2, #5
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	ebb2 080a 	subs.w	r8, r2, sl
 800285a:	eb63 090b 	sbc.w	r9, r3, fp
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800286a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800286e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002872:	ebb2 0408 	subs.w	r4, r2, r8
 8002876:	eb63 0509 	sbc.w	r5, r3, r9
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	00eb      	lsls	r3, r5, #3
 8002884:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002888:	00e2      	lsls	r2, r4, #3
 800288a:	4614      	mov	r4, r2
 800288c:	461d      	mov	r5, r3
 800288e:	eb14 030a 	adds.w	r3, r4, sl
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	eb45 030b 	adc.w	r3, r5, fp
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028a6:	4629      	mov	r1, r5
 80028a8:	028b      	lsls	r3, r1, #10
 80028aa:	4621      	mov	r1, r4
 80028ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028b0:	4621      	mov	r1, r4
 80028b2:	028a      	lsls	r2, r1, #10
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ba:	2200      	movs	r2, #0
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	60fa      	str	r2, [r7, #12]
 80028c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028c4:	f7fd fcdc 	bl	8000280 <__aeabi_uldivmod>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4613      	mov	r3, r2
 80028ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80028d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x180>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	0c1b      	lsrs	r3, r3, #16
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	3301      	adds	r3, #1
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80028e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028ea:	e002      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028ec:	4b05      	ldr	r3, [pc, #20]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x184>)
 80028ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3740      	adds	r7, #64	@ 0x40
 80028f8:	46bd      	mov	sp, r7
 80028fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800
 8002904:	00f42400 	.word	0x00f42400
 8002908:	017d7840 	.word	0x017d7840

0800290c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002910:	4b03      	ldr	r3, [pc, #12]	@ (8002920 <HAL_RCC_GetHCLKFreq+0x14>)
 8002912:	681b      	ldr	r3, [r3, #0]
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	20000000 	.word	0x20000000

08002924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002928:	f7ff fff0 	bl	800290c <HAL_RCC_GetHCLKFreq>
 800292c:	4602      	mov	r2, r0
 800292e:	4b05      	ldr	r3, [pc, #20]	@ (8002944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	0a9b      	lsrs	r3, r3, #10
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	4903      	ldr	r1, [pc, #12]	@ (8002948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800293a:	5ccb      	ldrb	r3, [r1, r3]
 800293c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002940:	4618      	mov	r0, r3
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40023800 	.word	0x40023800
 8002948:	08006e38 	.word	0x08006e38

0800294c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002950:	f7ff ffdc 	bl	800290c <HAL_RCC_GetHCLKFreq>
 8002954:	4602      	mov	r2, r0
 8002956:	4b05      	ldr	r3, [pc, #20]	@ (800296c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	0b5b      	lsrs	r3, r3, #13
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	4903      	ldr	r1, [pc, #12]	@ (8002970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002962:	5ccb      	ldrb	r3, [r1, r3]
 8002964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002968:	4618      	mov	r0, r3
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40023800 	.word	0x40023800
 8002970:	08006e38 	.word	0x08006e38

08002974 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	220f      	movs	r2, #15
 8002982:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002984:	4b12      	ldr	r3, [pc, #72]	@ (80029d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 0203 	and.w	r2, r3, #3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002990:	4b0f      	ldr	r3, [pc, #60]	@ (80029d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800299c:	4b0c      	ldr	r3, [pc, #48]	@ (80029d0 <HAL_RCC_GetClockConfig+0x5c>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80029a8:	4b09      	ldr	r3, [pc, #36]	@ (80029d0 <HAL_RCC_GetClockConfig+0x5c>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	08db      	lsrs	r3, r3, #3
 80029ae:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029b6:	4b07      	ldr	r3, [pc, #28]	@ (80029d4 <HAL_RCC_GetClockConfig+0x60>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0207 	and.w	r2, r3, #7
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	601a      	str	r2, [r3, #0]
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40023c00 	.word	0x40023c00

080029d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e041      	b.n	8002a6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d106      	bne.n	8002a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f839 	bl	8002a76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3304      	adds	r3, #4
 8002a14:	4619      	mov	r1, r3
 8002a16:	4610      	mov	r0, r2
 8002a18:	f000 f9b2 	bl	8002d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
	...

08002a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d001      	beq.n	8002aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e044      	b.n	8002b2e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8002b3c <HAL_TIM_Base_Start_IT+0xb0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d018      	beq.n	8002af8 <HAL_TIM_Base_Start_IT+0x6c>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ace:	d013      	beq.n	8002af8 <HAL_TIM_Base_Start_IT+0x6c>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8002b40 <HAL_TIM_Base_Start_IT+0xb4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d00e      	beq.n	8002af8 <HAL_TIM_Base_Start_IT+0x6c>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a19      	ldr	r2, [pc, #100]	@ (8002b44 <HAL_TIM_Base_Start_IT+0xb8>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d009      	beq.n	8002af8 <HAL_TIM_Base_Start_IT+0x6c>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a17      	ldr	r2, [pc, #92]	@ (8002b48 <HAL_TIM_Base_Start_IT+0xbc>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d004      	beq.n	8002af8 <HAL_TIM_Base_Start_IT+0x6c>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a16      	ldr	r2, [pc, #88]	@ (8002b4c <HAL_TIM_Base_Start_IT+0xc0>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d111      	bne.n	8002b1c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b06      	cmp	r3, #6
 8002b08:	d010      	beq.n	8002b2c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0201 	orr.w	r2, r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b1a:	e007      	b.n	8002b2c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40010000 	.word	0x40010000
 8002b40:	40000400 	.word	0x40000400
 8002b44:	40000800 	.word	0x40000800
 8002b48:	40000c00 	.word	0x40000c00
 8002b4c:	40014000 	.word	0x40014000

08002b50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d020      	beq.n	8002bb4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d01b      	beq.n	8002bb4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0202 	mvn.w	r2, #2
 8002b84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f8d2 	bl	8002d44 <HAL_TIM_IC_CaptureCallback>
 8002ba0:	e005      	b.n	8002bae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f8c4 	bl	8002d30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f8d5 	bl	8002d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d020      	beq.n	8002c00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d01b      	beq.n	8002c00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f06f 0204 	mvn.w	r2, #4
 8002bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f8ac 	bl	8002d44 <HAL_TIM_IC_CaptureCallback>
 8002bec:	e005      	b.n	8002bfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f89e 	bl	8002d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f8af 	bl	8002d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d020      	beq.n	8002c4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d01b      	beq.n	8002c4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f06f 0208 	mvn.w	r2, #8
 8002c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2204      	movs	r2, #4
 8002c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f886 	bl	8002d44 <HAL_TIM_IC_CaptureCallback>
 8002c38:	e005      	b.n	8002c46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f878 	bl	8002d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f889 	bl	8002d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d020      	beq.n	8002c98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f003 0310 	and.w	r3, r3, #16
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d01b      	beq.n	8002c98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0210 	mvn.w	r2, #16
 8002c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f860 	bl	8002d44 <HAL_TIM_IC_CaptureCallback>
 8002c84:	e005      	b.n	8002c92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f852 	bl	8002d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f863 	bl	8002d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00c      	beq.n	8002cbc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d007      	beq.n	8002cbc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0201 	mvn.w	r2, #1
 8002cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7fd ffd8 	bl	8000c6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00c      	beq.n	8002ce0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d007      	beq.n	8002ce0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f8e6 	bl	8002eac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00c      	beq.n	8002d04 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d007      	beq.n	8002d04 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f834 	bl	8002d6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00c      	beq.n	8002d28 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d007      	beq.n	8002d28 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f06f 0220 	mvn.w	r2, #32
 8002d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f8b8 	bl	8002e98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d28:	bf00      	nop
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a3a      	ldr	r2, [pc, #232]	@ (8002e7c <TIM_Base_SetConfig+0xfc>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d00f      	beq.n	8002db8 <TIM_Base_SetConfig+0x38>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d9e:	d00b      	beq.n	8002db8 <TIM_Base_SetConfig+0x38>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a37      	ldr	r2, [pc, #220]	@ (8002e80 <TIM_Base_SetConfig+0x100>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d007      	beq.n	8002db8 <TIM_Base_SetConfig+0x38>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a36      	ldr	r2, [pc, #216]	@ (8002e84 <TIM_Base_SetConfig+0x104>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d003      	beq.n	8002db8 <TIM_Base_SetConfig+0x38>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a35      	ldr	r2, [pc, #212]	@ (8002e88 <TIM_Base_SetConfig+0x108>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d108      	bne.n	8002dca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a2b      	ldr	r2, [pc, #172]	@ (8002e7c <TIM_Base_SetConfig+0xfc>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d01b      	beq.n	8002e0a <TIM_Base_SetConfig+0x8a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dd8:	d017      	beq.n	8002e0a <TIM_Base_SetConfig+0x8a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a28      	ldr	r2, [pc, #160]	@ (8002e80 <TIM_Base_SetConfig+0x100>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d013      	beq.n	8002e0a <TIM_Base_SetConfig+0x8a>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a27      	ldr	r2, [pc, #156]	@ (8002e84 <TIM_Base_SetConfig+0x104>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00f      	beq.n	8002e0a <TIM_Base_SetConfig+0x8a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a26      	ldr	r2, [pc, #152]	@ (8002e88 <TIM_Base_SetConfig+0x108>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d00b      	beq.n	8002e0a <TIM_Base_SetConfig+0x8a>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a25      	ldr	r2, [pc, #148]	@ (8002e8c <TIM_Base_SetConfig+0x10c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d007      	beq.n	8002e0a <TIM_Base_SetConfig+0x8a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a24      	ldr	r2, [pc, #144]	@ (8002e90 <TIM_Base_SetConfig+0x110>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d003      	beq.n	8002e0a <TIM_Base_SetConfig+0x8a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a23      	ldr	r2, [pc, #140]	@ (8002e94 <TIM_Base_SetConfig+0x114>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d108      	bne.n	8002e1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a0e      	ldr	r2, [pc, #56]	@ (8002e7c <TIM_Base_SetConfig+0xfc>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d103      	bne.n	8002e50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d105      	bne.n	8002e6e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f023 0201 	bic.w	r2, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	611a      	str	r2, [r3, #16]
  }
}
 8002e6e:	bf00      	nop
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40010000 	.word	0x40010000
 8002e80:	40000400 	.word	0x40000400
 8002e84:	40000800 	.word	0x40000800
 8002e88:	40000c00 	.word	0x40000c00
 8002e8c:	40014000 	.word	0x40014000
 8002e90:	40014400 	.word	0x40014400
 8002e94:	40014800 	.word	0x40014800

08002e98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e042      	b.n	8002f58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fd ff90 	bl	8000e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2224      	movs	r2, #36	@ 0x24
 8002ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 fa09 	bl	800331c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	691a      	ldr	r2, [r3, #16]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695a      	ldr	r2, [r3, #20]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08a      	sub	sp, #40	@ 0x28
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b20      	cmp	r3, #32
 8002f7e:	d175      	bne.n	800306c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <HAL_UART_Transmit+0x2c>
 8002f86:	88fb      	ldrh	r3, [r7, #6]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e06e      	b.n	800306e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2221      	movs	r2, #33	@ 0x21
 8002f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f9e:	f7fe f8c7 	bl	8001130 <HAL_GetTick>
 8002fa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	88fa      	ldrh	r2, [r7, #6]
 8002fa8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	88fa      	ldrh	r2, [r7, #6]
 8002fae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fb8:	d108      	bne.n	8002fcc <HAL_UART_Transmit+0x6c>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d104      	bne.n	8002fcc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	e003      	b.n	8002fd4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fd4:	e02e      	b.n	8003034 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2180      	movs	r1, #128	@ 0x80
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 f8df 	bl	80031a4 <UART_WaitOnFlagUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e03a      	b.n	800306e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10b      	bne.n	8003016 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800300c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	3302      	adds	r3, #2
 8003012:	61bb      	str	r3, [r7, #24]
 8003014:	e007      	b.n	8003026 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	781a      	ldrb	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	3301      	adds	r3, #1
 8003024:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003038:	b29b      	uxth	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1cb      	bne.n	8002fd6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2200      	movs	r2, #0
 8003046:	2140      	movs	r1, #64	@ 0x40
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f8ab 	bl	80031a4 <UART_WaitOnFlagUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e006      	b.n	800306e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	e000      	b.n	800306e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800306c:	2302      	movs	r3, #2
  }
}
 800306e:	4618      	mov	r0, r3
 8003070:	3720      	adds	r7, #32
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b08a      	sub	sp, #40	@ 0x28
 800307a:	af02      	add	r7, sp, #8
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	603b      	str	r3, [r7, #0]
 8003082:	4613      	mov	r3, r2
 8003084:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b20      	cmp	r3, #32
 8003094:	f040 8081 	bne.w	800319a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d002      	beq.n	80030a4 <HAL_UART_Receive+0x2e>
 800309e:	88fb      	ldrh	r3, [r7, #6]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e079      	b.n	800319c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2222      	movs	r2, #34	@ 0x22
 80030b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030bc:	f7fe f838 	bl	8001130 <HAL_GetTick>
 80030c0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	88fa      	ldrh	r2, [r7, #6]
 80030c6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	88fa      	ldrh	r2, [r7, #6]
 80030cc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030d6:	d108      	bne.n	80030ea <HAL_UART_Receive+0x74>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d104      	bne.n	80030ea <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	61bb      	str	r3, [r7, #24]
 80030e8:	e003      	b.n	80030f2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80030f2:	e047      	b.n	8003184 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	2200      	movs	r2, #0
 80030fc:	2120      	movs	r1, #32
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 f850 	bl	80031a4 <UART_WaitOnFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d005      	beq.n	8003116 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e042      	b.n	800319c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10c      	bne.n	8003136 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	b29b      	uxth	r3, r3
 8003124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003128:	b29a      	uxth	r2, r3
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	3302      	adds	r3, #2
 8003132:	61bb      	str	r3, [r7, #24]
 8003134:	e01f      	b.n	8003176 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800313e:	d007      	beq.n	8003150 <HAL_UART_Receive+0xda>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10a      	bne.n	800315e <HAL_UART_Receive+0xe8>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d106      	bne.n	800315e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	b2da      	uxtb	r2, r3
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	701a      	strb	r2, [r3, #0]
 800315c:	e008      	b.n	8003170 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	b2db      	uxtb	r3, r3
 8003166:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800316a:	b2da      	uxtb	r2, r3
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	3301      	adds	r3, #1
 8003174:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1b2      	bne.n	80030f4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2220      	movs	r2, #32
 8003192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	e000      	b.n	800319c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800319a:	2302      	movs	r3, #2
  }
}
 800319c:	4618      	mov	r0, r3
 800319e:	3720      	adds	r7, #32
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	603b      	str	r3, [r7, #0]
 80031b0:	4613      	mov	r3, r2
 80031b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031b4:	e03b      	b.n	800322e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031bc:	d037      	beq.n	800322e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031be:	f7fd ffb7 	bl	8001130 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	6a3a      	ldr	r2, [r7, #32]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d302      	bcc.n	80031d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e03a      	b.n	800324e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d023      	beq.n	800322e <UART_WaitOnFlagUntilTimeout+0x8a>
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b80      	cmp	r3, #128	@ 0x80
 80031ea:	d020      	beq.n	800322e <UART_WaitOnFlagUntilTimeout+0x8a>
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2b40      	cmp	r3, #64	@ 0x40
 80031f0:	d01d      	beq.n	800322e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d116      	bne.n	800322e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 f81d 	bl	8003256 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2208      	movs	r2, #8
 8003220:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e00f      	b.n	800324e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4013      	ands	r3, r2
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	429a      	cmp	r2, r3
 800323c:	bf0c      	ite	eq
 800323e:	2301      	moveq	r3, #1
 8003240:	2300      	movne	r3, #0
 8003242:	b2db      	uxtb	r3, r3
 8003244:	461a      	mov	r2, r3
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	429a      	cmp	r2, r3
 800324a:	d0b4      	beq.n	80031b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003256:	b480      	push	{r7}
 8003258:	b095      	sub	sp, #84	@ 0x54
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	330c      	adds	r3, #12
 8003264:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003268:	e853 3f00 	ldrex	r3, [r3]
 800326c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800326e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003270:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003274:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	330c      	adds	r3, #12
 800327c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800327e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003280:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003282:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003284:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003286:	e841 2300 	strex	r3, r2, [r1]
 800328a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800328c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1e5      	bne.n	800325e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	3314      	adds	r3, #20
 8003298:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	e853 3f00 	ldrex	r3, [r3]
 80032a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	f023 0301 	bic.w	r3, r3, #1
 80032a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	3314      	adds	r3, #20
 80032b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032ba:	e841 2300 	strex	r3, r2, [r1]
 80032be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80032c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1e5      	bne.n	8003292 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d119      	bne.n	8003302 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	330c      	adds	r3, #12
 80032d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	e853 3f00 	ldrex	r3, [r3]
 80032dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	f023 0310 	bic.w	r3, r3, #16
 80032e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	330c      	adds	r3, #12
 80032ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032ee:	61ba      	str	r2, [r7, #24]
 80032f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f2:	6979      	ldr	r1, [r7, #20]
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	e841 2300 	strex	r3, r2, [r1]
 80032fa:	613b      	str	r3, [r7, #16]
   return(result);
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1e5      	bne.n	80032ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003310:	bf00      	nop
 8003312:	3754      	adds	r7, #84	@ 0x54
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800331c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003320:	b0c0      	sub	sp, #256	@ 0x100
 8003322:	af00      	add	r7, sp, #0
 8003324:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003338:	68d9      	ldr	r1, [r3, #12]
 800333a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	ea40 0301 	orr.w	r3, r0, r1
 8003344:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	431a      	orrs	r2, r3
 8003354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	431a      	orrs	r2, r3
 800335c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003374:	f021 010c 	bic.w	r1, r1, #12
 8003378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003382:	430b      	orrs	r3, r1
 8003384:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003396:	6999      	ldr	r1, [r3, #24]
 8003398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	ea40 0301 	orr.w	r3, r0, r1
 80033a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	4b8f      	ldr	r3, [pc, #572]	@ (80035e8 <UART_SetConfig+0x2cc>)
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d005      	beq.n	80033bc <UART_SetConfig+0xa0>
 80033b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	4b8d      	ldr	r3, [pc, #564]	@ (80035ec <UART_SetConfig+0x2d0>)
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d104      	bne.n	80033c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033bc:	f7ff fac6 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 80033c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80033c4:	e003      	b.n	80033ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033c6:	f7ff faad 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 80033ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033d8:	f040 810c 	bne.w	80035f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033e0:	2200      	movs	r2, #0
 80033e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80033e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80033ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80033ee:	4622      	mov	r2, r4
 80033f0:	462b      	mov	r3, r5
 80033f2:	1891      	adds	r1, r2, r2
 80033f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80033f6:	415b      	adcs	r3, r3
 80033f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80033fe:	4621      	mov	r1, r4
 8003400:	eb12 0801 	adds.w	r8, r2, r1
 8003404:	4629      	mov	r1, r5
 8003406:	eb43 0901 	adc.w	r9, r3, r1
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	f04f 0300 	mov.w	r3, #0
 8003412:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003416:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800341a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800341e:	4690      	mov	r8, r2
 8003420:	4699      	mov	r9, r3
 8003422:	4623      	mov	r3, r4
 8003424:	eb18 0303 	adds.w	r3, r8, r3
 8003428:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800342c:	462b      	mov	r3, r5
 800342e:	eb49 0303 	adc.w	r3, r9, r3
 8003432:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003442:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003446:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800344a:	460b      	mov	r3, r1
 800344c:	18db      	adds	r3, r3, r3
 800344e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003450:	4613      	mov	r3, r2
 8003452:	eb42 0303 	adc.w	r3, r2, r3
 8003456:	657b      	str	r3, [r7, #84]	@ 0x54
 8003458:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800345c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003460:	f7fc ff0e 	bl	8000280 <__aeabi_uldivmod>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4b61      	ldr	r3, [pc, #388]	@ (80035f0 <UART_SetConfig+0x2d4>)
 800346a:	fba3 2302 	umull	r2, r3, r3, r2
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	011c      	lsls	r4, r3, #4
 8003472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003476:	2200      	movs	r2, #0
 8003478:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800347c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003480:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003484:	4642      	mov	r2, r8
 8003486:	464b      	mov	r3, r9
 8003488:	1891      	adds	r1, r2, r2
 800348a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800348c:	415b      	adcs	r3, r3
 800348e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003490:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003494:	4641      	mov	r1, r8
 8003496:	eb12 0a01 	adds.w	sl, r2, r1
 800349a:	4649      	mov	r1, r9
 800349c:	eb43 0b01 	adc.w	fp, r3, r1
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034b4:	4692      	mov	sl, r2
 80034b6:	469b      	mov	fp, r3
 80034b8:	4643      	mov	r3, r8
 80034ba:	eb1a 0303 	adds.w	r3, sl, r3
 80034be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034c2:	464b      	mov	r3, r9
 80034c4:	eb4b 0303 	adc.w	r3, fp, r3
 80034c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80034cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80034dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80034e0:	460b      	mov	r3, r1
 80034e2:	18db      	adds	r3, r3, r3
 80034e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80034e6:	4613      	mov	r3, r2
 80034e8:	eb42 0303 	adc.w	r3, r2, r3
 80034ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80034ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80034f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80034f6:	f7fc fec3 	bl	8000280 <__aeabi_uldivmod>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4611      	mov	r1, r2
 8003500:	4b3b      	ldr	r3, [pc, #236]	@ (80035f0 <UART_SetConfig+0x2d4>)
 8003502:	fba3 2301 	umull	r2, r3, r3, r1
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	2264      	movs	r2, #100	@ 0x64
 800350a:	fb02 f303 	mul.w	r3, r2, r3
 800350e:	1acb      	subs	r3, r1, r3
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003516:	4b36      	ldr	r3, [pc, #216]	@ (80035f0 <UART_SetConfig+0x2d4>)
 8003518:	fba3 2302 	umull	r2, r3, r3, r2
 800351c:	095b      	lsrs	r3, r3, #5
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003524:	441c      	add	r4, r3
 8003526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800352a:	2200      	movs	r2, #0
 800352c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003530:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003534:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003538:	4642      	mov	r2, r8
 800353a:	464b      	mov	r3, r9
 800353c:	1891      	adds	r1, r2, r2
 800353e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003540:	415b      	adcs	r3, r3
 8003542:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003544:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003548:	4641      	mov	r1, r8
 800354a:	1851      	adds	r1, r2, r1
 800354c:	6339      	str	r1, [r7, #48]	@ 0x30
 800354e:	4649      	mov	r1, r9
 8003550:	414b      	adcs	r3, r1
 8003552:	637b      	str	r3, [r7, #52]	@ 0x34
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	f04f 0300 	mov.w	r3, #0
 800355c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003560:	4659      	mov	r1, fp
 8003562:	00cb      	lsls	r3, r1, #3
 8003564:	4651      	mov	r1, sl
 8003566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800356a:	4651      	mov	r1, sl
 800356c:	00ca      	lsls	r2, r1, #3
 800356e:	4610      	mov	r0, r2
 8003570:	4619      	mov	r1, r3
 8003572:	4603      	mov	r3, r0
 8003574:	4642      	mov	r2, r8
 8003576:	189b      	adds	r3, r3, r2
 8003578:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800357c:	464b      	mov	r3, r9
 800357e:	460a      	mov	r2, r1
 8003580:	eb42 0303 	adc.w	r3, r2, r3
 8003584:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003594:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003598:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800359c:	460b      	mov	r3, r1
 800359e:	18db      	adds	r3, r3, r3
 80035a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035a2:	4613      	mov	r3, r2
 80035a4:	eb42 0303 	adc.w	r3, r2, r3
 80035a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80035b2:	f7fc fe65 	bl	8000280 <__aeabi_uldivmod>
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	4b0d      	ldr	r3, [pc, #52]	@ (80035f0 <UART_SetConfig+0x2d4>)
 80035bc:	fba3 1302 	umull	r1, r3, r3, r2
 80035c0:	095b      	lsrs	r3, r3, #5
 80035c2:	2164      	movs	r1, #100	@ 0x64
 80035c4:	fb01 f303 	mul.w	r3, r1, r3
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	3332      	adds	r3, #50	@ 0x32
 80035ce:	4a08      	ldr	r2, [pc, #32]	@ (80035f0 <UART_SetConfig+0x2d4>)
 80035d0:	fba2 2303 	umull	r2, r3, r2, r3
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	f003 0207 	and.w	r2, r3, #7
 80035da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4422      	add	r2, r4
 80035e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035e4:	e106      	b.n	80037f4 <UART_SetConfig+0x4d8>
 80035e6:	bf00      	nop
 80035e8:	40011000 	.word	0x40011000
 80035ec:	40011400 	.word	0x40011400
 80035f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035f8:	2200      	movs	r2, #0
 80035fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80035fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003602:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003606:	4642      	mov	r2, r8
 8003608:	464b      	mov	r3, r9
 800360a:	1891      	adds	r1, r2, r2
 800360c:	6239      	str	r1, [r7, #32]
 800360e:	415b      	adcs	r3, r3
 8003610:	627b      	str	r3, [r7, #36]	@ 0x24
 8003612:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003616:	4641      	mov	r1, r8
 8003618:	1854      	adds	r4, r2, r1
 800361a:	4649      	mov	r1, r9
 800361c:	eb43 0501 	adc.w	r5, r3, r1
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	00eb      	lsls	r3, r5, #3
 800362a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800362e:	00e2      	lsls	r2, r4, #3
 8003630:	4614      	mov	r4, r2
 8003632:	461d      	mov	r5, r3
 8003634:	4643      	mov	r3, r8
 8003636:	18e3      	adds	r3, r4, r3
 8003638:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800363c:	464b      	mov	r3, r9
 800363e:	eb45 0303 	adc.w	r3, r5, r3
 8003642:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003652:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003662:	4629      	mov	r1, r5
 8003664:	008b      	lsls	r3, r1, #2
 8003666:	4621      	mov	r1, r4
 8003668:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800366c:	4621      	mov	r1, r4
 800366e:	008a      	lsls	r2, r1, #2
 8003670:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003674:	f7fc fe04 	bl	8000280 <__aeabi_uldivmod>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4b60      	ldr	r3, [pc, #384]	@ (8003800 <UART_SetConfig+0x4e4>)
 800367e:	fba3 2302 	umull	r2, r3, r3, r2
 8003682:	095b      	lsrs	r3, r3, #5
 8003684:	011c      	lsls	r4, r3, #4
 8003686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800368a:	2200      	movs	r2, #0
 800368c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003690:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003694:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003698:	4642      	mov	r2, r8
 800369a:	464b      	mov	r3, r9
 800369c:	1891      	adds	r1, r2, r2
 800369e:	61b9      	str	r1, [r7, #24]
 80036a0:	415b      	adcs	r3, r3
 80036a2:	61fb      	str	r3, [r7, #28]
 80036a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036a8:	4641      	mov	r1, r8
 80036aa:	1851      	adds	r1, r2, r1
 80036ac:	6139      	str	r1, [r7, #16]
 80036ae:	4649      	mov	r1, r9
 80036b0:	414b      	adcs	r3, r1
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036c0:	4659      	mov	r1, fp
 80036c2:	00cb      	lsls	r3, r1, #3
 80036c4:	4651      	mov	r1, sl
 80036c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036ca:	4651      	mov	r1, sl
 80036cc:	00ca      	lsls	r2, r1, #3
 80036ce:	4610      	mov	r0, r2
 80036d0:	4619      	mov	r1, r3
 80036d2:	4603      	mov	r3, r0
 80036d4:	4642      	mov	r2, r8
 80036d6:	189b      	adds	r3, r3, r2
 80036d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036dc:	464b      	mov	r3, r9
 80036de:	460a      	mov	r2, r1
 80036e0:	eb42 0303 	adc.w	r3, r2, r3
 80036e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	f04f 0300 	mov.w	r3, #0
 80036fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003700:	4649      	mov	r1, r9
 8003702:	008b      	lsls	r3, r1, #2
 8003704:	4641      	mov	r1, r8
 8003706:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800370a:	4641      	mov	r1, r8
 800370c:	008a      	lsls	r2, r1, #2
 800370e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003712:	f7fc fdb5 	bl	8000280 <__aeabi_uldivmod>
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	4611      	mov	r1, r2
 800371c:	4b38      	ldr	r3, [pc, #224]	@ (8003800 <UART_SetConfig+0x4e4>)
 800371e:	fba3 2301 	umull	r2, r3, r3, r1
 8003722:	095b      	lsrs	r3, r3, #5
 8003724:	2264      	movs	r2, #100	@ 0x64
 8003726:	fb02 f303 	mul.w	r3, r2, r3
 800372a:	1acb      	subs	r3, r1, r3
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	3332      	adds	r3, #50	@ 0x32
 8003730:	4a33      	ldr	r2, [pc, #204]	@ (8003800 <UART_SetConfig+0x4e4>)
 8003732:	fba2 2303 	umull	r2, r3, r2, r3
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800373c:	441c      	add	r4, r3
 800373e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003742:	2200      	movs	r2, #0
 8003744:	673b      	str	r3, [r7, #112]	@ 0x70
 8003746:	677a      	str	r2, [r7, #116]	@ 0x74
 8003748:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800374c:	4642      	mov	r2, r8
 800374e:	464b      	mov	r3, r9
 8003750:	1891      	adds	r1, r2, r2
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	415b      	adcs	r3, r3
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800375c:	4641      	mov	r1, r8
 800375e:	1851      	adds	r1, r2, r1
 8003760:	6039      	str	r1, [r7, #0]
 8003762:	4649      	mov	r1, r9
 8003764:	414b      	adcs	r3, r1
 8003766:	607b      	str	r3, [r7, #4]
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003774:	4659      	mov	r1, fp
 8003776:	00cb      	lsls	r3, r1, #3
 8003778:	4651      	mov	r1, sl
 800377a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800377e:	4651      	mov	r1, sl
 8003780:	00ca      	lsls	r2, r1, #3
 8003782:	4610      	mov	r0, r2
 8003784:	4619      	mov	r1, r3
 8003786:	4603      	mov	r3, r0
 8003788:	4642      	mov	r2, r8
 800378a:	189b      	adds	r3, r3, r2
 800378c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800378e:	464b      	mov	r3, r9
 8003790:	460a      	mov	r2, r1
 8003792:	eb42 0303 	adc.w	r3, r2, r3
 8003796:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80037a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80037b0:	4649      	mov	r1, r9
 80037b2:	008b      	lsls	r3, r1, #2
 80037b4:	4641      	mov	r1, r8
 80037b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037ba:	4641      	mov	r1, r8
 80037bc:	008a      	lsls	r2, r1, #2
 80037be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80037c2:	f7fc fd5d 	bl	8000280 <__aeabi_uldivmod>
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003800 <UART_SetConfig+0x4e4>)
 80037cc:	fba3 1302 	umull	r1, r3, r3, r2
 80037d0:	095b      	lsrs	r3, r3, #5
 80037d2:	2164      	movs	r1, #100	@ 0x64
 80037d4:	fb01 f303 	mul.w	r3, r1, r3
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	3332      	adds	r3, #50	@ 0x32
 80037de:	4a08      	ldr	r2, [pc, #32]	@ (8003800 <UART_SetConfig+0x4e4>)
 80037e0:	fba2 2303 	umull	r2, r3, r2, r3
 80037e4:	095b      	lsrs	r3, r3, #5
 80037e6:	f003 020f 	and.w	r2, r3, #15
 80037ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4422      	add	r2, r4
 80037f2:	609a      	str	r2, [r3, #8]
}
 80037f4:	bf00      	nop
 80037f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80037fa:	46bd      	mov	sp, r7
 80037fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003800:	51eb851f 	.word	0x51eb851f

08003804 <__NVIC_SetPriority>:
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	6039      	str	r1, [r7, #0]
 800380e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003814:	2b00      	cmp	r3, #0
 8003816:	db0a      	blt.n	800382e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	b2da      	uxtb	r2, r3
 800381c:	490c      	ldr	r1, [pc, #48]	@ (8003850 <__NVIC_SetPriority+0x4c>)
 800381e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003822:	0112      	lsls	r2, r2, #4
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	440b      	add	r3, r1
 8003828:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800382c:	e00a      	b.n	8003844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	b2da      	uxtb	r2, r3
 8003832:	4908      	ldr	r1, [pc, #32]	@ (8003854 <__NVIC_SetPriority+0x50>)
 8003834:	79fb      	ldrb	r3, [r7, #7]
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	3b04      	subs	r3, #4
 800383c:	0112      	lsls	r2, r2, #4
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	440b      	add	r3, r1
 8003842:	761a      	strb	r2, [r3, #24]
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	e000e100 	.word	0xe000e100
 8003854:	e000ed00 	.word	0xe000ed00

08003858 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800385c:	4b05      	ldr	r3, [pc, #20]	@ (8003874 <SysTick_Handler+0x1c>)
 800385e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003860:	f001 fd18 	bl	8005294 <xTaskGetSchedulerState>
 8003864:	4603      	mov	r3, r0
 8003866:	2b01      	cmp	r3, #1
 8003868:	d001      	beq.n	800386e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800386a:	f002 fb0d 	bl	8005e88 <xPortSysTickHandler>
  }
}
 800386e:	bf00      	nop
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	e000e010 	.word	0xe000e010

08003878 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800387c:	2100      	movs	r1, #0
 800387e:	f06f 0004 	mvn.w	r0, #4
 8003882:	f7ff ffbf 	bl	8003804 <__NVIC_SetPriority>
#endif
}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003892:	f3ef 8305 	mrs	r3, IPSR
 8003896:	603b      	str	r3, [r7, #0]
  return(result);
 8003898:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800389e:	f06f 0305 	mvn.w	r3, #5
 80038a2:	607b      	str	r3, [r7, #4]
 80038a4:	e00c      	b.n	80038c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80038a6:	4b0a      	ldr	r3, [pc, #40]	@ (80038d0 <osKernelInitialize+0x44>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d105      	bne.n	80038ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80038ae:	4b08      	ldr	r3, [pc, #32]	@ (80038d0 <osKernelInitialize+0x44>)
 80038b0:	2201      	movs	r2, #1
 80038b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	607b      	str	r3, [r7, #4]
 80038b8:	e002      	b.n	80038c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80038ba:	f04f 33ff 	mov.w	r3, #4294967295
 80038be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80038c0:	687b      	ldr	r3, [r7, #4]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	200001d0 	.word	0x200001d0

080038d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038da:	f3ef 8305 	mrs	r3, IPSR
 80038de:	603b      	str	r3, [r7, #0]
  return(result);
 80038e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80038e6:	f06f 0305 	mvn.w	r3, #5
 80038ea:	607b      	str	r3, [r7, #4]
 80038ec:	e010      	b.n	8003910 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80038ee:	4b0b      	ldr	r3, [pc, #44]	@ (800391c <osKernelStart+0x48>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d109      	bne.n	800390a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80038f6:	f7ff ffbf 	bl	8003878 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80038fa:	4b08      	ldr	r3, [pc, #32]	@ (800391c <osKernelStart+0x48>)
 80038fc:	2202      	movs	r2, #2
 80038fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003900:	f001 f87a 	bl	80049f8 <vTaskStartScheduler>
      stat = osOK;
 8003904:	2300      	movs	r3, #0
 8003906:	607b      	str	r3, [r7, #4]
 8003908:	e002      	b.n	8003910 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800390a:	f04f 33ff 	mov.w	r3, #4294967295
 800390e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003910:	687b      	ldr	r3, [r7, #4]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	200001d0 	.word	0x200001d0

08003920 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003920:	b580      	push	{r7, lr}
 8003922:	b08e      	sub	sp, #56	@ 0x38
 8003924:	af04      	add	r7, sp, #16
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800392c:	2300      	movs	r3, #0
 800392e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003930:	f3ef 8305 	mrs	r3, IPSR
 8003934:	617b      	str	r3, [r7, #20]
  return(result);
 8003936:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003938:	2b00      	cmp	r3, #0
 800393a:	d17e      	bne.n	8003a3a <osThreadNew+0x11a>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d07b      	beq.n	8003a3a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003942:	2380      	movs	r3, #128	@ 0x80
 8003944:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003946:	2318      	movs	r3, #24
 8003948:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800394a:	2300      	movs	r3, #0
 800394c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800394e:	f04f 33ff 	mov.w	r3, #4294967295
 8003952:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d045      	beq.n	80039e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <osThreadNew+0x48>
        name = attr->name;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d008      	beq.n	800398e <osThreadNew+0x6e>
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	2b38      	cmp	r3, #56	@ 0x38
 8003980:	d805      	bhi.n	800398e <osThreadNew+0x6e>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <osThreadNew+0x72>
        return (NULL);
 800398e:	2300      	movs	r3, #0
 8003990:	e054      	b.n	8003a3c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	089b      	lsrs	r3, r3, #2
 80039a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00e      	beq.n	80039c8 <osThreadNew+0xa8>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	2b5b      	cmp	r3, #91	@ 0x5b
 80039b0:	d90a      	bls.n	80039c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d006      	beq.n	80039c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <osThreadNew+0xa8>
        mem = 1;
 80039c2:	2301      	movs	r3, #1
 80039c4:	61bb      	str	r3, [r7, #24]
 80039c6:	e010      	b.n	80039ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10c      	bne.n	80039ea <osThreadNew+0xca>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d108      	bne.n	80039ea <osThreadNew+0xca>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d104      	bne.n	80039ea <osThreadNew+0xca>
          mem = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	61bb      	str	r3, [r7, #24]
 80039e4:	e001      	b.n	80039ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80039e6:	2300      	movs	r3, #0
 80039e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d110      	bne.n	8003a12 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80039f8:	9202      	str	r2, [sp, #8]
 80039fa:	9301      	str	r3, [sp, #4]
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	6a3a      	ldr	r2, [r7, #32]
 8003a04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 fe1a 	bl	8004640 <xTaskCreateStatic>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	613b      	str	r3, [r7, #16]
 8003a10:	e013      	b.n	8003a3a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d110      	bne.n	8003a3a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	f107 0310 	add.w	r3, r7, #16
 8003a20:	9301      	str	r3, [sp, #4]
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 fe68 	bl	8004700 <xTaskCreate>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d001      	beq.n	8003a3a <osThreadNew+0x11a>
            hTask = NULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003a3a:	693b      	ldr	r3, [r7, #16]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3728      	adds	r7, #40	@ 0x28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a4c:	f3ef 8305 	mrs	r3, IPSR
 8003a50:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a52:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <osDelay+0x1c>
    stat = osErrorISR;
 8003a58:	f06f 0305 	mvn.w	r3, #5
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	e007      	b.n	8003a70 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 ff8e 	bl	800498c <vTaskDelay>
    }
  }

  return (stat);
 8003a70:	68fb      	ldr	r3, [r7, #12]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4a07      	ldr	r2, [pc, #28]	@ (8003aa8 <vApplicationGetIdleTaskMemory+0x2c>)
 8003a8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	4a06      	ldr	r2, [pc, #24]	@ (8003aac <vApplicationGetIdleTaskMemory+0x30>)
 8003a92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2280      	movs	r2, #128	@ 0x80
 8003a98:	601a      	str	r2, [r3, #0]
}
 8003a9a:	bf00      	nop
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	200001d4 	.word	0x200001d4
 8003aac:	20000230 	.word	0x20000230

08003ab0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4a07      	ldr	r2, [pc, #28]	@ (8003adc <vApplicationGetTimerTaskMemory+0x2c>)
 8003ac0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	4a06      	ldr	r2, [pc, #24]	@ (8003ae0 <vApplicationGetTimerTaskMemory+0x30>)
 8003ac6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ace:	601a      	str	r2, [r3, #0]
}
 8003ad0:	bf00      	nop
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	20000430 	.word	0x20000430
 8003ae0:	2000048c 	.word	0x2000048c

08003ae4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f103 0208 	add.w	r2, r3, #8
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f04f 32ff 	mov.w	r2, #4294967295
 8003afc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f103 0208 	add.w	r2, r3, #8
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f103 0208 	add.w	r2, r3, #8
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b085      	sub	sp, #20
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
 8003b46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	601a      	str	r2, [r3, #0]
}
 8003b7a:	bf00      	nop
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b86:	b480      	push	{r7}
 8003b88:	b085      	sub	sp, #20
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9c:	d103      	bne.n	8003ba6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	e00c      	b.n	8003bc0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3308      	adds	r3, #8
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	e002      	b.n	8003bb4 <vListInsert+0x2e>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d2f6      	bcs.n	8003bae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	601a      	str	r2, [r3, #0]
}
 8003bec:	bf00      	nop
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6892      	ldr	r2, [r2, #8]
 8003c0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6852      	ldr	r2, [r2, #4]
 8003c18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d103      	bne.n	8003c2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	1e5a      	subs	r2, r3, #1
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10b      	bne.n	8003c78 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c72:	bf00      	nop
 8003c74:	bf00      	nop
 8003c76:	e7fd      	b.n	8003c74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c78:	f002 f876 	bl	8005d68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c84:	68f9      	ldr	r1, [r7, #12]
 8003c86:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003c88:	fb01 f303 	mul.w	r3, r1, r3
 8003c8c:	441a      	add	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	68f9      	ldr	r1, [r7, #12]
 8003cac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003cae:	fb01 f303 	mul.w	r3, r1, r3
 8003cb2:	441a      	add	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	22ff      	movs	r2, #255	@ 0xff
 8003cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	22ff      	movs	r2, #255	@ 0xff
 8003cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d114      	bne.n	8003cf8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d01a      	beq.n	8003d0c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	3310      	adds	r3, #16
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f001 f91a 	bl	8004f14 <xTaskRemoveFromEventList>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d012      	beq.n	8003d0c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d1c <xQueueGenericReset+0xd0>)
 8003ce8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	e009      	b.n	8003d0c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	3310      	adds	r3, #16
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff fef1 	bl	8003ae4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	3324      	adds	r3, #36	@ 0x24
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff feec 	bl	8003ae4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d0c:	f002 f85e 	bl	8005dcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d10:	2301      	movs	r3, #1
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	e000ed04 	.word	0xe000ed04

08003d20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08e      	sub	sp, #56	@ 0x38
 8003d24:	af02      	add	r7, sp, #8
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10b      	bne.n	8003d4c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d38:	f383 8811 	msr	BASEPRI, r3
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f3bf 8f4f 	dsb	sy
 8003d44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003d46:	bf00      	nop
 8003d48:	bf00      	nop
 8003d4a:	e7fd      	b.n	8003d48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10b      	bne.n	8003d6a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop
 8003d68:	e7fd      	b.n	8003d66 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <xQueueGenericCreateStatic+0x56>
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <xQueueGenericCreateStatic+0x5a>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <xQueueGenericCreateStatic+0x5c>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10b      	bne.n	8003d98 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	623b      	str	r3, [r7, #32]
}
 8003d92:	bf00      	nop
 8003d94:	bf00      	nop
 8003d96:	e7fd      	b.n	8003d94 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d102      	bne.n	8003da4 <xQueueGenericCreateStatic+0x84>
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <xQueueGenericCreateStatic+0x88>
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <xQueueGenericCreateStatic+0x8a>
 8003da8:	2300      	movs	r3, #0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10b      	bne.n	8003dc6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	61fb      	str	r3, [r7, #28]
}
 8003dc0:	bf00      	nop
 8003dc2:	bf00      	nop
 8003dc4:	e7fd      	b.n	8003dc2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003dc6:	2350      	movs	r3, #80	@ 0x50
 8003dc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2b50      	cmp	r3, #80	@ 0x50
 8003dce:	d00b      	beq.n	8003de8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	61bb      	str	r3, [r7, #24]
}
 8003de2:	bf00      	nop
 8003de4:	bf00      	nop
 8003de6:	e7fd      	b.n	8003de4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003de8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00d      	beq.n	8003e10 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003dfc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	4613      	mov	r3, r2
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	68b9      	ldr	r1, [r7, #8]
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 f805 	bl	8003e1a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3730      	adds	r7, #48	@ 0x30
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	607a      	str	r2, [r7, #4]
 8003e26:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d103      	bne.n	8003e36 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	e002      	b.n	8003e3c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e48:	2101      	movs	r1, #1
 8003e4a:	69b8      	ldr	r0, [r7, #24]
 8003e4c:	f7ff fefe 	bl	8003c4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	78fa      	ldrb	r2, [r7, #3]
 8003e54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e58:	bf00      	nop
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08e      	sub	sp, #56	@ 0x38
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10b      	bne.n	8003e94 <xQueueGenericSend+0x34>
	__asm volatile
 8003e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003e8e:	bf00      	nop
 8003e90:	bf00      	nop
 8003e92:	e7fd      	b.n	8003e90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d103      	bne.n	8003ea2 <xQueueGenericSend+0x42>
 8003e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <xQueueGenericSend+0x46>
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e000      	b.n	8003ea8 <xQueueGenericSend+0x48>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10b      	bne.n	8003ec4 <xQueueGenericSend+0x64>
	__asm volatile
 8003eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb0:	f383 8811 	msr	BASEPRI, r3
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ebe:	bf00      	nop
 8003ec0:	bf00      	nop
 8003ec2:	e7fd      	b.n	8003ec0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d103      	bne.n	8003ed2 <xQueueGenericSend+0x72>
 8003eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d101      	bne.n	8003ed6 <xQueueGenericSend+0x76>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <xQueueGenericSend+0x78>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10b      	bne.n	8003ef4 <xQueueGenericSend+0x94>
	__asm volatile
 8003edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee0:	f383 8811 	msr	BASEPRI, r3
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	623b      	str	r3, [r7, #32]
}
 8003eee:	bf00      	nop
 8003ef0:	bf00      	nop
 8003ef2:	e7fd      	b.n	8003ef0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ef4:	f001 f9ce 	bl	8005294 <xTaskGetSchedulerState>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d102      	bne.n	8003f04 <xQueueGenericSend+0xa4>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <xQueueGenericSend+0xa8>
 8003f04:	2301      	movs	r3, #1
 8003f06:	e000      	b.n	8003f0a <xQueueGenericSend+0xaa>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10b      	bne.n	8003f26 <xQueueGenericSend+0xc6>
	__asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	61fb      	str	r3, [r7, #28]
}
 8003f20:	bf00      	nop
 8003f22:	bf00      	nop
 8003f24:	e7fd      	b.n	8003f22 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f26:	f001 ff1f 	bl	8005d68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d302      	bcc.n	8003f3c <xQueueGenericSend+0xdc>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d129      	bne.n	8003f90 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	68b9      	ldr	r1, [r7, #8]
 8003f40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f42:	f000 fa0f 	bl	8004364 <prvCopyDataToQueue>
 8003f46:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d010      	beq.n	8003f72 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f52:	3324      	adds	r3, #36	@ 0x24
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 ffdd 	bl	8004f14 <xTaskRemoveFromEventList>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d013      	beq.n	8003f88 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f60:	4b3f      	ldr	r3, [pc, #252]	@ (8004060 <xQueueGenericSend+0x200>)
 8003f62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	e00a      	b.n	8003f88 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d007      	beq.n	8003f88 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003f78:	4b39      	ldr	r3, [pc, #228]	@ (8004060 <xQueueGenericSend+0x200>)
 8003f7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003f88:	f001 ff20 	bl	8005dcc <vPortExitCritical>
				return pdPASS;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e063      	b.n	8004058 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d103      	bne.n	8003f9e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f96:	f001 ff19 	bl	8005dcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	e05c      	b.n	8004058 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d106      	bne.n	8003fb2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fa4:	f107 0314 	add.w	r3, r7, #20
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f001 f817 	bl	8004fdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fb2:	f001 ff0b 	bl	8005dcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fb6:	f000 fd87 	bl	8004ac8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fba:	f001 fed5 	bl	8005d68 <vPortEnterCritical>
 8003fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003fc4:	b25b      	sxtb	r3, r3
 8003fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fca:	d103      	bne.n	8003fd4 <xQueueGenericSend+0x174>
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003fda:	b25b      	sxtb	r3, r3
 8003fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe0:	d103      	bne.n	8003fea <xQueueGenericSend+0x18a>
 8003fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fea:	f001 feef 	bl	8005dcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fee:	1d3a      	adds	r2, r7, #4
 8003ff0:	f107 0314 	add.w	r3, r7, #20
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f001 f806 	bl	8005008 <xTaskCheckForTimeOut>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d124      	bne.n	800404c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004002:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004004:	f000 faa6 	bl	8004554 <prvIsQueueFull>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d018      	beq.n	8004040 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800400e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004010:	3310      	adds	r3, #16
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	4611      	mov	r1, r2
 8004016:	4618      	mov	r0, r3
 8004018:	f000 ff2a 	bl	8004e70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800401c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800401e:	f000 fa31 	bl	8004484 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004022:	f000 fd5f 	bl	8004ae4 <xTaskResumeAll>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	f47f af7c 	bne.w	8003f26 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800402e:	4b0c      	ldr	r3, [pc, #48]	@ (8004060 <xQueueGenericSend+0x200>)
 8004030:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	f3bf 8f4f 	dsb	sy
 800403a:	f3bf 8f6f 	isb	sy
 800403e:	e772      	b.n	8003f26 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004040:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004042:	f000 fa1f 	bl	8004484 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004046:	f000 fd4d 	bl	8004ae4 <xTaskResumeAll>
 800404a:	e76c      	b.n	8003f26 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800404c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800404e:	f000 fa19 	bl	8004484 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004052:	f000 fd47 	bl	8004ae4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004056:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004058:	4618      	mov	r0, r3
 800405a:	3738      	adds	r7, #56	@ 0x38
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	e000ed04 	.word	0xe000ed04

08004064 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b090      	sub	sp, #64	@ 0x40
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10b      	bne.n	8004094 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800407c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004080:	f383 8811 	msr	BASEPRI, r3
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800408e:	bf00      	nop
 8004090:	bf00      	nop
 8004092:	e7fd      	b.n	8004090 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d103      	bne.n	80040a2 <xQueueGenericSendFromISR+0x3e>
 800409a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800409c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <xQueueGenericSendFromISR+0x42>
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <xQueueGenericSendFromISR+0x44>
 80040a6:	2300      	movs	r3, #0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10b      	bne.n	80040c4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80040ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80040be:	bf00      	nop
 80040c0:	bf00      	nop
 80040c2:	e7fd      	b.n	80040c0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d103      	bne.n	80040d2 <xQueueGenericSendFromISR+0x6e>
 80040ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d101      	bne.n	80040d6 <xQueueGenericSendFromISR+0x72>
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <xQueueGenericSendFromISR+0x74>
 80040d6:	2300      	movs	r3, #0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10b      	bne.n	80040f4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80040dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e0:	f383 8811 	msr	BASEPRI, r3
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	623b      	str	r3, [r7, #32]
}
 80040ee:	bf00      	nop
 80040f0:	bf00      	nop
 80040f2:	e7fd      	b.n	80040f0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040f4:	f001 ff18 	bl	8005f28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80040f8:	f3ef 8211 	mrs	r2, BASEPRI
 80040fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004100:	f383 8811 	msr	BASEPRI, r3
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	61fa      	str	r2, [r7, #28]
 800410e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004110:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004112:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004116:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800411a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800411c:	429a      	cmp	r2, r3
 800411e:	d302      	bcc.n	8004126 <xQueueGenericSendFromISR+0xc2>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d12f      	bne.n	8004186 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004128:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800412c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004134:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	68b9      	ldr	r1, [r7, #8]
 800413a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800413c:	f000 f912 	bl	8004364 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004140:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004148:	d112      	bne.n	8004170 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800414a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800414c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414e:	2b00      	cmp	r3, #0
 8004150:	d016      	beq.n	8004180 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004154:	3324      	adds	r3, #36	@ 0x24
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fedc 	bl	8004f14 <xTaskRemoveFromEventList>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00e      	beq.n	8004180 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00b      	beq.n	8004180 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	e007      	b.n	8004180 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004170:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004174:	3301      	adds	r3, #1
 8004176:	b2db      	uxtb	r3, r3
 8004178:	b25a      	sxtb	r2, r3
 800417a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800417c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004180:	2301      	movs	r3, #1
 8004182:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004184:	e001      	b.n	800418a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004186:	2300      	movs	r3, #0
 8004188:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800418a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800418c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004194:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004198:	4618      	mov	r0, r3
 800419a:	3740      	adds	r7, #64	@ 0x40
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08c      	sub	sp, #48	@ 0x30
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80041ac:	2300      	movs	r3, #0
 80041ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80041b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10b      	bne.n	80041d2 <xQueueReceive+0x32>
	__asm volatile
 80041ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041be:	f383 8811 	msr	BASEPRI, r3
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	623b      	str	r3, [r7, #32]
}
 80041cc:	bf00      	nop
 80041ce:	bf00      	nop
 80041d0:	e7fd      	b.n	80041ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d103      	bne.n	80041e0 <xQueueReceive+0x40>
 80041d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <xQueueReceive+0x44>
 80041e0:	2301      	movs	r3, #1
 80041e2:	e000      	b.n	80041e6 <xQueueReceive+0x46>
 80041e4:	2300      	movs	r3, #0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10b      	bne.n	8004202 <xQueueReceive+0x62>
	__asm volatile
 80041ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ee:	f383 8811 	msr	BASEPRI, r3
 80041f2:	f3bf 8f6f 	isb	sy
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	61fb      	str	r3, [r7, #28]
}
 80041fc:	bf00      	nop
 80041fe:	bf00      	nop
 8004200:	e7fd      	b.n	80041fe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004202:	f001 f847 	bl	8005294 <xTaskGetSchedulerState>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d102      	bne.n	8004212 <xQueueReceive+0x72>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <xQueueReceive+0x76>
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <xQueueReceive+0x78>
 8004216:	2300      	movs	r3, #0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10b      	bne.n	8004234 <xQueueReceive+0x94>
	__asm volatile
 800421c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004220:	f383 8811 	msr	BASEPRI, r3
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	61bb      	str	r3, [r7, #24]
}
 800422e:	bf00      	nop
 8004230:	bf00      	nop
 8004232:	e7fd      	b.n	8004230 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004234:	f001 fd98 	bl	8005d68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800423a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800423c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004240:	2b00      	cmp	r3, #0
 8004242:	d01f      	beq.n	8004284 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004248:	f000 f8f6 	bl	8004438 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800424c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424e:	1e5a      	subs	r2, r3, #1
 8004250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004252:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00f      	beq.n	800427c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800425c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800425e:	3310      	adds	r3, #16
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fe57 	bl	8004f14 <xTaskRemoveFromEventList>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d007      	beq.n	800427c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800426c:	4b3c      	ldr	r3, [pc, #240]	@ (8004360 <xQueueReceive+0x1c0>)
 800426e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800427c:	f001 fda6 	bl	8005dcc <vPortExitCritical>
				return pdPASS;
 8004280:	2301      	movs	r3, #1
 8004282:	e069      	b.n	8004358 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d103      	bne.n	8004292 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800428a:	f001 fd9f 	bl	8005dcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800428e:	2300      	movs	r3, #0
 8004290:	e062      	b.n	8004358 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004294:	2b00      	cmp	r3, #0
 8004296:	d106      	bne.n	80042a6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004298:	f107 0310 	add.w	r3, r7, #16
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fe9d 	bl	8004fdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042a2:	2301      	movs	r3, #1
 80042a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042a6:	f001 fd91 	bl	8005dcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042aa:	f000 fc0d 	bl	8004ac8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042ae:	f001 fd5b 	bl	8005d68 <vPortEnterCritical>
 80042b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042b8:	b25b      	sxtb	r3, r3
 80042ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042be:	d103      	bne.n	80042c8 <xQueueReceive+0x128>
 80042c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042ce:	b25b      	sxtb	r3, r3
 80042d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d4:	d103      	bne.n	80042de <xQueueReceive+0x13e>
 80042d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042de:	f001 fd75 	bl	8005dcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042e2:	1d3a      	adds	r2, r7, #4
 80042e4:	f107 0310 	add.w	r3, r7, #16
 80042e8:	4611      	mov	r1, r2
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 fe8c 	bl	8005008 <xTaskCheckForTimeOut>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d123      	bne.n	800433e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042f8:	f000 f916 	bl	8004528 <prvIsQueueEmpty>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d017      	beq.n	8004332 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004304:	3324      	adds	r3, #36	@ 0x24
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	4611      	mov	r1, r2
 800430a:	4618      	mov	r0, r3
 800430c:	f000 fdb0 	bl	8004e70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004310:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004312:	f000 f8b7 	bl	8004484 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004316:	f000 fbe5 	bl	8004ae4 <xTaskResumeAll>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d189      	bne.n	8004234 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004320:	4b0f      	ldr	r3, [pc, #60]	@ (8004360 <xQueueReceive+0x1c0>)
 8004322:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	e780      	b.n	8004234 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004332:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004334:	f000 f8a6 	bl	8004484 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004338:	f000 fbd4 	bl	8004ae4 <xTaskResumeAll>
 800433c:	e77a      	b.n	8004234 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800433e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004340:	f000 f8a0 	bl	8004484 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004344:	f000 fbce 	bl	8004ae4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004348:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800434a:	f000 f8ed 	bl	8004528 <prvIsQueueEmpty>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	f43f af6f 	beq.w	8004234 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004356:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004358:	4618      	mov	r0, r3
 800435a:	3730      	adds	r7, #48	@ 0x30
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	e000ed04 	.word	0xe000ed04

08004364 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004378:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10d      	bne.n	800439e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d14d      	bne.n	8004426 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	4618      	mov	r0, r3
 8004390:	f000 ff9e 	bl	80052d0 <xTaskPriorityDisinherit>
 8004394:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	609a      	str	r2, [r3, #8]
 800439c:	e043      	b.n	8004426 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d119      	bne.n	80043d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6858      	ldr	r0, [r3, #4]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ac:	461a      	mov	r2, r3
 80043ae:	68b9      	ldr	r1, [r7, #8]
 80043b0:	f002 f83e 	bl	8006430 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043bc:	441a      	add	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d32b      	bcc.n	8004426 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	605a      	str	r2, [r3, #4]
 80043d6:	e026      	b.n	8004426 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	68d8      	ldr	r0, [r3, #12]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e0:	461a      	mov	r2, r3
 80043e2:	68b9      	ldr	r1, [r7, #8]
 80043e4:	f002 f824 	bl	8006430 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f0:	425b      	negs	r3, r3
 80043f2:	441a      	add	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d207      	bcs.n	8004414 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440c:	425b      	negs	r3, r3
 800440e:	441a      	add	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b02      	cmp	r3, #2
 8004418:	d105      	bne.n	8004426 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	3b01      	subs	r3, #1
 8004424:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800442e:	697b      	ldr	r3, [r7, #20]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004446:	2b00      	cmp	r3, #0
 8004448:	d018      	beq.n	800447c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004452:	441a      	add	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68da      	ldr	r2, [r3, #12]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	429a      	cmp	r2, r3
 8004462:	d303      	bcc.n	800446c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68d9      	ldr	r1, [r3, #12]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004474:	461a      	mov	r2, r3
 8004476:	6838      	ldr	r0, [r7, #0]
 8004478:	f001 ffda 	bl	8006430 <memcpy>
	}
}
 800447c:	bf00      	nop
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800448c:	f001 fc6c 	bl	8005d68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004496:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004498:	e011      	b.n	80044be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d012      	beq.n	80044c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3324      	adds	r3, #36	@ 0x24
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fd34 	bl	8004f14 <xTaskRemoveFromEventList>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80044b2:	f000 fe0d 	bl	80050d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80044be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	dce9      	bgt.n	800449a <prvUnlockQueue+0x16>
 80044c6:	e000      	b.n	80044ca <prvUnlockQueue+0x46>
					break;
 80044c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	22ff      	movs	r2, #255	@ 0xff
 80044ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80044d2:	f001 fc7b 	bl	8005dcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80044d6:	f001 fc47 	bl	8005d68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044e2:	e011      	b.n	8004508 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d012      	beq.n	8004512 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3310      	adds	r3, #16
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 fd0f 	bl	8004f14 <xTaskRemoveFromEventList>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80044fc:	f000 fde8 	bl	80050d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004500:	7bbb      	ldrb	r3, [r7, #14]
 8004502:	3b01      	subs	r3, #1
 8004504:	b2db      	uxtb	r3, r3
 8004506:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004508:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800450c:	2b00      	cmp	r3, #0
 800450e:	dce9      	bgt.n	80044e4 <prvUnlockQueue+0x60>
 8004510:	e000      	b.n	8004514 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004512:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	22ff      	movs	r2, #255	@ 0xff
 8004518:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800451c:	f001 fc56 	bl	8005dcc <vPortExitCritical>
}
 8004520:	bf00      	nop
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004530:	f001 fc1a 	bl	8005d68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004538:	2b00      	cmp	r3, #0
 800453a:	d102      	bne.n	8004542 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800453c:	2301      	movs	r3, #1
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	e001      	b.n	8004546 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004546:	f001 fc41 	bl	8005dcc <vPortExitCritical>

	return xReturn;
 800454a:	68fb      	ldr	r3, [r7, #12]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800455c:	f001 fc04 	bl	8005d68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004568:	429a      	cmp	r2, r3
 800456a:	d102      	bne.n	8004572 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800456c:	2301      	movs	r3, #1
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	e001      	b.n	8004576 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004572:	2300      	movs	r3, #0
 8004574:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004576:	f001 fc29 	bl	8005dcc <vPortExitCritical>

	return xReturn;
 800457a:	68fb      	ldr	r3, [r7, #12]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800458e:	2300      	movs	r3, #0
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	e014      	b.n	80045be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004594:	4a0f      	ldr	r2, [pc, #60]	@ (80045d4 <vQueueAddToRegistry+0x50>)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10b      	bne.n	80045b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80045a0:	490c      	ldr	r1, [pc, #48]	@ (80045d4 <vQueueAddToRegistry+0x50>)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80045aa:	4a0a      	ldr	r2, [pc, #40]	@ (80045d4 <vQueueAddToRegistry+0x50>)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	4413      	add	r3, r2
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80045b6:	e006      	b.n	80045c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	3301      	adds	r3, #1
 80045bc:	60fb      	str	r3, [r7, #12]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b07      	cmp	r3, #7
 80045c2:	d9e7      	bls.n	8004594 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80045c4:	bf00      	nop
 80045c6:	bf00      	nop
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	2000088c 	.word	0x2000088c

080045d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80045e8:	f001 fbbe 	bl	8005d68 <vPortEnterCritical>
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80045f2:	b25b      	sxtb	r3, r3
 80045f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f8:	d103      	bne.n	8004602 <vQueueWaitForMessageRestricted+0x2a>
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004608:	b25b      	sxtb	r3, r3
 800460a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460e:	d103      	bne.n	8004618 <vQueueWaitForMessageRestricted+0x40>
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004618:	f001 fbd8 	bl	8005dcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004620:	2b00      	cmp	r3, #0
 8004622:	d106      	bne.n	8004632 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	3324      	adds	r3, #36	@ 0x24
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	68b9      	ldr	r1, [r7, #8]
 800462c:	4618      	mov	r0, r3
 800462e:	f000 fc45 	bl	8004ebc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004632:	6978      	ldr	r0, [r7, #20]
 8004634:	f7ff ff26 	bl	8004484 <prvUnlockQueue>
	}
 8004638:	bf00      	nop
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004640:	b580      	push	{r7, lr}
 8004642:	b08e      	sub	sp, #56	@ 0x38
 8004644:	af04      	add	r7, sp, #16
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800464e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10b      	bne.n	800466c <xTaskCreateStatic+0x2c>
	__asm volatile
 8004654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	623b      	str	r3, [r7, #32]
}
 8004666:	bf00      	nop
 8004668:	bf00      	nop
 800466a:	e7fd      	b.n	8004668 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800466c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10b      	bne.n	800468a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004676:	f383 8811 	msr	BASEPRI, r3
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	61fb      	str	r3, [r7, #28]
}
 8004684:	bf00      	nop
 8004686:	bf00      	nop
 8004688:	e7fd      	b.n	8004686 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800468a:	235c      	movs	r3, #92	@ 0x5c
 800468c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	2b5c      	cmp	r3, #92	@ 0x5c
 8004692:	d00b      	beq.n	80046ac <xTaskCreateStatic+0x6c>
	__asm volatile
 8004694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004698:	f383 8811 	msr	BASEPRI, r3
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	61bb      	str	r3, [r7, #24]
}
 80046a6:	bf00      	nop
 80046a8:	bf00      	nop
 80046aa:	e7fd      	b.n	80046a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80046ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80046ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d01e      	beq.n	80046f2 <xTaskCreateStatic+0xb2>
 80046b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d01b      	beq.n	80046f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80046be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80046c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80046cc:	2300      	movs	r3, #0
 80046ce:	9303      	str	r3, [sp, #12]
 80046d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d2:	9302      	str	r3, [sp, #8]
 80046d4:	f107 0314 	add.w	r3, r7, #20
 80046d8:	9301      	str	r3, [sp, #4]
 80046da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	68b9      	ldr	r1, [r7, #8]
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f000 f850 	bl	800478a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80046ec:	f000 f8de 	bl	80048ac <prvAddNewTaskToReadyList>
 80046f0:	e001      	b.n	80046f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80046f2:	2300      	movs	r3, #0
 80046f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80046f6:	697b      	ldr	r3, [r7, #20]
	}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3728      	adds	r7, #40	@ 0x28
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004700:	b580      	push	{r7, lr}
 8004702:	b08c      	sub	sp, #48	@ 0x30
 8004704:	af04      	add	r7, sp, #16
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	603b      	str	r3, [r7, #0]
 800470c:	4613      	mov	r3, r2
 800470e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004710:	88fb      	ldrh	r3, [r7, #6]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4618      	mov	r0, r3
 8004716:	f001 fc49 	bl	8005fac <pvPortMalloc>
 800471a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00e      	beq.n	8004740 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004722:	205c      	movs	r0, #92	@ 0x5c
 8004724:	f001 fc42 	bl	8005fac <pvPortMalloc>
 8004728:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	631a      	str	r2, [r3, #48]	@ 0x30
 8004736:	e005      	b.n	8004744 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004738:	6978      	ldr	r0, [r7, #20]
 800473a:	f001 fd05 	bl	8006148 <vPortFree>
 800473e:	e001      	b.n	8004744 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004740:	2300      	movs	r3, #0
 8004742:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d017      	beq.n	800477a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004752:	88fa      	ldrh	r2, [r7, #6]
 8004754:	2300      	movs	r3, #0
 8004756:	9303      	str	r3, [sp, #12]
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	9302      	str	r3, [sp, #8]
 800475c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800475e:	9301      	str	r3, [sp, #4]
 8004760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	68b9      	ldr	r1, [r7, #8]
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 f80e 	bl	800478a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800476e:	69f8      	ldr	r0, [r7, #28]
 8004770:	f000 f89c 	bl	80048ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004774:	2301      	movs	r3, #1
 8004776:	61bb      	str	r3, [r7, #24]
 8004778:	e002      	b.n	8004780 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800477a:	f04f 33ff 	mov.w	r3, #4294967295
 800477e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004780:	69bb      	ldr	r3, [r7, #24]
	}
 8004782:	4618      	mov	r0, r3
 8004784:	3720      	adds	r7, #32
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b088      	sub	sp, #32
 800478e:	af00      	add	r7, sp, #0
 8004790:	60f8      	str	r0, [r7, #12]
 8004792:	60b9      	str	r1, [r7, #8]
 8004794:	607a      	str	r2, [r7, #4]
 8004796:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	461a      	mov	r2, r3
 80047a2:	21a5      	movs	r1, #165	@ 0xa5
 80047a4:	f001 fe10 	bl	80063c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80047a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047b2:	3b01      	subs	r3, #1
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	f023 0307 	bic.w	r3, r3, #7
 80047c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00b      	beq.n	80047e4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80047cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d0:	f383 8811 	msr	BASEPRI, r3
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	617b      	str	r3, [r7, #20]
}
 80047de:	bf00      	nop
 80047e0:	bf00      	nop
 80047e2:	e7fd      	b.n	80047e0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d01f      	beq.n	800482a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047ea:	2300      	movs	r3, #0
 80047ec:	61fb      	str	r3, [r7, #28]
 80047ee:	e012      	b.n	8004816 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	4413      	add	r3, r2
 80047f6:	7819      	ldrb	r1, [r3, #0]
 80047f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	4413      	add	r3, r2
 80047fe:	3334      	adds	r3, #52	@ 0x34
 8004800:	460a      	mov	r2, r1
 8004802:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	4413      	add	r3, r2
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d006      	beq.n	800481e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	3301      	adds	r3, #1
 8004814:	61fb      	str	r3, [r7, #28]
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	2b0f      	cmp	r3, #15
 800481a:	d9e9      	bls.n	80047f0 <prvInitialiseNewTask+0x66>
 800481c:	e000      	b.n	8004820 <prvInitialiseNewTask+0x96>
			{
				break;
 800481e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004822:	2200      	movs	r2, #0
 8004824:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004828:	e003      	b.n	8004832 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800482a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004834:	2b37      	cmp	r3, #55	@ 0x37
 8004836:	d901      	bls.n	800483c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004838:	2337      	movs	r3, #55	@ 0x37
 800483a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800483c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004840:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004844:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004846:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484a:	2200      	movs	r2, #0
 800484c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800484e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004850:	3304      	adds	r3, #4
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff f966 	bl	8003b24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485a:	3318      	adds	r3, #24
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff f961 	bl	8003b24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004864:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004866:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800486a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800486e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004870:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004874:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004876:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487a:	2200      	movs	r2, #0
 800487c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800487e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	68f9      	ldr	r1, [r7, #12]
 800488a:	69b8      	ldr	r0, [r7, #24]
 800488c:	f001 f93e 	bl	8005b0c <pxPortInitialiseStack>
 8004890:	4602      	mov	r2, r0
 8004892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004894:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800489c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800489e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048a2:	bf00      	nop
 80048a4:	3720      	adds	r7, #32
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80048b4:	f001 fa58 	bl	8005d68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80048b8:	4b2d      	ldr	r3, [pc, #180]	@ (8004970 <prvAddNewTaskToReadyList+0xc4>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3301      	adds	r3, #1
 80048be:	4a2c      	ldr	r2, [pc, #176]	@ (8004970 <prvAddNewTaskToReadyList+0xc4>)
 80048c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80048c2:	4b2c      	ldr	r3, [pc, #176]	@ (8004974 <prvAddNewTaskToReadyList+0xc8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d109      	bne.n	80048de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80048ca:	4a2a      	ldr	r2, [pc, #168]	@ (8004974 <prvAddNewTaskToReadyList+0xc8>)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80048d0:	4b27      	ldr	r3, [pc, #156]	@ (8004970 <prvAddNewTaskToReadyList+0xc4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d110      	bne.n	80048fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80048d8:	f000 fc1e 	bl	8005118 <prvInitialiseTaskLists>
 80048dc:	e00d      	b.n	80048fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80048de:	4b26      	ldr	r3, [pc, #152]	@ (8004978 <prvAddNewTaskToReadyList+0xcc>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d109      	bne.n	80048fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048e6:	4b23      	ldr	r3, [pc, #140]	@ (8004974 <prvAddNewTaskToReadyList+0xc8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d802      	bhi.n	80048fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80048f4:	4a1f      	ldr	r2, [pc, #124]	@ (8004974 <prvAddNewTaskToReadyList+0xc8>)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80048fa:	4b20      	ldr	r3, [pc, #128]	@ (800497c <prvAddNewTaskToReadyList+0xd0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3301      	adds	r3, #1
 8004900:	4a1e      	ldr	r2, [pc, #120]	@ (800497c <prvAddNewTaskToReadyList+0xd0>)
 8004902:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004904:	4b1d      	ldr	r3, [pc, #116]	@ (800497c <prvAddNewTaskToReadyList+0xd0>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004910:	4b1b      	ldr	r3, [pc, #108]	@ (8004980 <prvAddNewTaskToReadyList+0xd4>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d903      	bls.n	8004920 <prvAddNewTaskToReadyList+0x74>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491c:	4a18      	ldr	r2, [pc, #96]	@ (8004980 <prvAddNewTaskToReadyList+0xd4>)
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4a15      	ldr	r2, [pc, #84]	@ (8004984 <prvAddNewTaskToReadyList+0xd8>)
 800492e:	441a      	add	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3304      	adds	r3, #4
 8004934:	4619      	mov	r1, r3
 8004936:	4610      	mov	r0, r2
 8004938:	f7ff f901 	bl	8003b3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800493c:	f001 fa46 	bl	8005dcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004940:	4b0d      	ldr	r3, [pc, #52]	@ (8004978 <prvAddNewTaskToReadyList+0xcc>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00e      	beq.n	8004966 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004948:	4b0a      	ldr	r3, [pc, #40]	@ (8004974 <prvAddNewTaskToReadyList+0xc8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004952:	429a      	cmp	r2, r3
 8004954:	d207      	bcs.n	8004966 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004956:	4b0c      	ldr	r3, [pc, #48]	@ (8004988 <prvAddNewTaskToReadyList+0xdc>)
 8004958:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004966:	bf00      	nop
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	20000da0 	.word	0x20000da0
 8004974:	200008cc 	.word	0x200008cc
 8004978:	20000dac 	.word	0x20000dac
 800497c:	20000dbc 	.word	0x20000dbc
 8004980:	20000da8 	.word	0x20000da8
 8004984:	200008d0 	.word	0x200008d0
 8004988:	e000ed04 	.word	0xe000ed04

0800498c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004994:	2300      	movs	r3, #0
 8004996:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d018      	beq.n	80049d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800499e:	4b14      	ldr	r3, [pc, #80]	@ (80049f0 <vTaskDelay+0x64>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00b      	beq.n	80049be <vTaskDelay+0x32>
	__asm volatile
 80049a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049aa:	f383 8811 	msr	BASEPRI, r3
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	60bb      	str	r3, [r7, #8]
}
 80049b8:	bf00      	nop
 80049ba:	bf00      	nop
 80049bc:	e7fd      	b.n	80049ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80049be:	f000 f883 	bl	8004ac8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80049c2:	2100      	movs	r1, #0
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 fcf3 	bl	80053b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80049ca:	f000 f88b 	bl	8004ae4 <xTaskResumeAll>
 80049ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d107      	bne.n	80049e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80049d6:	4b07      	ldr	r3, [pc, #28]	@ (80049f4 <vTaskDelay+0x68>)
 80049d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049e6:	bf00      	nop
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20000dc8 	.word	0x20000dc8
 80049f4:	e000ed04 	.word	0xe000ed04

080049f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08a      	sub	sp, #40	@ 0x28
 80049fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a06:	463a      	mov	r2, r7
 8004a08:	1d39      	adds	r1, r7, #4
 8004a0a:	f107 0308 	add.w	r3, r7, #8
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff f834 	bl	8003a7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a14:	6839      	ldr	r1, [r7, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	9202      	str	r2, [sp, #8]
 8004a1c:	9301      	str	r3, [sp, #4]
 8004a1e:	2300      	movs	r3, #0
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	2300      	movs	r3, #0
 8004a24:	460a      	mov	r2, r1
 8004a26:	4922      	ldr	r1, [pc, #136]	@ (8004ab0 <vTaskStartScheduler+0xb8>)
 8004a28:	4822      	ldr	r0, [pc, #136]	@ (8004ab4 <vTaskStartScheduler+0xbc>)
 8004a2a:	f7ff fe09 	bl	8004640 <xTaskCreateStatic>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	4a21      	ldr	r2, [pc, #132]	@ (8004ab8 <vTaskStartScheduler+0xc0>)
 8004a32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a34:	4b20      	ldr	r3, [pc, #128]	@ (8004ab8 <vTaskStartScheduler+0xc0>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	e001      	b.n	8004a46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d102      	bne.n	8004a52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004a4c:	f000 fd04 	bl	8005458 <xTimerCreateTimerTask>
 8004a50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d116      	bne.n	8004a86 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	613b      	str	r3, [r7, #16]
}
 8004a6a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a6c:	4b13      	ldr	r3, [pc, #76]	@ (8004abc <vTaskStartScheduler+0xc4>)
 8004a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a74:	4b12      	ldr	r3, [pc, #72]	@ (8004ac0 <vTaskStartScheduler+0xc8>)
 8004a76:	2201      	movs	r2, #1
 8004a78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a7a:	4b12      	ldr	r3, [pc, #72]	@ (8004ac4 <vTaskStartScheduler+0xcc>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a80:	f001 f8ce 	bl	8005c20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a84:	e00f      	b.n	8004aa6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8c:	d10b      	bne.n	8004aa6 <vTaskStartScheduler+0xae>
	__asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	60fb      	str	r3, [r7, #12]
}
 8004aa0:	bf00      	nop
 8004aa2:	bf00      	nop
 8004aa4:	e7fd      	b.n	8004aa2 <vTaskStartScheduler+0xaa>
}
 8004aa6:	bf00      	nop
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	08006d5c 	.word	0x08006d5c
 8004ab4:	080050e9 	.word	0x080050e9
 8004ab8:	20000dc4 	.word	0x20000dc4
 8004abc:	20000dc0 	.word	0x20000dc0
 8004ac0:	20000dac 	.word	0x20000dac
 8004ac4:	20000da4 	.word	0x20000da4

08004ac8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004acc:	4b04      	ldr	r3, [pc, #16]	@ (8004ae0 <vTaskSuspendAll+0x18>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	4a03      	ldr	r2, [pc, #12]	@ (8004ae0 <vTaskSuspendAll+0x18>)
 8004ad4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004ad6:	bf00      	nop
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	20000dc8 	.word	0x20000dc8

08004ae4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004aee:	2300      	movs	r3, #0
 8004af0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004af2:	4b42      	ldr	r3, [pc, #264]	@ (8004bfc <xTaskResumeAll+0x118>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10b      	bne.n	8004b12 <xTaskResumeAll+0x2e>
	__asm volatile
 8004afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	603b      	str	r3, [r7, #0]
}
 8004b0c:	bf00      	nop
 8004b0e:	bf00      	nop
 8004b10:	e7fd      	b.n	8004b0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b12:	f001 f929 	bl	8005d68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b16:	4b39      	ldr	r3, [pc, #228]	@ (8004bfc <xTaskResumeAll+0x118>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	4a37      	ldr	r2, [pc, #220]	@ (8004bfc <xTaskResumeAll+0x118>)
 8004b1e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b20:	4b36      	ldr	r3, [pc, #216]	@ (8004bfc <xTaskResumeAll+0x118>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d162      	bne.n	8004bee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b28:	4b35      	ldr	r3, [pc, #212]	@ (8004c00 <xTaskResumeAll+0x11c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d05e      	beq.n	8004bee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b30:	e02f      	b.n	8004b92 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b32:	4b34      	ldr	r3, [pc, #208]	@ (8004c04 <xTaskResumeAll+0x120>)
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3318      	adds	r3, #24
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff f85a 	bl	8003bf8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3304      	adds	r3, #4
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7ff f855 	bl	8003bf8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b52:	4b2d      	ldr	r3, [pc, #180]	@ (8004c08 <xTaskResumeAll+0x124>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d903      	bls.n	8004b62 <xTaskResumeAll+0x7e>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5e:	4a2a      	ldr	r2, [pc, #168]	@ (8004c08 <xTaskResumeAll+0x124>)
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4a27      	ldr	r2, [pc, #156]	@ (8004c0c <xTaskResumeAll+0x128>)
 8004b70:	441a      	add	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	3304      	adds	r3, #4
 8004b76:	4619      	mov	r1, r3
 8004b78:	4610      	mov	r0, r2
 8004b7a:	f7fe ffe0 	bl	8003b3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b82:	4b23      	ldr	r3, [pc, #140]	@ (8004c10 <xTaskResumeAll+0x12c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d302      	bcc.n	8004b92 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004b8c:	4b21      	ldr	r3, [pc, #132]	@ (8004c14 <xTaskResumeAll+0x130>)
 8004b8e:	2201      	movs	r2, #1
 8004b90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b92:	4b1c      	ldr	r3, [pc, #112]	@ (8004c04 <xTaskResumeAll+0x120>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1cb      	bne.n	8004b32 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ba0:	f000 fb58 	bl	8005254 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8004c18 <xTaskResumeAll+0x134>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d010      	beq.n	8004bd2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004bb0:	f000 f846 	bl	8004c40 <xTaskIncrementTick>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004bba:	4b16      	ldr	r3, [pc, #88]	@ (8004c14 <xTaskResumeAll+0x130>)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1f1      	bne.n	8004bb0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004bcc:	4b12      	ldr	r3, [pc, #72]	@ (8004c18 <xTaskResumeAll+0x134>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004bd2:	4b10      	ldr	r3, [pc, #64]	@ (8004c14 <xTaskResumeAll+0x130>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d009      	beq.n	8004bee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004bde:	4b0f      	ldr	r3, [pc, #60]	@ (8004c1c <xTaskResumeAll+0x138>)
 8004be0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bee:	f001 f8ed 	bl	8005dcc <vPortExitCritical>

	return xAlreadyYielded;
 8004bf2:	68bb      	ldr	r3, [r7, #8]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	20000dc8 	.word	0x20000dc8
 8004c00:	20000da0 	.word	0x20000da0
 8004c04:	20000d60 	.word	0x20000d60
 8004c08:	20000da8 	.word	0x20000da8
 8004c0c:	200008d0 	.word	0x200008d0
 8004c10:	200008cc 	.word	0x200008cc
 8004c14:	20000db4 	.word	0x20000db4
 8004c18:	20000db0 	.word	0x20000db0
 8004c1c:	e000ed04 	.word	0xe000ed04

08004c20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004c26:	4b05      	ldr	r3, [pc, #20]	@ (8004c3c <xTaskGetTickCount+0x1c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004c2c:	687b      	ldr	r3, [r7, #4]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	20000da4 	.word	0x20000da4

08004c40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c46:	2300      	movs	r3, #0
 8004c48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c4a:	4b4f      	ldr	r3, [pc, #316]	@ (8004d88 <xTaskIncrementTick+0x148>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f040 8090 	bne.w	8004d74 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c54:	4b4d      	ldr	r3, [pc, #308]	@ (8004d8c <xTaskIncrementTick+0x14c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c5c:	4a4b      	ldr	r2, [pc, #300]	@ (8004d8c <xTaskIncrementTick+0x14c>)
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d121      	bne.n	8004cac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c68:	4b49      	ldr	r3, [pc, #292]	@ (8004d90 <xTaskIncrementTick+0x150>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00b      	beq.n	8004c8a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	603b      	str	r3, [r7, #0]
}
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop
 8004c88:	e7fd      	b.n	8004c86 <xTaskIncrementTick+0x46>
 8004c8a:	4b41      	ldr	r3, [pc, #260]	@ (8004d90 <xTaskIncrementTick+0x150>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	4b40      	ldr	r3, [pc, #256]	@ (8004d94 <xTaskIncrementTick+0x154>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a3e      	ldr	r2, [pc, #248]	@ (8004d90 <xTaskIncrementTick+0x150>)
 8004c96:	6013      	str	r3, [r2, #0]
 8004c98:	4a3e      	ldr	r2, [pc, #248]	@ (8004d94 <xTaskIncrementTick+0x154>)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	4b3e      	ldr	r3, [pc, #248]	@ (8004d98 <xTaskIncrementTick+0x158>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	4a3c      	ldr	r2, [pc, #240]	@ (8004d98 <xTaskIncrementTick+0x158>)
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	f000 fad4 	bl	8005254 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004cac:	4b3b      	ldr	r3, [pc, #236]	@ (8004d9c <xTaskIncrementTick+0x15c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d349      	bcc.n	8004d4a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cb6:	4b36      	ldr	r3, [pc, #216]	@ (8004d90 <xTaskIncrementTick+0x150>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d104      	bne.n	8004cca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cc0:	4b36      	ldr	r3, [pc, #216]	@ (8004d9c <xTaskIncrementTick+0x15c>)
 8004cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc6:	601a      	str	r2, [r3, #0]
					break;
 8004cc8:	e03f      	b.n	8004d4a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cca:	4b31      	ldr	r3, [pc, #196]	@ (8004d90 <xTaskIncrementTick+0x150>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d203      	bcs.n	8004cea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ce2:	4a2e      	ldr	r2, [pc, #184]	@ (8004d9c <xTaskIncrementTick+0x15c>)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ce8:	e02f      	b.n	8004d4a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	3304      	adds	r3, #4
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fe ff82 	bl	8003bf8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d004      	beq.n	8004d06 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	3318      	adds	r3, #24
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fe ff79 	bl	8003bf8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d0a:	4b25      	ldr	r3, [pc, #148]	@ (8004da0 <xTaskIncrementTick+0x160>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d903      	bls.n	8004d1a <xTaskIncrementTick+0xda>
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d16:	4a22      	ldr	r2, [pc, #136]	@ (8004da0 <xTaskIncrementTick+0x160>)
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d1e:	4613      	mov	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4a1f      	ldr	r2, [pc, #124]	@ (8004da4 <xTaskIncrementTick+0x164>)
 8004d28:	441a      	add	r2, r3
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	3304      	adds	r3, #4
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4610      	mov	r0, r2
 8004d32:	f7fe ff04 	bl	8003b3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8004da8 <xTaskIncrementTick+0x168>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d3b8      	bcc.n	8004cb6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004d44:	2301      	movs	r3, #1
 8004d46:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d48:	e7b5      	b.n	8004cb6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d4a:	4b17      	ldr	r3, [pc, #92]	@ (8004da8 <xTaskIncrementTick+0x168>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d50:	4914      	ldr	r1, [pc, #80]	@ (8004da4 <xTaskIncrementTick+0x164>)
 8004d52:	4613      	mov	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	440b      	add	r3, r1
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d901      	bls.n	8004d66 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004d62:	2301      	movs	r3, #1
 8004d64:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004d66:	4b11      	ldr	r3, [pc, #68]	@ (8004dac <xTaskIncrementTick+0x16c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d007      	beq.n	8004d7e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	e004      	b.n	8004d7e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004d74:	4b0e      	ldr	r3, [pc, #56]	@ (8004db0 <xTaskIncrementTick+0x170>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	4a0d      	ldr	r2, [pc, #52]	@ (8004db0 <xTaskIncrementTick+0x170>)
 8004d7c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004d7e:	697b      	ldr	r3, [r7, #20]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	20000dc8 	.word	0x20000dc8
 8004d8c:	20000da4 	.word	0x20000da4
 8004d90:	20000d58 	.word	0x20000d58
 8004d94:	20000d5c 	.word	0x20000d5c
 8004d98:	20000db8 	.word	0x20000db8
 8004d9c:	20000dc0 	.word	0x20000dc0
 8004da0:	20000da8 	.word	0x20000da8
 8004da4:	200008d0 	.word	0x200008d0
 8004da8:	200008cc 	.word	0x200008cc
 8004dac:	20000db4 	.word	0x20000db4
 8004db0:	20000db0 	.word	0x20000db0

08004db4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004dba:	4b28      	ldr	r3, [pc, #160]	@ (8004e5c <vTaskSwitchContext+0xa8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004dc2:	4b27      	ldr	r3, [pc, #156]	@ (8004e60 <vTaskSwitchContext+0xac>)
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004dc8:	e042      	b.n	8004e50 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004dca:	4b25      	ldr	r3, [pc, #148]	@ (8004e60 <vTaskSwitchContext+0xac>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dd0:	4b24      	ldr	r3, [pc, #144]	@ (8004e64 <vTaskSwitchContext+0xb0>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	e011      	b.n	8004dfc <vTaskSwitchContext+0x48>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10b      	bne.n	8004df6 <vTaskSwitchContext+0x42>
	__asm volatile
 8004dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	607b      	str	r3, [r7, #4]
}
 8004df0:	bf00      	nop
 8004df2:	bf00      	nop
 8004df4:	e7fd      	b.n	8004df2 <vTaskSwitchContext+0x3e>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	491a      	ldr	r1, [pc, #104]	@ (8004e68 <vTaskSwitchContext+0xb4>)
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4613      	mov	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0e3      	beq.n	8004dd8 <vTaskSwitchContext+0x24>
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4613      	mov	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4a13      	ldr	r2, [pc, #76]	@ (8004e68 <vTaskSwitchContext+0xb4>)
 8004e1c:	4413      	add	r3, r2
 8004e1e:	60bb      	str	r3, [r7, #8]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	605a      	str	r2, [r3, #4]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	3308      	adds	r3, #8
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d104      	bne.n	8004e40 <vTaskSwitchContext+0x8c>
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	605a      	str	r2, [r3, #4]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	4a09      	ldr	r2, [pc, #36]	@ (8004e6c <vTaskSwitchContext+0xb8>)
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	4a06      	ldr	r2, [pc, #24]	@ (8004e64 <vTaskSwitchContext+0xb0>)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6013      	str	r3, [r2, #0]
}
 8004e50:	bf00      	nop
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	20000dc8 	.word	0x20000dc8
 8004e60:	20000db4 	.word	0x20000db4
 8004e64:	20000da8 	.word	0x20000da8
 8004e68:	200008d0 	.word	0x200008d0
 8004e6c:	200008cc 	.word	0x200008cc

08004e70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10b      	bne.n	8004e98 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	60fb      	str	r3, [r7, #12]
}
 8004e92:	bf00      	nop
 8004e94:	bf00      	nop
 8004e96:	e7fd      	b.n	8004e94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e98:	4b07      	ldr	r3, [pc, #28]	@ (8004eb8 <vTaskPlaceOnEventList+0x48>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3318      	adds	r3, #24
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7fe fe70 	bl	8003b86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	6838      	ldr	r0, [r7, #0]
 8004eaa:	f000 fa81 	bl	80053b0 <prvAddCurrentTaskToDelayedList>
}
 8004eae:	bf00      	nop
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	200008cc 	.word	0x200008cc

08004ebc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10b      	bne.n	8004ee6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	617b      	str	r3, [r7, #20]
}
 8004ee0:	bf00      	nop
 8004ee2:	bf00      	nop
 8004ee4:	e7fd      	b.n	8004ee2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8004f10 <vTaskPlaceOnEventListRestricted+0x54>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	3318      	adds	r3, #24
 8004eec:	4619      	mov	r1, r3
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f7fe fe25 	bl	8003b3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004efa:	f04f 33ff 	mov.w	r3, #4294967295
 8004efe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f00:	6879      	ldr	r1, [r7, #4]
 8004f02:	68b8      	ldr	r0, [r7, #8]
 8004f04:	f000 fa54 	bl	80053b0 <prvAddCurrentTaskToDelayedList>
	}
 8004f08:	bf00      	nop
 8004f0a:	3718      	adds	r7, #24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	200008cc 	.word	0x200008cc

08004f14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10b      	bne.n	8004f42 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	60fb      	str	r3, [r7, #12]
}
 8004f3c:	bf00      	nop
 8004f3e:	bf00      	nop
 8004f40:	e7fd      	b.n	8004f3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	3318      	adds	r3, #24
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fe fe56 	bl	8003bf8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8004fc4 <xTaskRemoveFromEventList+0xb0>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d11d      	bne.n	8004f90 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	3304      	adds	r3, #4
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7fe fe4d 	bl	8003bf8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f62:	4b19      	ldr	r3, [pc, #100]	@ (8004fc8 <xTaskRemoveFromEventList+0xb4>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d903      	bls.n	8004f72 <xTaskRemoveFromEventList+0x5e>
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6e:	4a16      	ldr	r2, [pc, #88]	@ (8004fc8 <xTaskRemoveFromEventList+0xb4>)
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f76:	4613      	mov	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4a13      	ldr	r2, [pc, #76]	@ (8004fcc <xTaskRemoveFromEventList+0xb8>)
 8004f80:	441a      	add	r2, r3
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	3304      	adds	r3, #4
 8004f86:	4619      	mov	r1, r3
 8004f88:	4610      	mov	r0, r2
 8004f8a:	f7fe fdd8 	bl	8003b3e <vListInsertEnd>
 8004f8e:	e005      	b.n	8004f9c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	3318      	adds	r3, #24
 8004f94:	4619      	mov	r1, r3
 8004f96:	480e      	ldr	r0, [pc, #56]	@ (8004fd0 <xTaskRemoveFromEventList+0xbc>)
 8004f98:	f7fe fdd1 	bl	8003b3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd4 <xTaskRemoveFromEventList+0xc0>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d905      	bls.n	8004fb6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004faa:	2301      	movs	r3, #1
 8004fac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004fae:	4b0a      	ldr	r3, [pc, #40]	@ (8004fd8 <xTaskRemoveFromEventList+0xc4>)
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	e001      	b.n	8004fba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004fba:	697b      	ldr	r3, [r7, #20]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	20000dc8 	.word	0x20000dc8
 8004fc8:	20000da8 	.word	0x20000da8
 8004fcc:	200008d0 	.word	0x200008d0
 8004fd0:	20000d60 	.word	0x20000d60
 8004fd4:	200008cc 	.word	0x200008cc
 8004fd8:	20000db4 	.word	0x20000db4

08004fdc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004fe4:	4b06      	ldr	r3, [pc, #24]	@ (8005000 <vTaskInternalSetTimeOutState+0x24>)
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004fec:	4b05      	ldr	r3, [pc, #20]	@ (8005004 <vTaskInternalSetTimeOutState+0x28>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	605a      	str	r2, [r3, #4]
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	20000db8 	.word	0x20000db8
 8005004:	20000da4 	.word	0x20000da4

08005008 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10b      	bne.n	8005030 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	613b      	str	r3, [r7, #16]
}
 800502a:	bf00      	nop
 800502c:	bf00      	nop
 800502e:	e7fd      	b.n	800502c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10b      	bne.n	800504e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	60fb      	str	r3, [r7, #12]
}
 8005048:	bf00      	nop
 800504a:	bf00      	nop
 800504c:	e7fd      	b.n	800504a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800504e:	f000 fe8b 	bl	8005d68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005052:	4b1d      	ldr	r3, [pc, #116]	@ (80050c8 <xTaskCheckForTimeOut+0xc0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506a:	d102      	bne.n	8005072 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800506c:	2300      	movs	r3, #0
 800506e:	61fb      	str	r3, [r7, #28]
 8005070:	e023      	b.n	80050ba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	4b15      	ldr	r3, [pc, #84]	@ (80050cc <xTaskCheckForTimeOut+0xc4>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	429a      	cmp	r2, r3
 800507c:	d007      	beq.n	800508e <xTaskCheckForTimeOut+0x86>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	429a      	cmp	r2, r3
 8005086:	d302      	bcc.n	800508e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005088:	2301      	movs	r3, #1
 800508a:	61fb      	str	r3, [r7, #28]
 800508c:	e015      	b.n	80050ba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	429a      	cmp	r2, r3
 8005096:	d20b      	bcs.n	80050b0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	1ad2      	subs	r2, r2, r3
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7ff ff99 	bl	8004fdc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80050aa:	2300      	movs	r3, #0
 80050ac:	61fb      	str	r3, [r7, #28]
 80050ae:	e004      	b.n	80050ba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80050b6:	2301      	movs	r3, #1
 80050b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80050ba:	f000 fe87 	bl	8005dcc <vPortExitCritical>

	return xReturn;
 80050be:	69fb      	ldr	r3, [r7, #28]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3720      	adds	r7, #32
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	20000da4 	.word	0x20000da4
 80050cc:	20000db8 	.word	0x20000db8

080050d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80050d4:	4b03      	ldr	r3, [pc, #12]	@ (80050e4 <vTaskMissedYield+0x14>)
 80050d6:	2201      	movs	r2, #1
 80050d8:	601a      	str	r2, [r3, #0]
}
 80050da:	bf00      	nop
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	20000db4 	.word	0x20000db4

080050e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80050f0:	f000 f852 	bl	8005198 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80050f4:	4b06      	ldr	r3, [pc, #24]	@ (8005110 <prvIdleTask+0x28>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d9f9      	bls.n	80050f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80050fc:	4b05      	ldr	r3, [pc, #20]	@ (8005114 <prvIdleTask+0x2c>)
 80050fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800510c:	e7f0      	b.n	80050f0 <prvIdleTask+0x8>
 800510e:	bf00      	nop
 8005110:	200008d0 	.word	0x200008d0
 8005114:	e000ed04 	.word	0xe000ed04

08005118 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800511e:	2300      	movs	r3, #0
 8005120:	607b      	str	r3, [r7, #4]
 8005122:	e00c      	b.n	800513e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	4613      	mov	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4a12      	ldr	r2, [pc, #72]	@ (8005178 <prvInitialiseTaskLists+0x60>)
 8005130:	4413      	add	r3, r2
 8005132:	4618      	mov	r0, r3
 8005134:	f7fe fcd6 	bl	8003ae4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3301      	adds	r3, #1
 800513c:	607b      	str	r3, [r7, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b37      	cmp	r3, #55	@ 0x37
 8005142:	d9ef      	bls.n	8005124 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005144:	480d      	ldr	r0, [pc, #52]	@ (800517c <prvInitialiseTaskLists+0x64>)
 8005146:	f7fe fccd 	bl	8003ae4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800514a:	480d      	ldr	r0, [pc, #52]	@ (8005180 <prvInitialiseTaskLists+0x68>)
 800514c:	f7fe fcca 	bl	8003ae4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005150:	480c      	ldr	r0, [pc, #48]	@ (8005184 <prvInitialiseTaskLists+0x6c>)
 8005152:	f7fe fcc7 	bl	8003ae4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005156:	480c      	ldr	r0, [pc, #48]	@ (8005188 <prvInitialiseTaskLists+0x70>)
 8005158:	f7fe fcc4 	bl	8003ae4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800515c:	480b      	ldr	r0, [pc, #44]	@ (800518c <prvInitialiseTaskLists+0x74>)
 800515e:	f7fe fcc1 	bl	8003ae4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005162:	4b0b      	ldr	r3, [pc, #44]	@ (8005190 <prvInitialiseTaskLists+0x78>)
 8005164:	4a05      	ldr	r2, [pc, #20]	@ (800517c <prvInitialiseTaskLists+0x64>)
 8005166:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005168:	4b0a      	ldr	r3, [pc, #40]	@ (8005194 <prvInitialiseTaskLists+0x7c>)
 800516a:	4a05      	ldr	r2, [pc, #20]	@ (8005180 <prvInitialiseTaskLists+0x68>)
 800516c:	601a      	str	r2, [r3, #0]
}
 800516e:	bf00      	nop
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	200008d0 	.word	0x200008d0
 800517c:	20000d30 	.word	0x20000d30
 8005180:	20000d44 	.word	0x20000d44
 8005184:	20000d60 	.word	0x20000d60
 8005188:	20000d74 	.word	0x20000d74
 800518c:	20000d8c 	.word	0x20000d8c
 8005190:	20000d58 	.word	0x20000d58
 8005194:	20000d5c 	.word	0x20000d5c

08005198 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800519e:	e019      	b.n	80051d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80051a0:	f000 fde2 	bl	8005d68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051a4:	4b10      	ldr	r3, [pc, #64]	@ (80051e8 <prvCheckTasksWaitingTermination+0x50>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3304      	adds	r3, #4
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7fe fd21 	bl	8003bf8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80051b6:	4b0d      	ldr	r3, [pc, #52]	@ (80051ec <prvCheckTasksWaitingTermination+0x54>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3b01      	subs	r3, #1
 80051bc:	4a0b      	ldr	r2, [pc, #44]	@ (80051ec <prvCheckTasksWaitingTermination+0x54>)
 80051be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80051c0:	4b0b      	ldr	r3, [pc, #44]	@ (80051f0 <prvCheckTasksWaitingTermination+0x58>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3b01      	subs	r3, #1
 80051c6:	4a0a      	ldr	r2, [pc, #40]	@ (80051f0 <prvCheckTasksWaitingTermination+0x58>)
 80051c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80051ca:	f000 fdff 	bl	8005dcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f810 	bl	80051f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051d4:	4b06      	ldr	r3, [pc, #24]	@ (80051f0 <prvCheckTasksWaitingTermination+0x58>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1e1      	bne.n	80051a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80051dc:	bf00      	nop
 80051de:	bf00      	nop
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	20000d74 	.word	0x20000d74
 80051ec:	20000da0 	.word	0x20000da0
 80051f0:	20000d88 	.word	0x20000d88

080051f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005202:	2b00      	cmp	r3, #0
 8005204:	d108      	bne.n	8005218 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520a:	4618      	mov	r0, r3
 800520c:	f000 ff9c 	bl	8006148 <vPortFree>
				vPortFree( pxTCB );
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 ff99 	bl	8006148 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005216:	e019      	b.n	800524c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800521e:	2b01      	cmp	r3, #1
 8005220:	d103      	bne.n	800522a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 ff90 	bl	8006148 <vPortFree>
	}
 8005228:	e010      	b.n	800524c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005230:	2b02      	cmp	r3, #2
 8005232:	d00b      	beq.n	800524c <prvDeleteTCB+0x58>
	__asm volatile
 8005234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	60fb      	str	r3, [r7, #12]
}
 8005246:	bf00      	nop
 8005248:	bf00      	nop
 800524a:	e7fd      	b.n	8005248 <prvDeleteTCB+0x54>
	}
 800524c:	bf00      	nop
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800525a:	4b0c      	ldr	r3, [pc, #48]	@ (800528c <prvResetNextTaskUnblockTime+0x38>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d104      	bne.n	800526e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005264:	4b0a      	ldr	r3, [pc, #40]	@ (8005290 <prvResetNextTaskUnblockTime+0x3c>)
 8005266:	f04f 32ff 	mov.w	r2, #4294967295
 800526a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800526c:	e008      	b.n	8005280 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800526e:	4b07      	ldr	r3, [pc, #28]	@ (800528c <prvResetNextTaskUnblockTime+0x38>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	4a04      	ldr	r2, [pc, #16]	@ (8005290 <prvResetNextTaskUnblockTime+0x3c>)
 800527e:	6013      	str	r3, [r2, #0]
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	20000d58 	.word	0x20000d58
 8005290:	20000dc0 	.word	0x20000dc0

08005294 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800529a:	4b0b      	ldr	r3, [pc, #44]	@ (80052c8 <xTaskGetSchedulerState+0x34>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d102      	bne.n	80052a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80052a2:	2301      	movs	r3, #1
 80052a4:	607b      	str	r3, [r7, #4]
 80052a6:	e008      	b.n	80052ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052a8:	4b08      	ldr	r3, [pc, #32]	@ (80052cc <xTaskGetSchedulerState+0x38>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d102      	bne.n	80052b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80052b0:	2302      	movs	r3, #2
 80052b2:	607b      	str	r3, [r7, #4]
 80052b4:	e001      	b.n	80052ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80052b6:	2300      	movs	r3, #0
 80052b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80052ba:	687b      	ldr	r3, [r7, #4]
	}
 80052bc:	4618      	mov	r0, r3
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	20000dac 	.word	0x20000dac
 80052cc:	20000dc8 	.word	0x20000dc8

080052d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80052dc:	2300      	movs	r3, #0
 80052de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d058      	beq.n	8005398 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80052e6:	4b2f      	ldr	r3, [pc, #188]	@ (80053a4 <xTaskPriorityDisinherit+0xd4>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d00b      	beq.n	8005308 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80052f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	60fb      	str	r3, [r7, #12]
}
 8005302:	bf00      	nop
 8005304:	bf00      	nop
 8005306:	e7fd      	b.n	8005304 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10b      	bne.n	8005328 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	60bb      	str	r3, [r7, #8]
}
 8005322:	bf00      	nop
 8005324:	bf00      	nop
 8005326:	e7fd      	b.n	8005324 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800532c:	1e5a      	subs	r2, r3, #1
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800533a:	429a      	cmp	r2, r3
 800533c:	d02c      	beq.n	8005398 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005342:	2b00      	cmp	r3, #0
 8005344:	d128      	bne.n	8005398 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	3304      	adds	r3, #4
 800534a:	4618      	mov	r0, r3
 800534c:	f7fe fc54 	bl	8003bf8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005368:	4b0f      	ldr	r3, [pc, #60]	@ (80053a8 <xTaskPriorityDisinherit+0xd8>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	429a      	cmp	r2, r3
 800536e:	d903      	bls.n	8005378 <xTaskPriorityDisinherit+0xa8>
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005374:	4a0c      	ldr	r2, [pc, #48]	@ (80053a8 <xTaskPriorityDisinherit+0xd8>)
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800537c:	4613      	mov	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4a09      	ldr	r2, [pc, #36]	@ (80053ac <xTaskPriorityDisinherit+0xdc>)
 8005386:	441a      	add	r2, r3
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	3304      	adds	r3, #4
 800538c:	4619      	mov	r1, r3
 800538e:	4610      	mov	r0, r2
 8005390:	f7fe fbd5 	bl	8003b3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005394:	2301      	movs	r3, #1
 8005396:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005398:	697b      	ldr	r3, [r7, #20]
	}
 800539a:	4618      	mov	r0, r3
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	200008cc 	.word	0x200008cc
 80053a8:	20000da8 	.word	0x20000da8
 80053ac:	200008d0 	.word	0x200008d0

080053b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80053ba:	4b21      	ldr	r3, [pc, #132]	@ (8005440 <prvAddCurrentTaskToDelayedList+0x90>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053c0:	4b20      	ldr	r3, [pc, #128]	@ (8005444 <prvAddCurrentTaskToDelayedList+0x94>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3304      	adds	r3, #4
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7fe fc16 	bl	8003bf8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d2:	d10a      	bne.n	80053ea <prvAddCurrentTaskToDelayedList+0x3a>
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d007      	beq.n	80053ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053da:	4b1a      	ldr	r3, [pc, #104]	@ (8005444 <prvAddCurrentTaskToDelayedList+0x94>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	3304      	adds	r3, #4
 80053e0:	4619      	mov	r1, r3
 80053e2:	4819      	ldr	r0, [pc, #100]	@ (8005448 <prvAddCurrentTaskToDelayedList+0x98>)
 80053e4:	f7fe fbab 	bl	8003b3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80053e8:	e026      	b.n	8005438 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4413      	add	r3, r2
 80053f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80053f2:	4b14      	ldr	r3, [pc, #80]	@ (8005444 <prvAddCurrentTaskToDelayedList+0x94>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d209      	bcs.n	8005416 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005402:	4b12      	ldr	r3, [pc, #72]	@ (800544c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	4b0f      	ldr	r3, [pc, #60]	@ (8005444 <prvAddCurrentTaskToDelayedList+0x94>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3304      	adds	r3, #4
 800540c:	4619      	mov	r1, r3
 800540e:	4610      	mov	r0, r2
 8005410:	f7fe fbb9 	bl	8003b86 <vListInsert>
}
 8005414:	e010      	b.n	8005438 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005416:	4b0e      	ldr	r3, [pc, #56]	@ (8005450 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	4b0a      	ldr	r3, [pc, #40]	@ (8005444 <prvAddCurrentTaskToDelayedList+0x94>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	3304      	adds	r3, #4
 8005420:	4619      	mov	r1, r3
 8005422:	4610      	mov	r0, r2
 8005424:	f7fe fbaf 	bl	8003b86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005428:	4b0a      	ldr	r3, [pc, #40]	@ (8005454 <prvAddCurrentTaskToDelayedList+0xa4>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	429a      	cmp	r2, r3
 8005430:	d202      	bcs.n	8005438 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005432:	4a08      	ldr	r2, [pc, #32]	@ (8005454 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	6013      	str	r3, [r2, #0]
}
 8005438:	bf00      	nop
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	20000da4 	.word	0x20000da4
 8005444:	200008cc 	.word	0x200008cc
 8005448:	20000d8c 	.word	0x20000d8c
 800544c:	20000d5c 	.word	0x20000d5c
 8005450:	20000d58 	.word	0x20000d58
 8005454:	20000dc0 	.word	0x20000dc0

08005458 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08a      	sub	sp, #40	@ 0x28
 800545c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800545e:	2300      	movs	r3, #0
 8005460:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005462:	f000 fb13 	bl	8005a8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005466:	4b1d      	ldr	r3, [pc, #116]	@ (80054dc <xTimerCreateTimerTask+0x84>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d021      	beq.n	80054b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005472:	2300      	movs	r3, #0
 8005474:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005476:	1d3a      	adds	r2, r7, #4
 8005478:	f107 0108 	add.w	r1, r7, #8
 800547c:	f107 030c 	add.w	r3, r7, #12
 8005480:	4618      	mov	r0, r3
 8005482:	f7fe fb15 	bl	8003ab0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005486:	6879      	ldr	r1, [r7, #4]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	9202      	str	r2, [sp, #8]
 800548e:	9301      	str	r3, [sp, #4]
 8005490:	2302      	movs	r3, #2
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	2300      	movs	r3, #0
 8005496:	460a      	mov	r2, r1
 8005498:	4911      	ldr	r1, [pc, #68]	@ (80054e0 <xTimerCreateTimerTask+0x88>)
 800549a:	4812      	ldr	r0, [pc, #72]	@ (80054e4 <xTimerCreateTimerTask+0x8c>)
 800549c:	f7ff f8d0 	bl	8004640 <xTaskCreateStatic>
 80054a0:	4603      	mov	r3, r0
 80054a2:	4a11      	ldr	r2, [pc, #68]	@ (80054e8 <xTimerCreateTimerTask+0x90>)
 80054a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80054a6:	4b10      	ldr	r3, [pc, #64]	@ (80054e8 <xTimerCreateTimerTask+0x90>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80054ae:	2301      	movs	r3, #1
 80054b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10b      	bne.n	80054d0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	613b      	str	r3, [r7, #16]
}
 80054ca:	bf00      	nop
 80054cc:	bf00      	nop
 80054ce:	e7fd      	b.n	80054cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80054d0:	697b      	ldr	r3, [r7, #20]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3718      	adds	r7, #24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	20000dfc 	.word	0x20000dfc
 80054e0:	08006d64 	.word	0x08006d64
 80054e4:	08005625 	.word	0x08005625
 80054e8:	20000e00 	.word	0x20000e00

080054ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b08a      	sub	sp, #40	@ 0x28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
 80054f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80054fa:	2300      	movs	r3, #0
 80054fc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10b      	bne.n	800551c <xTimerGenericCommand+0x30>
	__asm volatile
 8005504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005508:	f383 8811 	msr	BASEPRI, r3
 800550c:	f3bf 8f6f 	isb	sy
 8005510:	f3bf 8f4f 	dsb	sy
 8005514:	623b      	str	r3, [r7, #32]
}
 8005516:	bf00      	nop
 8005518:	bf00      	nop
 800551a:	e7fd      	b.n	8005518 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800551c:	4b19      	ldr	r3, [pc, #100]	@ (8005584 <xTimerGenericCommand+0x98>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d02a      	beq.n	800557a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	2b05      	cmp	r3, #5
 8005534:	dc18      	bgt.n	8005568 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005536:	f7ff fead 	bl	8005294 <xTaskGetSchedulerState>
 800553a:	4603      	mov	r3, r0
 800553c:	2b02      	cmp	r3, #2
 800553e:	d109      	bne.n	8005554 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005540:	4b10      	ldr	r3, [pc, #64]	@ (8005584 <xTimerGenericCommand+0x98>)
 8005542:	6818      	ldr	r0, [r3, #0]
 8005544:	f107 0110 	add.w	r1, r7, #16
 8005548:	2300      	movs	r3, #0
 800554a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800554c:	f7fe fc88 	bl	8003e60 <xQueueGenericSend>
 8005550:	6278      	str	r0, [r7, #36]	@ 0x24
 8005552:	e012      	b.n	800557a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005554:	4b0b      	ldr	r3, [pc, #44]	@ (8005584 <xTimerGenericCommand+0x98>)
 8005556:	6818      	ldr	r0, [r3, #0]
 8005558:	f107 0110 	add.w	r1, r7, #16
 800555c:	2300      	movs	r3, #0
 800555e:	2200      	movs	r2, #0
 8005560:	f7fe fc7e 	bl	8003e60 <xQueueGenericSend>
 8005564:	6278      	str	r0, [r7, #36]	@ 0x24
 8005566:	e008      	b.n	800557a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005568:	4b06      	ldr	r3, [pc, #24]	@ (8005584 <xTimerGenericCommand+0x98>)
 800556a:	6818      	ldr	r0, [r3, #0]
 800556c:	f107 0110 	add.w	r1, r7, #16
 8005570:	2300      	movs	r3, #0
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	f7fe fd76 	bl	8004064 <xQueueGenericSendFromISR>
 8005578:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800557a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800557c:	4618      	mov	r0, r3
 800557e:	3728      	adds	r7, #40	@ 0x28
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	20000dfc 	.word	0x20000dfc

08005588 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af02      	add	r7, sp, #8
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005592:	4b23      	ldr	r3, [pc, #140]	@ (8005620 <prvProcessExpiredTimer+0x98>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	3304      	adds	r3, #4
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7fe fb29 	bl	8003bf8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d023      	beq.n	80055fc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	699a      	ldr	r2, [r3, #24]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	18d1      	adds	r1, r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	6978      	ldr	r0, [r7, #20]
 80055c2:	f000 f8d5 	bl	8005770 <prvInsertTimerInActiveList>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d020      	beq.n	800560e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055cc:	2300      	movs	r3, #0
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	2300      	movs	r3, #0
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	2100      	movs	r1, #0
 80055d6:	6978      	ldr	r0, [r7, #20]
 80055d8:	f7ff ff88 	bl	80054ec <xTimerGenericCommand>
 80055dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d114      	bne.n	800560e <prvProcessExpiredTimer+0x86>
	__asm volatile
 80055e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e8:	f383 8811 	msr	BASEPRI, r3
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	60fb      	str	r3, [r7, #12]
}
 80055f6:	bf00      	nop
 80055f8:	bf00      	nop
 80055fa:	e7fd      	b.n	80055f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005602:	f023 0301 	bic.w	r3, r3, #1
 8005606:	b2da      	uxtb	r2, r3
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	6978      	ldr	r0, [r7, #20]
 8005614:	4798      	blx	r3
}
 8005616:	bf00      	nop
 8005618:	3718      	adds	r7, #24
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20000df4 	.word	0x20000df4

08005624 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800562c:	f107 0308 	add.w	r3, r7, #8
 8005630:	4618      	mov	r0, r3
 8005632:	f000 f859 	bl	80056e8 <prvGetNextExpireTime>
 8005636:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4619      	mov	r1, r3
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 f805 	bl	800564c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005642:	f000 f8d7 	bl	80057f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005646:	bf00      	nop
 8005648:	e7f0      	b.n	800562c <prvTimerTask+0x8>
	...

0800564c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005656:	f7ff fa37 	bl	8004ac8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800565a:	f107 0308 	add.w	r3, r7, #8
 800565e:	4618      	mov	r0, r3
 8005660:	f000 f866 	bl	8005730 <prvSampleTimeNow>
 8005664:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d130      	bne.n	80056ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10a      	bne.n	8005688 <prvProcessTimerOrBlockTask+0x3c>
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	429a      	cmp	r2, r3
 8005678:	d806      	bhi.n	8005688 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800567a:	f7ff fa33 	bl	8004ae4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800567e:	68f9      	ldr	r1, [r7, #12]
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7ff ff81 	bl	8005588 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005686:	e024      	b.n	80056d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d008      	beq.n	80056a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800568e:	4b13      	ldr	r3, [pc, #76]	@ (80056dc <prvProcessTimerOrBlockTask+0x90>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <prvProcessTimerOrBlockTask+0x50>
 8005698:	2301      	movs	r3, #1
 800569a:	e000      	b.n	800569e <prvProcessTimerOrBlockTask+0x52>
 800569c:	2300      	movs	r3, #0
 800569e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80056a0:	4b0f      	ldr	r3, [pc, #60]	@ (80056e0 <prvProcessTimerOrBlockTask+0x94>)
 80056a2:	6818      	ldr	r0, [r3, #0]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	4619      	mov	r1, r3
 80056ae:	f7fe ff93 	bl	80045d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80056b2:	f7ff fa17 	bl	8004ae4 <xTaskResumeAll>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10a      	bne.n	80056d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80056bc:	4b09      	ldr	r3, [pc, #36]	@ (80056e4 <prvProcessTimerOrBlockTask+0x98>)
 80056be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	f3bf 8f4f 	dsb	sy
 80056c8:	f3bf 8f6f 	isb	sy
}
 80056cc:	e001      	b.n	80056d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80056ce:	f7ff fa09 	bl	8004ae4 <xTaskResumeAll>
}
 80056d2:	bf00      	nop
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	20000df8 	.word	0x20000df8
 80056e0:	20000dfc 	.word	0x20000dfc
 80056e4:	e000ed04 	.word	0xe000ed04

080056e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80056f0:	4b0e      	ldr	r3, [pc, #56]	@ (800572c <prvGetNextExpireTime+0x44>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <prvGetNextExpireTime+0x16>
 80056fa:	2201      	movs	r2, #1
 80056fc:	e000      	b.n	8005700 <prvGetNextExpireTime+0x18>
 80056fe:	2200      	movs	r2, #0
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d105      	bne.n	8005718 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800570c:	4b07      	ldr	r3, [pc, #28]	@ (800572c <prvGetNextExpireTime+0x44>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	e001      	b.n	800571c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800571c:	68fb      	ldr	r3, [r7, #12]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	20000df4 	.word	0x20000df4

08005730 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005738:	f7ff fa72 	bl	8004c20 <xTaskGetTickCount>
 800573c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800573e:	4b0b      	ldr	r3, [pc, #44]	@ (800576c <prvSampleTimeNow+0x3c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	429a      	cmp	r2, r3
 8005746:	d205      	bcs.n	8005754 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005748:	f000 f93a 	bl	80059c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	e002      	b.n	800575a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800575a:	4a04      	ldr	r2, [pc, #16]	@ (800576c <prvSampleTimeNow+0x3c>)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005760:	68fb      	ldr	r3, [r7, #12]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	20000e04 	.word	0x20000e04

08005770 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
 800577c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800577e:	2300      	movs	r3, #0
 8005780:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	429a      	cmp	r2, r3
 8005794:	d812      	bhi.n	80057bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	1ad2      	subs	r2, r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d302      	bcc.n	80057aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80057a4:	2301      	movs	r3, #1
 80057a6:	617b      	str	r3, [r7, #20]
 80057a8:	e01b      	b.n	80057e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80057aa:	4b10      	ldr	r3, [pc, #64]	@ (80057ec <prvInsertTimerInActiveList+0x7c>)
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	3304      	adds	r3, #4
 80057b2:	4619      	mov	r1, r3
 80057b4:	4610      	mov	r0, r2
 80057b6:	f7fe f9e6 	bl	8003b86 <vListInsert>
 80057ba:	e012      	b.n	80057e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d206      	bcs.n	80057d2 <prvInsertTimerInActiveList+0x62>
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d302      	bcc.n	80057d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80057cc:	2301      	movs	r3, #1
 80057ce:	617b      	str	r3, [r7, #20]
 80057d0:	e007      	b.n	80057e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80057d2:	4b07      	ldr	r3, [pc, #28]	@ (80057f0 <prvInsertTimerInActiveList+0x80>)
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3304      	adds	r3, #4
 80057da:	4619      	mov	r1, r3
 80057dc:	4610      	mov	r0, r2
 80057de:	f7fe f9d2 	bl	8003b86 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80057e2:	697b      	ldr	r3, [r7, #20]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	20000df8 	.word	0x20000df8
 80057f0:	20000df4 	.word	0x20000df4

080057f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b08e      	sub	sp, #56	@ 0x38
 80057f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80057fa:	e0ce      	b.n	800599a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	da19      	bge.n	8005836 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005802:	1d3b      	adds	r3, r7, #4
 8005804:	3304      	adds	r3, #4
 8005806:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10b      	bne.n	8005826 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	61fb      	str	r3, [r7, #28]
}
 8005820:	bf00      	nop
 8005822:	bf00      	nop
 8005824:	e7fd      	b.n	8005822 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800582c:	6850      	ldr	r0, [r2, #4]
 800582e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005830:	6892      	ldr	r2, [r2, #8]
 8005832:	4611      	mov	r1, r2
 8005834:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	f2c0 80ae 	blt.w	800599a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d004      	beq.n	8005854 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800584a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800584c:	3304      	adds	r3, #4
 800584e:	4618      	mov	r0, r3
 8005850:	f7fe f9d2 	bl	8003bf8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005854:	463b      	mov	r3, r7
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff ff6a 	bl	8005730 <prvSampleTimeNow>
 800585c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b09      	cmp	r3, #9
 8005862:	f200 8097 	bhi.w	8005994 <prvProcessReceivedCommands+0x1a0>
 8005866:	a201      	add	r2, pc, #4	@ (adr r2, 800586c <prvProcessReceivedCommands+0x78>)
 8005868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586c:	08005895 	.word	0x08005895
 8005870:	08005895 	.word	0x08005895
 8005874:	08005895 	.word	0x08005895
 8005878:	0800590b 	.word	0x0800590b
 800587c:	0800591f 	.word	0x0800591f
 8005880:	0800596b 	.word	0x0800596b
 8005884:	08005895 	.word	0x08005895
 8005888:	08005895 	.word	0x08005895
 800588c:	0800590b 	.word	0x0800590b
 8005890:	0800591f 	.word	0x0800591f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005896:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800589a:	f043 0301 	orr.w	r3, r3, #1
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	18d1      	adds	r1, r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058b4:	f7ff ff5c 	bl	8005770 <prvInsertTimerInActiveList>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d06c      	beq.n	8005998 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d061      	beq.n	8005998 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	441a      	add	r2, r3
 80058dc:	2300      	movs	r3, #0
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	2300      	movs	r3, #0
 80058e2:	2100      	movs	r1, #0
 80058e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058e6:	f7ff fe01 	bl	80054ec <xTimerGenericCommand>
 80058ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d152      	bne.n	8005998 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80058f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	61bb      	str	r3, [r7, #24]
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop
 8005908:	e7fd      	b.n	8005906 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800590a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005910:	f023 0301 	bic.w	r3, r3, #1
 8005914:	b2da      	uxtb	r2, r3
 8005916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005918:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800591c:	e03d      	b.n	800599a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800591e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005920:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005924:	f043 0301 	orr.w	r3, r3, #1
 8005928:	b2da      	uxtb	r2, r3
 800592a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800592c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005934:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10b      	bne.n	8005956 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	617b      	str	r3, [r7, #20]
}
 8005950:	bf00      	nop
 8005952:	bf00      	nop
 8005954:	e7fd      	b.n	8005952 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005958:	699a      	ldr	r2, [r3, #24]
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595c:	18d1      	adds	r1, r2, r3
 800595e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005962:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005964:	f7ff ff04 	bl	8005770 <prvInsertTimerInActiveList>
					break;
 8005968:	e017      	b.n	800599a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800596a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005970:	f003 0302 	and.w	r3, r3, #2
 8005974:	2b00      	cmp	r3, #0
 8005976:	d103      	bne.n	8005980 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005978:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800597a:	f000 fbe5 	bl	8006148 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800597e:	e00c      	b.n	800599a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005982:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005986:	f023 0301 	bic.w	r3, r3, #1
 800598a:	b2da      	uxtb	r2, r3
 800598c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800598e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005992:	e002      	b.n	800599a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005994:	bf00      	nop
 8005996:	e000      	b.n	800599a <prvProcessReceivedCommands+0x1a6>
					break;
 8005998:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800599a:	4b08      	ldr	r3, [pc, #32]	@ (80059bc <prvProcessReceivedCommands+0x1c8>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	1d39      	adds	r1, r7, #4
 80059a0:	2200      	movs	r2, #0
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7fe fbfc 	bl	80041a0 <xQueueReceive>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f47f af26 	bne.w	80057fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80059b0:	bf00      	nop
 80059b2:	bf00      	nop
 80059b4:	3730      	adds	r7, #48	@ 0x30
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	20000dfc 	.word	0x20000dfc

080059c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b088      	sub	sp, #32
 80059c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059c6:	e049      	b.n	8005a5c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059c8:	4b2e      	ldr	r3, [pc, #184]	@ (8005a84 <prvSwitchTimerLists+0xc4>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059d2:	4b2c      	ldr	r3, [pc, #176]	@ (8005a84 <prvSwitchTimerLists+0xc4>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	3304      	adds	r3, #4
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7fe f909 	bl	8003bf8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059f4:	f003 0304 	and.w	r3, r3, #4
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d02f      	beq.n	8005a5c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	4413      	add	r3, r2
 8005a04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d90e      	bls.n	8005a2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8005a84 <prvSwitchTimerLists+0xc4>)
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3304      	adds	r3, #4
 8005a22:	4619      	mov	r1, r3
 8005a24:	4610      	mov	r0, r2
 8005a26:	f7fe f8ae 	bl	8003b86 <vListInsert>
 8005a2a:	e017      	b.n	8005a5c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	2300      	movs	r3, #0
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	2100      	movs	r1, #0
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f7ff fd58 	bl	80054ec <xTimerGenericCommand>
 8005a3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10b      	bne.n	8005a5c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	603b      	str	r3, [r7, #0]
}
 8005a56:	bf00      	nop
 8005a58:	bf00      	nop
 8005a5a:	e7fd      	b.n	8005a58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a5c:	4b09      	ldr	r3, [pc, #36]	@ (8005a84 <prvSwitchTimerLists+0xc4>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1b0      	bne.n	80059c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005a66:	4b07      	ldr	r3, [pc, #28]	@ (8005a84 <prvSwitchTimerLists+0xc4>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005a6c:	4b06      	ldr	r3, [pc, #24]	@ (8005a88 <prvSwitchTimerLists+0xc8>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a04      	ldr	r2, [pc, #16]	@ (8005a84 <prvSwitchTimerLists+0xc4>)
 8005a72:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005a74:	4a04      	ldr	r2, [pc, #16]	@ (8005a88 <prvSwitchTimerLists+0xc8>)
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	6013      	str	r3, [r2, #0]
}
 8005a7a:	bf00      	nop
 8005a7c:	3718      	adds	r7, #24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	20000df4 	.word	0x20000df4
 8005a88:	20000df8 	.word	0x20000df8

08005a8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005a92:	f000 f969 	bl	8005d68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005a96:	4b15      	ldr	r3, [pc, #84]	@ (8005aec <prvCheckForValidListAndQueue+0x60>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d120      	bne.n	8005ae0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005a9e:	4814      	ldr	r0, [pc, #80]	@ (8005af0 <prvCheckForValidListAndQueue+0x64>)
 8005aa0:	f7fe f820 	bl	8003ae4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005aa4:	4813      	ldr	r0, [pc, #76]	@ (8005af4 <prvCheckForValidListAndQueue+0x68>)
 8005aa6:	f7fe f81d 	bl	8003ae4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005aaa:	4b13      	ldr	r3, [pc, #76]	@ (8005af8 <prvCheckForValidListAndQueue+0x6c>)
 8005aac:	4a10      	ldr	r2, [pc, #64]	@ (8005af0 <prvCheckForValidListAndQueue+0x64>)
 8005aae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005ab0:	4b12      	ldr	r3, [pc, #72]	@ (8005afc <prvCheckForValidListAndQueue+0x70>)
 8005ab2:	4a10      	ldr	r2, [pc, #64]	@ (8005af4 <prvCheckForValidListAndQueue+0x68>)
 8005ab4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	4b11      	ldr	r3, [pc, #68]	@ (8005b00 <prvCheckForValidListAndQueue+0x74>)
 8005abc:	4a11      	ldr	r2, [pc, #68]	@ (8005b04 <prvCheckForValidListAndQueue+0x78>)
 8005abe:	2110      	movs	r1, #16
 8005ac0:	200a      	movs	r0, #10
 8005ac2:	f7fe f92d 	bl	8003d20 <xQueueGenericCreateStatic>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	4a08      	ldr	r2, [pc, #32]	@ (8005aec <prvCheckForValidListAndQueue+0x60>)
 8005aca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005acc:	4b07      	ldr	r3, [pc, #28]	@ (8005aec <prvCheckForValidListAndQueue+0x60>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d005      	beq.n	8005ae0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ad4:	4b05      	ldr	r3, [pc, #20]	@ (8005aec <prvCheckForValidListAndQueue+0x60>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	490b      	ldr	r1, [pc, #44]	@ (8005b08 <prvCheckForValidListAndQueue+0x7c>)
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fe fd52 	bl	8004584 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ae0:	f000 f974 	bl	8005dcc <vPortExitCritical>
}
 8005ae4:	bf00      	nop
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	20000dfc 	.word	0x20000dfc
 8005af0:	20000dcc 	.word	0x20000dcc
 8005af4:	20000de0 	.word	0x20000de0
 8005af8:	20000df4 	.word	0x20000df4
 8005afc:	20000df8 	.word	0x20000df8
 8005b00:	20000ea8 	.word	0x20000ea8
 8005b04:	20000e08 	.word	0x20000e08
 8005b08:	08006d6c 	.word	0x08006d6c

08005b0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	3b04      	subs	r3, #4
 8005b1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005b24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3b04      	subs	r3, #4
 8005b2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f023 0201 	bic.w	r2, r3, #1
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	3b04      	subs	r3, #4
 8005b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8005b70 <pxPortInitialiseStack+0x64>)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	3b14      	subs	r3, #20
 8005b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	3b04      	subs	r3, #4
 8005b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f06f 0202 	mvn.w	r2, #2
 8005b5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	3b20      	subs	r3, #32
 8005b60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b62:	68fb      	ldr	r3, [r7, #12]
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	08005b75 	.word	0x08005b75

08005b74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b7e:	4b13      	ldr	r3, [pc, #76]	@ (8005bcc <prvTaskExitError+0x58>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b86:	d00b      	beq.n	8005ba0 <prvTaskExitError+0x2c>
	__asm volatile
 8005b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b8c:	f383 8811 	msr	BASEPRI, r3
 8005b90:	f3bf 8f6f 	isb	sy
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	60fb      	str	r3, [r7, #12]
}
 8005b9a:	bf00      	nop
 8005b9c:	bf00      	nop
 8005b9e:	e7fd      	b.n	8005b9c <prvTaskExitError+0x28>
	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	60bb      	str	r3, [r7, #8]
}
 8005bb2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005bb4:	bf00      	nop
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d0fc      	beq.n	8005bb6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005bbc:	bf00      	nop
 8005bbe:	bf00      	nop
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	2000000c 	.word	0x2000000c

08005bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005bd0:	4b07      	ldr	r3, [pc, #28]	@ (8005bf0 <pxCurrentTCBConst2>)
 8005bd2:	6819      	ldr	r1, [r3, #0]
 8005bd4:	6808      	ldr	r0, [r1, #0]
 8005bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bda:	f380 8809 	msr	PSP, r0
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	f04f 0000 	mov.w	r0, #0
 8005be6:	f380 8811 	msr	BASEPRI, r0
 8005bea:	4770      	bx	lr
 8005bec:	f3af 8000 	nop.w

08005bf0 <pxCurrentTCBConst2>:
 8005bf0:	200008cc 	.word	0x200008cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005bf4:	bf00      	nop
 8005bf6:	bf00      	nop

08005bf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005bf8:	4808      	ldr	r0, [pc, #32]	@ (8005c1c <prvPortStartFirstTask+0x24>)
 8005bfa:	6800      	ldr	r0, [r0, #0]
 8005bfc:	6800      	ldr	r0, [r0, #0]
 8005bfe:	f380 8808 	msr	MSP, r0
 8005c02:	f04f 0000 	mov.w	r0, #0
 8005c06:	f380 8814 	msr	CONTROL, r0
 8005c0a:	b662      	cpsie	i
 8005c0c:	b661      	cpsie	f
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	df00      	svc	0
 8005c18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c1a:	bf00      	nop
 8005c1c:	e000ed08 	.word	0xe000ed08

08005c20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c26:	4b47      	ldr	r3, [pc, #284]	@ (8005d44 <xPortStartScheduler+0x124>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a47      	ldr	r2, [pc, #284]	@ (8005d48 <xPortStartScheduler+0x128>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d10b      	bne.n	8005c48 <xPortStartScheduler+0x28>
	__asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	613b      	str	r3, [r7, #16]
}
 8005c42:	bf00      	nop
 8005c44:	bf00      	nop
 8005c46:	e7fd      	b.n	8005c44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c48:	4b3e      	ldr	r3, [pc, #248]	@ (8005d44 <xPortStartScheduler+0x124>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a3f      	ldr	r2, [pc, #252]	@ (8005d4c <xPortStartScheduler+0x12c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d10b      	bne.n	8005c6a <xPortStartScheduler+0x4a>
	__asm volatile
 8005c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c56:	f383 8811 	msr	BASEPRI, r3
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	60fb      	str	r3, [r7, #12]
}
 8005c64:	bf00      	nop
 8005c66:	bf00      	nop
 8005c68:	e7fd      	b.n	8005c66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c6a:	4b39      	ldr	r3, [pc, #228]	@ (8005d50 <xPortStartScheduler+0x130>)
 8005c6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	22ff      	movs	r2, #255	@ 0xff
 8005c7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c84:	78fb      	ldrb	r3, [r7, #3]
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	4b31      	ldr	r3, [pc, #196]	@ (8005d54 <xPortStartScheduler+0x134>)
 8005c90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c92:	4b31      	ldr	r3, [pc, #196]	@ (8005d58 <xPortStartScheduler+0x138>)
 8005c94:	2207      	movs	r2, #7
 8005c96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c98:	e009      	b.n	8005cae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8005d58 <xPortStartScheduler+0x138>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	4a2d      	ldr	r2, [pc, #180]	@ (8005d58 <xPortStartScheduler+0x138>)
 8005ca2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ca4:	78fb      	ldrb	r3, [r7, #3]
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cae:	78fb      	ldrb	r3, [r7, #3]
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cb6:	2b80      	cmp	r3, #128	@ 0x80
 8005cb8:	d0ef      	beq.n	8005c9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005cba:	4b27      	ldr	r3, [pc, #156]	@ (8005d58 <xPortStartScheduler+0x138>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f1c3 0307 	rsb	r3, r3, #7
 8005cc2:	2b04      	cmp	r3, #4
 8005cc4:	d00b      	beq.n	8005cde <xPortStartScheduler+0xbe>
	__asm volatile
 8005cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	60bb      	str	r3, [r7, #8]
}
 8005cd8:	bf00      	nop
 8005cda:	bf00      	nop
 8005cdc:	e7fd      	b.n	8005cda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005cde:	4b1e      	ldr	r3, [pc, #120]	@ (8005d58 <xPortStartScheduler+0x138>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	021b      	lsls	r3, r3, #8
 8005ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8005d58 <xPortStartScheduler+0x138>)
 8005ce6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8005d58 <xPortStartScheduler+0x138>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005cf0:	4a19      	ldr	r2, [pc, #100]	@ (8005d58 <xPortStartScheduler+0x138>)
 8005cf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005cfc:	4b17      	ldr	r3, [pc, #92]	@ (8005d5c <xPortStartScheduler+0x13c>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a16      	ldr	r2, [pc, #88]	@ (8005d5c <xPortStartScheduler+0x13c>)
 8005d02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005d06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d08:	4b14      	ldr	r3, [pc, #80]	@ (8005d5c <xPortStartScheduler+0x13c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a13      	ldr	r2, [pc, #76]	@ (8005d5c <xPortStartScheduler+0x13c>)
 8005d0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005d12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d14:	f000 f8da 	bl	8005ecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d18:	4b11      	ldr	r3, [pc, #68]	@ (8005d60 <xPortStartScheduler+0x140>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d1e:	f000 f8f9 	bl	8005f14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d22:	4b10      	ldr	r3, [pc, #64]	@ (8005d64 <xPortStartScheduler+0x144>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a0f      	ldr	r2, [pc, #60]	@ (8005d64 <xPortStartScheduler+0x144>)
 8005d28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005d2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d2e:	f7ff ff63 	bl	8005bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d32:	f7ff f83f 	bl	8004db4 <vTaskSwitchContext>
	prvTaskExitError();
 8005d36:	f7ff ff1d 	bl	8005b74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	e000ed00 	.word	0xe000ed00
 8005d48:	410fc271 	.word	0x410fc271
 8005d4c:	410fc270 	.word	0x410fc270
 8005d50:	e000e400 	.word	0xe000e400
 8005d54:	20000ef8 	.word	0x20000ef8
 8005d58:	20000efc 	.word	0x20000efc
 8005d5c:	e000ed20 	.word	0xe000ed20
 8005d60:	2000000c 	.word	0x2000000c
 8005d64:	e000ef34 	.word	0xe000ef34

08005d68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	607b      	str	r3, [r7, #4]
}
 8005d80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d82:	4b10      	ldr	r3, [pc, #64]	@ (8005dc4 <vPortEnterCritical+0x5c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	3301      	adds	r3, #1
 8005d88:	4a0e      	ldr	r2, [pc, #56]	@ (8005dc4 <vPortEnterCritical+0x5c>)
 8005d8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc4 <vPortEnterCritical+0x5c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d110      	bne.n	8005db6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d94:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc8 <vPortEnterCritical+0x60>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00b      	beq.n	8005db6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	603b      	str	r3, [r7, #0]
}
 8005db0:	bf00      	nop
 8005db2:	bf00      	nop
 8005db4:	e7fd      	b.n	8005db2 <vPortEnterCritical+0x4a>
	}
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	2000000c 	.word	0x2000000c
 8005dc8:	e000ed04 	.word	0xe000ed04

08005dcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005dd2:	4b12      	ldr	r3, [pc, #72]	@ (8005e1c <vPortExitCritical+0x50>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10b      	bne.n	8005df2 <vPortExitCritical+0x26>
	__asm volatile
 8005dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	607b      	str	r3, [r7, #4]
}
 8005dec:	bf00      	nop
 8005dee:	bf00      	nop
 8005df0:	e7fd      	b.n	8005dee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005df2:	4b0a      	ldr	r3, [pc, #40]	@ (8005e1c <vPortExitCritical+0x50>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3b01      	subs	r3, #1
 8005df8:	4a08      	ldr	r2, [pc, #32]	@ (8005e1c <vPortExitCritical+0x50>)
 8005dfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005dfc:	4b07      	ldr	r3, [pc, #28]	@ (8005e1c <vPortExitCritical+0x50>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d105      	bne.n	8005e10 <vPortExitCritical+0x44>
 8005e04:	2300      	movs	r3, #0
 8005e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	f383 8811 	msr	BASEPRI, r3
}
 8005e0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	2000000c 	.word	0x2000000c

08005e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e20:	f3ef 8009 	mrs	r0, PSP
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	4b15      	ldr	r3, [pc, #84]	@ (8005e80 <pxCurrentTCBConst>)
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	f01e 0f10 	tst.w	lr, #16
 8005e30:	bf08      	it	eq
 8005e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e3a:	6010      	str	r0, [r2, #0]
 8005e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005e44:	f380 8811 	msr	BASEPRI, r0
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f7fe ffb0 	bl	8004db4 <vTaskSwitchContext>
 8005e54:	f04f 0000 	mov.w	r0, #0
 8005e58:	f380 8811 	msr	BASEPRI, r0
 8005e5c:	bc09      	pop	{r0, r3}
 8005e5e:	6819      	ldr	r1, [r3, #0]
 8005e60:	6808      	ldr	r0, [r1, #0]
 8005e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e66:	f01e 0f10 	tst.w	lr, #16
 8005e6a:	bf08      	it	eq
 8005e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e70:	f380 8809 	msr	PSP, r0
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	f3af 8000 	nop.w

08005e80 <pxCurrentTCBConst>:
 8005e80:	200008cc 	.word	0x200008cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e84:	bf00      	nop
 8005e86:	bf00      	nop

08005e88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e92:	f383 8811 	msr	BASEPRI, r3
 8005e96:	f3bf 8f6f 	isb	sy
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	607b      	str	r3, [r7, #4]
}
 8005ea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ea2:	f7fe fecd 	bl	8004c40 <xTaskIncrementTick>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005eac:	4b06      	ldr	r3, [pc, #24]	@ (8005ec8 <xPortSysTickHandler+0x40>)
 8005eae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005eb2:	601a      	str	r2, [r3, #0]
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	f383 8811 	msr	BASEPRI, r3
}
 8005ebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ec0:	bf00      	nop
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	e000ed04 	.word	0xe000ed04

08005ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005ecc:	b480      	push	{r7}
 8005ece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8005f00 <vPortSetupTimerInterrupt+0x34>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8005f04 <vPortSetupTimerInterrupt+0x38>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005edc:	4b0a      	ldr	r3, [pc, #40]	@ (8005f08 <vPortSetupTimerInterrupt+0x3c>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8005f0c <vPortSetupTimerInterrupt+0x40>)
 8005ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee6:	099b      	lsrs	r3, r3, #6
 8005ee8:	4a09      	ldr	r2, [pc, #36]	@ (8005f10 <vPortSetupTimerInterrupt+0x44>)
 8005eea:	3b01      	subs	r3, #1
 8005eec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005eee:	4b04      	ldr	r3, [pc, #16]	@ (8005f00 <vPortSetupTimerInterrupt+0x34>)
 8005ef0:	2207      	movs	r2, #7
 8005ef2:	601a      	str	r2, [r3, #0]
}
 8005ef4:	bf00      	nop
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	e000e010 	.word	0xe000e010
 8005f04:	e000e018 	.word	0xe000e018
 8005f08:	20000000 	.word	0x20000000
 8005f0c:	10624dd3 	.word	0x10624dd3
 8005f10:	e000e014 	.word	0xe000e014

08005f14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005f24 <vPortEnableVFP+0x10>
 8005f18:	6801      	ldr	r1, [r0, #0]
 8005f1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005f1e:	6001      	str	r1, [r0, #0]
 8005f20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f22:	bf00      	nop
 8005f24:	e000ed88 	.word	0xe000ed88

08005f28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005f2e:	f3ef 8305 	mrs	r3, IPSR
 8005f32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2b0f      	cmp	r3, #15
 8005f38:	d915      	bls.n	8005f66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f3a:	4a18      	ldr	r2, [pc, #96]	@ (8005f9c <vPortValidateInterruptPriority+0x74>)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	4413      	add	r3, r2
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f44:	4b16      	ldr	r3, [pc, #88]	@ (8005fa0 <vPortValidateInterruptPriority+0x78>)
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	7afa      	ldrb	r2, [r7, #11]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d20b      	bcs.n	8005f66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	607b      	str	r3, [r7, #4]
}
 8005f60:	bf00      	nop
 8005f62:	bf00      	nop
 8005f64:	e7fd      	b.n	8005f62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f66:	4b0f      	ldr	r3, [pc, #60]	@ (8005fa4 <vPortValidateInterruptPriority+0x7c>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8005fa8 <vPortValidateInterruptPriority+0x80>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d90b      	bls.n	8005f8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	603b      	str	r3, [r7, #0]
}
 8005f88:	bf00      	nop
 8005f8a:	bf00      	nop
 8005f8c:	e7fd      	b.n	8005f8a <vPortValidateInterruptPriority+0x62>
	}
 8005f8e:	bf00      	nop
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	e000e3f0 	.word	0xe000e3f0
 8005fa0:	20000ef8 	.word	0x20000ef8
 8005fa4:	e000ed0c 	.word	0xe000ed0c
 8005fa8:	20000efc 	.word	0x20000efc

08005fac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08a      	sub	sp, #40	@ 0x28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005fb8:	f7fe fd86 	bl	8004ac8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fbc:	4b5c      	ldr	r3, [pc, #368]	@ (8006130 <pvPortMalloc+0x184>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fc4:	f000 f924 	bl	8006210 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fc8:	4b5a      	ldr	r3, [pc, #360]	@ (8006134 <pvPortMalloc+0x188>)
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f040 8095 	bne.w	8006100 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d01e      	beq.n	800601a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005fdc:	2208      	movs	r2, #8
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f003 0307 	and.w	r3, r3, #7
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d015      	beq.n	800601a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f023 0307 	bic.w	r3, r3, #7
 8005ff4:	3308      	adds	r3, #8
 8005ff6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f003 0307 	and.w	r3, r3, #7
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00b      	beq.n	800601a <pvPortMalloc+0x6e>
	__asm volatile
 8006002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006006:	f383 8811 	msr	BASEPRI, r3
 800600a:	f3bf 8f6f 	isb	sy
 800600e:	f3bf 8f4f 	dsb	sy
 8006012:	617b      	str	r3, [r7, #20]
}
 8006014:	bf00      	nop
 8006016:	bf00      	nop
 8006018:	e7fd      	b.n	8006016 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d06f      	beq.n	8006100 <pvPortMalloc+0x154>
 8006020:	4b45      	ldr	r3, [pc, #276]	@ (8006138 <pvPortMalloc+0x18c>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	429a      	cmp	r2, r3
 8006028:	d86a      	bhi.n	8006100 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800602a:	4b44      	ldr	r3, [pc, #272]	@ (800613c <pvPortMalloc+0x190>)
 800602c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800602e:	4b43      	ldr	r3, [pc, #268]	@ (800613c <pvPortMalloc+0x190>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006034:	e004      	b.n	8006040 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006038:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800603a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	429a      	cmp	r2, r3
 8006048:	d903      	bls.n	8006052 <pvPortMalloc+0xa6>
 800604a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1f1      	bne.n	8006036 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006052:	4b37      	ldr	r3, [pc, #220]	@ (8006130 <pvPortMalloc+0x184>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006058:	429a      	cmp	r2, r3
 800605a:	d051      	beq.n	8006100 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2208      	movs	r2, #8
 8006062:	4413      	add	r3, r2
 8006064:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	6a3b      	ldr	r3, [r7, #32]
 800606c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800606e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	1ad2      	subs	r2, r2, r3
 8006076:	2308      	movs	r3, #8
 8006078:	005b      	lsls	r3, r3, #1
 800607a:	429a      	cmp	r2, r3
 800607c:	d920      	bls.n	80060c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800607e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4413      	add	r3, r2
 8006084:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	f003 0307 	and.w	r3, r3, #7
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00b      	beq.n	80060a8 <pvPortMalloc+0xfc>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	613b      	str	r3, [r7, #16]
}
 80060a2:	bf00      	nop
 80060a4:	bf00      	nop
 80060a6:	e7fd      	b.n	80060a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	1ad2      	subs	r2, r2, r3
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060ba:	69b8      	ldr	r0, [r7, #24]
 80060bc:	f000 f90a 	bl	80062d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060c0:	4b1d      	ldr	r3, [pc, #116]	@ (8006138 <pvPortMalloc+0x18c>)
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006138 <pvPortMalloc+0x18c>)
 80060cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060ce:	4b1a      	ldr	r3, [pc, #104]	@ (8006138 <pvPortMalloc+0x18c>)
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006140 <pvPortMalloc+0x194>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d203      	bcs.n	80060e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060da:	4b17      	ldr	r3, [pc, #92]	@ (8006138 <pvPortMalloc+0x18c>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a18      	ldr	r2, [pc, #96]	@ (8006140 <pvPortMalloc+0x194>)
 80060e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	4b13      	ldr	r3, [pc, #76]	@ (8006134 <pvPortMalloc+0x188>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	431a      	orrs	r2, r3
 80060ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f2:	2200      	movs	r2, #0
 80060f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80060f6:	4b13      	ldr	r3, [pc, #76]	@ (8006144 <pvPortMalloc+0x198>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3301      	adds	r3, #1
 80060fc:	4a11      	ldr	r2, [pc, #68]	@ (8006144 <pvPortMalloc+0x198>)
 80060fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006100:	f7fe fcf0 	bl	8004ae4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	f003 0307 	and.w	r3, r3, #7
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00b      	beq.n	8006126 <pvPortMalloc+0x17a>
	__asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	60fb      	str	r3, [r7, #12]
}
 8006120:	bf00      	nop
 8006122:	bf00      	nop
 8006124:	e7fd      	b.n	8006122 <pvPortMalloc+0x176>
	return pvReturn;
 8006126:	69fb      	ldr	r3, [r7, #28]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3728      	adds	r7, #40	@ 0x28
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	20001d18 	.word	0x20001d18
 8006134:	20001d2c 	.word	0x20001d2c
 8006138:	20001d1c 	.word	0x20001d1c
 800613c:	20001d10 	.word	0x20001d10
 8006140:	20001d20 	.word	0x20001d20
 8006144:	20001d24 	.word	0x20001d24

08006148 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d04f      	beq.n	80061fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800615a:	2308      	movs	r3, #8
 800615c:	425b      	negs	r3, r3
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	4413      	add	r3, r2
 8006162:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	4b25      	ldr	r3, [pc, #148]	@ (8006204 <vPortFree+0xbc>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4013      	ands	r3, r2
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10b      	bne.n	800618e <vPortFree+0x46>
	__asm volatile
 8006176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	60fb      	str	r3, [r7, #12]
}
 8006188:	bf00      	nop
 800618a:	bf00      	nop
 800618c:	e7fd      	b.n	800618a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00b      	beq.n	80061ae <vPortFree+0x66>
	__asm volatile
 8006196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	60bb      	str	r3, [r7, #8]
}
 80061a8:	bf00      	nop
 80061aa:	bf00      	nop
 80061ac:	e7fd      	b.n	80061aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	4b14      	ldr	r3, [pc, #80]	@ (8006204 <vPortFree+0xbc>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4013      	ands	r3, r2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d01e      	beq.n	80061fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d11a      	bne.n	80061fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006204 <vPortFree+0xbc>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	43db      	mvns	r3, r3
 80061ce:	401a      	ands	r2, r3
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061d4:	f7fe fc78 	bl	8004ac8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006208 <vPortFree+0xc0>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4413      	add	r3, r2
 80061e2:	4a09      	ldr	r2, [pc, #36]	@ (8006208 <vPortFree+0xc0>)
 80061e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061e6:	6938      	ldr	r0, [r7, #16]
 80061e8:	f000 f874 	bl	80062d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80061ec:	4b07      	ldr	r3, [pc, #28]	@ (800620c <vPortFree+0xc4>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3301      	adds	r3, #1
 80061f2:	4a06      	ldr	r2, [pc, #24]	@ (800620c <vPortFree+0xc4>)
 80061f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80061f6:	f7fe fc75 	bl	8004ae4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061fa:	bf00      	nop
 80061fc:	3718      	adds	r7, #24
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	20001d2c 	.word	0x20001d2c
 8006208:	20001d1c 	.word	0x20001d1c
 800620c:	20001d28 	.word	0x20001d28

08006210 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006216:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800621a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800621c:	4b27      	ldr	r3, [pc, #156]	@ (80062bc <prvHeapInit+0xac>)
 800621e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f003 0307 	and.w	r3, r3, #7
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00c      	beq.n	8006244 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3307      	adds	r3, #7
 800622e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f023 0307 	bic.w	r3, r3, #7
 8006236:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	4a1f      	ldr	r2, [pc, #124]	@ (80062bc <prvHeapInit+0xac>)
 8006240:	4413      	add	r3, r2
 8006242:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006248:	4a1d      	ldr	r2, [pc, #116]	@ (80062c0 <prvHeapInit+0xb0>)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800624e:	4b1c      	ldr	r3, [pc, #112]	@ (80062c0 <prvHeapInit+0xb0>)
 8006250:	2200      	movs	r2, #0
 8006252:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	4413      	add	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800625c:	2208      	movs	r2, #8
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	1a9b      	subs	r3, r3, r2
 8006262:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 0307 	bic.w	r3, r3, #7
 800626a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4a15      	ldr	r2, [pc, #84]	@ (80062c4 <prvHeapInit+0xb4>)
 8006270:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006272:	4b14      	ldr	r3, [pc, #80]	@ (80062c4 <prvHeapInit+0xb4>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2200      	movs	r2, #0
 8006278:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800627a:	4b12      	ldr	r3, [pc, #72]	@ (80062c4 <prvHeapInit+0xb4>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2200      	movs	r2, #0
 8006280:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	1ad2      	subs	r2, r2, r3
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006290:	4b0c      	ldr	r3, [pc, #48]	@ (80062c4 <prvHeapInit+0xb4>)
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	4a0a      	ldr	r2, [pc, #40]	@ (80062c8 <prvHeapInit+0xb8>)
 800629e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	4a09      	ldr	r2, [pc, #36]	@ (80062cc <prvHeapInit+0xbc>)
 80062a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062a8:	4b09      	ldr	r3, [pc, #36]	@ (80062d0 <prvHeapInit+0xc0>)
 80062aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80062ae:	601a      	str	r2, [r3, #0]
}
 80062b0:	bf00      	nop
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr
 80062bc:	20000f00 	.word	0x20000f00
 80062c0:	20001d10 	.word	0x20001d10
 80062c4:	20001d18 	.word	0x20001d18
 80062c8:	20001d20 	.word	0x20001d20
 80062cc:	20001d1c 	.word	0x20001d1c
 80062d0:	20001d2c 	.word	0x20001d2c

080062d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062dc:	4b28      	ldr	r3, [pc, #160]	@ (8006380 <prvInsertBlockIntoFreeList+0xac>)
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	e002      	b.n	80062e8 <prvInsertBlockIntoFreeList+0x14>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d8f7      	bhi.n	80062e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	4413      	add	r3, r2
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	429a      	cmp	r2, r3
 8006302:	d108      	bne.n	8006316 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	441a      	add	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	441a      	add	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	429a      	cmp	r2, r3
 8006328:	d118      	bne.n	800635c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	4b15      	ldr	r3, [pc, #84]	@ (8006384 <prvInsertBlockIntoFreeList+0xb0>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	429a      	cmp	r2, r3
 8006334:	d00d      	beq.n	8006352 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685a      	ldr	r2, [r3, #4]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	441a      	add	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	e008      	b.n	8006364 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006352:	4b0c      	ldr	r3, [pc, #48]	@ (8006384 <prvInsertBlockIntoFreeList+0xb0>)
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	601a      	str	r2, [r3, #0]
 800635a:	e003      	b.n	8006364 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	429a      	cmp	r2, r3
 800636a:	d002      	beq.n	8006372 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006372:	bf00      	nop
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	20001d10 	.word	0x20001d10
 8006384:	20001d18 	.word	0x20001d18

08006388 <siprintf>:
 8006388:	b40e      	push	{r1, r2, r3}
 800638a:	b500      	push	{lr}
 800638c:	b09c      	sub	sp, #112	@ 0x70
 800638e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006390:	9002      	str	r0, [sp, #8]
 8006392:	9006      	str	r0, [sp, #24]
 8006394:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006398:	4809      	ldr	r0, [pc, #36]	@ (80063c0 <siprintf+0x38>)
 800639a:	9107      	str	r1, [sp, #28]
 800639c:	9104      	str	r1, [sp, #16]
 800639e:	4909      	ldr	r1, [pc, #36]	@ (80063c4 <siprintf+0x3c>)
 80063a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80063a4:	9105      	str	r1, [sp, #20]
 80063a6:	6800      	ldr	r0, [r0, #0]
 80063a8:	9301      	str	r3, [sp, #4]
 80063aa:	a902      	add	r1, sp, #8
 80063ac:	f000 f9a2 	bl	80066f4 <_svfiprintf_r>
 80063b0:	9b02      	ldr	r3, [sp, #8]
 80063b2:	2200      	movs	r2, #0
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	b01c      	add	sp, #112	@ 0x70
 80063b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80063bc:	b003      	add	sp, #12
 80063be:	4770      	bx	lr
 80063c0:	20000010 	.word	0x20000010
 80063c4:	ffff0208 	.word	0xffff0208

080063c8 <memset>:
 80063c8:	4402      	add	r2, r0
 80063ca:	4603      	mov	r3, r0
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d100      	bne.n	80063d2 <memset+0xa>
 80063d0:	4770      	bx	lr
 80063d2:	f803 1b01 	strb.w	r1, [r3], #1
 80063d6:	e7f9      	b.n	80063cc <memset+0x4>

080063d8 <__errno>:
 80063d8:	4b01      	ldr	r3, [pc, #4]	@ (80063e0 <__errno+0x8>)
 80063da:	6818      	ldr	r0, [r3, #0]
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	20000010 	.word	0x20000010

080063e4 <__libc_init_array>:
 80063e4:	b570      	push	{r4, r5, r6, lr}
 80063e6:	4d0d      	ldr	r5, [pc, #52]	@ (800641c <__libc_init_array+0x38>)
 80063e8:	4c0d      	ldr	r4, [pc, #52]	@ (8006420 <__libc_init_array+0x3c>)
 80063ea:	1b64      	subs	r4, r4, r5
 80063ec:	10a4      	asrs	r4, r4, #2
 80063ee:	2600      	movs	r6, #0
 80063f0:	42a6      	cmp	r6, r4
 80063f2:	d109      	bne.n	8006408 <__libc_init_array+0x24>
 80063f4:	4d0b      	ldr	r5, [pc, #44]	@ (8006424 <__libc_init_array+0x40>)
 80063f6:	4c0c      	ldr	r4, [pc, #48]	@ (8006428 <__libc_init_array+0x44>)
 80063f8:	f000 fc66 	bl	8006cc8 <_init>
 80063fc:	1b64      	subs	r4, r4, r5
 80063fe:	10a4      	asrs	r4, r4, #2
 8006400:	2600      	movs	r6, #0
 8006402:	42a6      	cmp	r6, r4
 8006404:	d105      	bne.n	8006412 <__libc_init_array+0x2e>
 8006406:	bd70      	pop	{r4, r5, r6, pc}
 8006408:	f855 3b04 	ldr.w	r3, [r5], #4
 800640c:	4798      	blx	r3
 800640e:	3601      	adds	r6, #1
 8006410:	e7ee      	b.n	80063f0 <__libc_init_array+0xc>
 8006412:	f855 3b04 	ldr.w	r3, [r5], #4
 8006416:	4798      	blx	r3
 8006418:	3601      	adds	r6, #1
 800641a:	e7f2      	b.n	8006402 <__libc_init_array+0x1e>
 800641c:	08006e7c 	.word	0x08006e7c
 8006420:	08006e7c 	.word	0x08006e7c
 8006424:	08006e7c 	.word	0x08006e7c
 8006428:	08006e80 	.word	0x08006e80

0800642c <__retarget_lock_acquire_recursive>:
 800642c:	4770      	bx	lr

0800642e <__retarget_lock_release_recursive>:
 800642e:	4770      	bx	lr

08006430 <memcpy>:
 8006430:	440a      	add	r2, r1
 8006432:	4291      	cmp	r1, r2
 8006434:	f100 33ff 	add.w	r3, r0, #4294967295
 8006438:	d100      	bne.n	800643c <memcpy+0xc>
 800643a:	4770      	bx	lr
 800643c:	b510      	push	{r4, lr}
 800643e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006442:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006446:	4291      	cmp	r1, r2
 8006448:	d1f9      	bne.n	800643e <memcpy+0xe>
 800644a:	bd10      	pop	{r4, pc}

0800644c <_free_r>:
 800644c:	b538      	push	{r3, r4, r5, lr}
 800644e:	4605      	mov	r5, r0
 8006450:	2900      	cmp	r1, #0
 8006452:	d041      	beq.n	80064d8 <_free_r+0x8c>
 8006454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006458:	1f0c      	subs	r4, r1, #4
 800645a:	2b00      	cmp	r3, #0
 800645c:	bfb8      	it	lt
 800645e:	18e4      	addlt	r4, r4, r3
 8006460:	f000 f8e0 	bl	8006624 <__malloc_lock>
 8006464:	4a1d      	ldr	r2, [pc, #116]	@ (80064dc <_free_r+0x90>)
 8006466:	6813      	ldr	r3, [r2, #0]
 8006468:	b933      	cbnz	r3, 8006478 <_free_r+0x2c>
 800646a:	6063      	str	r3, [r4, #4]
 800646c:	6014      	str	r4, [r2, #0]
 800646e:	4628      	mov	r0, r5
 8006470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006474:	f000 b8dc 	b.w	8006630 <__malloc_unlock>
 8006478:	42a3      	cmp	r3, r4
 800647a:	d908      	bls.n	800648e <_free_r+0x42>
 800647c:	6820      	ldr	r0, [r4, #0]
 800647e:	1821      	adds	r1, r4, r0
 8006480:	428b      	cmp	r3, r1
 8006482:	bf01      	itttt	eq
 8006484:	6819      	ldreq	r1, [r3, #0]
 8006486:	685b      	ldreq	r3, [r3, #4]
 8006488:	1809      	addeq	r1, r1, r0
 800648a:	6021      	streq	r1, [r4, #0]
 800648c:	e7ed      	b.n	800646a <_free_r+0x1e>
 800648e:	461a      	mov	r2, r3
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	b10b      	cbz	r3, 8006498 <_free_r+0x4c>
 8006494:	42a3      	cmp	r3, r4
 8006496:	d9fa      	bls.n	800648e <_free_r+0x42>
 8006498:	6811      	ldr	r1, [r2, #0]
 800649a:	1850      	adds	r0, r2, r1
 800649c:	42a0      	cmp	r0, r4
 800649e:	d10b      	bne.n	80064b8 <_free_r+0x6c>
 80064a0:	6820      	ldr	r0, [r4, #0]
 80064a2:	4401      	add	r1, r0
 80064a4:	1850      	adds	r0, r2, r1
 80064a6:	4283      	cmp	r3, r0
 80064a8:	6011      	str	r1, [r2, #0]
 80064aa:	d1e0      	bne.n	800646e <_free_r+0x22>
 80064ac:	6818      	ldr	r0, [r3, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	6053      	str	r3, [r2, #4]
 80064b2:	4408      	add	r0, r1
 80064b4:	6010      	str	r0, [r2, #0]
 80064b6:	e7da      	b.n	800646e <_free_r+0x22>
 80064b8:	d902      	bls.n	80064c0 <_free_r+0x74>
 80064ba:	230c      	movs	r3, #12
 80064bc:	602b      	str	r3, [r5, #0]
 80064be:	e7d6      	b.n	800646e <_free_r+0x22>
 80064c0:	6820      	ldr	r0, [r4, #0]
 80064c2:	1821      	adds	r1, r4, r0
 80064c4:	428b      	cmp	r3, r1
 80064c6:	bf04      	itt	eq
 80064c8:	6819      	ldreq	r1, [r3, #0]
 80064ca:	685b      	ldreq	r3, [r3, #4]
 80064cc:	6063      	str	r3, [r4, #4]
 80064ce:	bf04      	itt	eq
 80064d0:	1809      	addeq	r1, r1, r0
 80064d2:	6021      	streq	r1, [r4, #0]
 80064d4:	6054      	str	r4, [r2, #4]
 80064d6:	e7ca      	b.n	800646e <_free_r+0x22>
 80064d8:	bd38      	pop	{r3, r4, r5, pc}
 80064da:	bf00      	nop
 80064dc:	20001e74 	.word	0x20001e74

080064e0 <sbrk_aligned>:
 80064e0:	b570      	push	{r4, r5, r6, lr}
 80064e2:	4e0f      	ldr	r6, [pc, #60]	@ (8006520 <sbrk_aligned+0x40>)
 80064e4:	460c      	mov	r4, r1
 80064e6:	6831      	ldr	r1, [r6, #0]
 80064e8:	4605      	mov	r5, r0
 80064ea:	b911      	cbnz	r1, 80064f2 <sbrk_aligned+0x12>
 80064ec:	f000 fba6 	bl	8006c3c <_sbrk_r>
 80064f0:	6030      	str	r0, [r6, #0]
 80064f2:	4621      	mov	r1, r4
 80064f4:	4628      	mov	r0, r5
 80064f6:	f000 fba1 	bl	8006c3c <_sbrk_r>
 80064fa:	1c43      	adds	r3, r0, #1
 80064fc:	d103      	bne.n	8006506 <sbrk_aligned+0x26>
 80064fe:	f04f 34ff 	mov.w	r4, #4294967295
 8006502:	4620      	mov	r0, r4
 8006504:	bd70      	pop	{r4, r5, r6, pc}
 8006506:	1cc4      	adds	r4, r0, #3
 8006508:	f024 0403 	bic.w	r4, r4, #3
 800650c:	42a0      	cmp	r0, r4
 800650e:	d0f8      	beq.n	8006502 <sbrk_aligned+0x22>
 8006510:	1a21      	subs	r1, r4, r0
 8006512:	4628      	mov	r0, r5
 8006514:	f000 fb92 	bl	8006c3c <_sbrk_r>
 8006518:	3001      	adds	r0, #1
 800651a:	d1f2      	bne.n	8006502 <sbrk_aligned+0x22>
 800651c:	e7ef      	b.n	80064fe <sbrk_aligned+0x1e>
 800651e:	bf00      	nop
 8006520:	20001e70 	.word	0x20001e70

08006524 <_malloc_r>:
 8006524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006528:	1ccd      	adds	r5, r1, #3
 800652a:	f025 0503 	bic.w	r5, r5, #3
 800652e:	3508      	adds	r5, #8
 8006530:	2d0c      	cmp	r5, #12
 8006532:	bf38      	it	cc
 8006534:	250c      	movcc	r5, #12
 8006536:	2d00      	cmp	r5, #0
 8006538:	4606      	mov	r6, r0
 800653a:	db01      	blt.n	8006540 <_malloc_r+0x1c>
 800653c:	42a9      	cmp	r1, r5
 800653e:	d904      	bls.n	800654a <_malloc_r+0x26>
 8006540:	230c      	movs	r3, #12
 8006542:	6033      	str	r3, [r6, #0]
 8006544:	2000      	movs	r0, #0
 8006546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800654a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006620 <_malloc_r+0xfc>
 800654e:	f000 f869 	bl	8006624 <__malloc_lock>
 8006552:	f8d8 3000 	ldr.w	r3, [r8]
 8006556:	461c      	mov	r4, r3
 8006558:	bb44      	cbnz	r4, 80065ac <_malloc_r+0x88>
 800655a:	4629      	mov	r1, r5
 800655c:	4630      	mov	r0, r6
 800655e:	f7ff ffbf 	bl	80064e0 <sbrk_aligned>
 8006562:	1c43      	adds	r3, r0, #1
 8006564:	4604      	mov	r4, r0
 8006566:	d158      	bne.n	800661a <_malloc_r+0xf6>
 8006568:	f8d8 4000 	ldr.w	r4, [r8]
 800656c:	4627      	mov	r7, r4
 800656e:	2f00      	cmp	r7, #0
 8006570:	d143      	bne.n	80065fa <_malloc_r+0xd6>
 8006572:	2c00      	cmp	r4, #0
 8006574:	d04b      	beq.n	800660e <_malloc_r+0xea>
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	4639      	mov	r1, r7
 800657a:	4630      	mov	r0, r6
 800657c:	eb04 0903 	add.w	r9, r4, r3
 8006580:	f000 fb5c 	bl	8006c3c <_sbrk_r>
 8006584:	4581      	cmp	r9, r0
 8006586:	d142      	bne.n	800660e <_malloc_r+0xea>
 8006588:	6821      	ldr	r1, [r4, #0]
 800658a:	1a6d      	subs	r5, r5, r1
 800658c:	4629      	mov	r1, r5
 800658e:	4630      	mov	r0, r6
 8006590:	f7ff ffa6 	bl	80064e0 <sbrk_aligned>
 8006594:	3001      	adds	r0, #1
 8006596:	d03a      	beq.n	800660e <_malloc_r+0xea>
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	442b      	add	r3, r5
 800659c:	6023      	str	r3, [r4, #0]
 800659e:	f8d8 3000 	ldr.w	r3, [r8]
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	bb62      	cbnz	r2, 8006600 <_malloc_r+0xdc>
 80065a6:	f8c8 7000 	str.w	r7, [r8]
 80065aa:	e00f      	b.n	80065cc <_malloc_r+0xa8>
 80065ac:	6822      	ldr	r2, [r4, #0]
 80065ae:	1b52      	subs	r2, r2, r5
 80065b0:	d420      	bmi.n	80065f4 <_malloc_r+0xd0>
 80065b2:	2a0b      	cmp	r2, #11
 80065b4:	d917      	bls.n	80065e6 <_malloc_r+0xc2>
 80065b6:	1961      	adds	r1, r4, r5
 80065b8:	42a3      	cmp	r3, r4
 80065ba:	6025      	str	r5, [r4, #0]
 80065bc:	bf18      	it	ne
 80065be:	6059      	strne	r1, [r3, #4]
 80065c0:	6863      	ldr	r3, [r4, #4]
 80065c2:	bf08      	it	eq
 80065c4:	f8c8 1000 	streq.w	r1, [r8]
 80065c8:	5162      	str	r2, [r4, r5]
 80065ca:	604b      	str	r3, [r1, #4]
 80065cc:	4630      	mov	r0, r6
 80065ce:	f000 f82f 	bl	8006630 <__malloc_unlock>
 80065d2:	f104 000b 	add.w	r0, r4, #11
 80065d6:	1d23      	adds	r3, r4, #4
 80065d8:	f020 0007 	bic.w	r0, r0, #7
 80065dc:	1ac2      	subs	r2, r0, r3
 80065de:	bf1c      	itt	ne
 80065e0:	1a1b      	subne	r3, r3, r0
 80065e2:	50a3      	strne	r3, [r4, r2]
 80065e4:	e7af      	b.n	8006546 <_malloc_r+0x22>
 80065e6:	6862      	ldr	r2, [r4, #4]
 80065e8:	42a3      	cmp	r3, r4
 80065ea:	bf0c      	ite	eq
 80065ec:	f8c8 2000 	streq.w	r2, [r8]
 80065f0:	605a      	strne	r2, [r3, #4]
 80065f2:	e7eb      	b.n	80065cc <_malloc_r+0xa8>
 80065f4:	4623      	mov	r3, r4
 80065f6:	6864      	ldr	r4, [r4, #4]
 80065f8:	e7ae      	b.n	8006558 <_malloc_r+0x34>
 80065fa:	463c      	mov	r4, r7
 80065fc:	687f      	ldr	r7, [r7, #4]
 80065fe:	e7b6      	b.n	800656e <_malloc_r+0x4a>
 8006600:	461a      	mov	r2, r3
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	42a3      	cmp	r3, r4
 8006606:	d1fb      	bne.n	8006600 <_malloc_r+0xdc>
 8006608:	2300      	movs	r3, #0
 800660a:	6053      	str	r3, [r2, #4]
 800660c:	e7de      	b.n	80065cc <_malloc_r+0xa8>
 800660e:	230c      	movs	r3, #12
 8006610:	6033      	str	r3, [r6, #0]
 8006612:	4630      	mov	r0, r6
 8006614:	f000 f80c 	bl	8006630 <__malloc_unlock>
 8006618:	e794      	b.n	8006544 <_malloc_r+0x20>
 800661a:	6005      	str	r5, [r0, #0]
 800661c:	e7d6      	b.n	80065cc <_malloc_r+0xa8>
 800661e:	bf00      	nop
 8006620:	20001e74 	.word	0x20001e74

08006624 <__malloc_lock>:
 8006624:	4801      	ldr	r0, [pc, #4]	@ (800662c <__malloc_lock+0x8>)
 8006626:	f7ff bf01 	b.w	800642c <__retarget_lock_acquire_recursive>
 800662a:	bf00      	nop
 800662c:	20001e6c 	.word	0x20001e6c

08006630 <__malloc_unlock>:
 8006630:	4801      	ldr	r0, [pc, #4]	@ (8006638 <__malloc_unlock+0x8>)
 8006632:	f7ff befc 	b.w	800642e <__retarget_lock_release_recursive>
 8006636:	bf00      	nop
 8006638:	20001e6c 	.word	0x20001e6c

0800663c <__ssputs_r>:
 800663c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006640:	688e      	ldr	r6, [r1, #8]
 8006642:	461f      	mov	r7, r3
 8006644:	42be      	cmp	r6, r7
 8006646:	680b      	ldr	r3, [r1, #0]
 8006648:	4682      	mov	sl, r0
 800664a:	460c      	mov	r4, r1
 800664c:	4690      	mov	r8, r2
 800664e:	d82d      	bhi.n	80066ac <__ssputs_r+0x70>
 8006650:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006654:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006658:	d026      	beq.n	80066a8 <__ssputs_r+0x6c>
 800665a:	6965      	ldr	r5, [r4, #20]
 800665c:	6909      	ldr	r1, [r1, #16]
 800665e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006662:	eba3 0901 	sub.w	r9, r3, r1
 8006666:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800666a:	1c7b      	adds	r3, r7, #1
 800666c:	444b      	add	r3, r9
 800666e:	106d      	asrs	r5, r5, #1
 8006670:	429d      	cmp	r5, r3
 8006672:	bf38      	it	cc
 8006674:	461d      	movcc	r5, r3
 8006676:	0553      	lsls	r3, r2, #21
 8006678:	d527      	bpl.n	80066ca <__ssputs_r+0x8e>
 800667a:	4629      	mov	r1, r5
 800667c:	f7ff ff52 	bl	8006524 <_malloc_r>
 8006680:	4606      	mov	r6, r0
 8006682:	b360      	cbz	r0, 80066de <__ssputs_r+0xa2>
 8006684:	6921      	ldr	r1, [r4, #16]
 8006686:	464a      	mov	r2, r9
 8006688:	f7ff fed2 	bl	8006430 <memcpy>
 800668c:	89a3      	ldrh	r3, [r4, #12]
 800668e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006696:	81a3      	strh	r3, [r4, #12]
 8006698:	6126      	str	r6, [r4, #16]
 800669a:	6165      	str	r5, [r4, #20]
 800669c:	444e      	add	r6, r9
 800669e:	eba5 0509 	sub.w	r5, r5, r9
 80066a2:	6026      	str	r6, [r4, #0]
 80066a4:	60a5      	str	r5, [r4, #8]
 80066a6:	463e      	mov	r6, r7
 80066a8:	42be      	cmp	r6, r7
 80066aa:	d900      	bls.n	80066ae <__ssputs_r+0x72>
 80066ac:	463e      	mov	r6, r7
 80066ae:	6820      	ldr	r0, [r4, #0]
 80066b0:	4632      	mov	r2, r6
 80066b2:	4641      	mov	r1, r8
 80066b4:	f000 faa8 	bl	8006c08 <memmove>
 80066b8:	68a3      	ldr	r3, [r4, #8]
 80066ba:	1b9b      	subs	r3, r3, r6
 80066bc:	60a3      	str	r3, [r4, #8]
 80066be:	6823      	ldr	r3, [r4, #0]
 80066c0:	4433      	add	r3, r6
 80066c2:	6023      	str	r3, [r4, #0]
 80066c4:	2000      	movs	r0, #0
 80066c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ca:	462a      	mov	r2, r5
 80066cc:	f000 fac6 	bl	8006c5c <_realloc_r>
 80066d0:	4606      	mov	r6, r0
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d1e0      	bne.n	8006698 <__ssputs_r+0x5c>
 80066d6:	6921      	ldr	r1, [r4, #16]
 80066d8:	4650      	mov	r0, sl
 80066da:	f7ff feb7 	bl	800644c <_free_r>
 80066de:	230c      	movs	r3, #12
 80066e0:	f8ca 3000 	str.w	r3, [sl]
 80066e4:	89a3      	ldrh	r3, [r4, #12]
 80066e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066ea:	81a3      	strh	r3, [r4, #12]
 80066ec:	f04f 30ff 	mov.w	r0, #4294967295
 80066f0:	e7e9      	b.n	80066c6 <__ssputs_r+0x8a>
	...

080066f4 <_svfiprintf_r>:
 80066f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f8:	4698      	mov	r8, r3
 80066fa:	898b      	ldrh	r3, [r1, #12]
 80066fc:	061b      	lsls	r3, r3, #24
 80066fe:	b09d      	sub	sp, #116	@ 0x74
 8006700:	4607      	mov	r7, r0
 8006702:	460d      	mov	r5, r1
 8006704:	4614      	mov	r4, r2
 8006706:	d510      	bpl.n	800672a <_svfiprintf_r+0x36>
 8006708:	690b      	ldr	r3, [r1, #16]
 800670a:	b973      	cbnz	r3, 800672a <_svfiprintf_r+0x36>
 800670c:	2140      	movs	r1, #64	@ 0x40
 800670e:	f7ff ff09 	bl	8006524 <_malloc_r>
 8006712:	6028      	str	r0, [r5, #0]
 8006714:	6128      	str	r0, [r5, #16]
 8006716:	b930      	cbnz	r0, 8006726 <_svfiprintf_r+0x32>
 8006718:	230c      	movs	r3, #12
 800671a:	603b      	str	r3, [r7, #0]
 800671c:	f04f 30ff 	mov.w	r0, #4294967295
 8006720:	b01d      	add	sp, #116	@ 0x74
 8006722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006726:	2340      	movs	r3, #64	@ 0x40
 8006728:	616b      	str	r3, [r5, #20]
 800672a:	2300      	movs	r3, #0
 800672c:	9309      	str	r3, [sp, #36]	@ 0x24
 800672e:	2320      	movs	r3, #32
 8006730:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006734:	f8cd 800c 	str.w	r8, [sp, #12]
 8006738:	2330      	movs	r3, #48	@ 0x30
 800673a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80068d8 <_svfiprintf_r+0x1e4>
 800673e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006742:	f04f 0901 	mov.w	r9, #1
 8006746:	4623      	mov	r3, r4
 8006748:	469a      	mov	sl, r3
 800674a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800674e:	b10a      	cbz	r2, 8006754 <_svfiprintf_r+0x60>
 8006750:	2a25      	cmp	r2, #37	@ 0x25
 8006752:	d1f9      	bne.n	8006748 <_svfiprintf_r+0x54>
 8006754:	ebba 0b04 	subs.w	fp, sl, r4
 8006758:	d00b      	beq.n	8006772 <_svfiprintf_r+0x7e>
 800675a:	465b      	mov	r3, fp
 800675c:	4622      	mov	r2, r4
 800675e:	4629      	mov	r1, r5
 8006760:	4638      	mov	r0, r7
 8006762:	f7ff ff6b 	bl	800663c <__ssputs_r>
 8006766:	3001      	adds	r0, #1
 8006768:	f000 80a7 	beq.w	80068ba <_svfiprintf_r+0x1c6>
 800676c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800676e:	445a      	add	r2, fp
 8006770:	9209      	str	r2, [sp, #36]	@ 0x24
 8006772:	f89a 3000 	ldrb.w	r3, [sl]
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 809f 	beq.w	80068ba <_svfiprintf_r+0x1c6>
 800677c:	2300      	movs	r3, #0
 800677e:	f04f 32ff 	mov.w	r2, #4294967295
 8006782:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006786:	f10a 0a01 	add.w	sl, sl, #1
 800678a:	9304      	str	r3, [sp, #16]
 800678c:	9307      	str	r3, [sp, #28]
 800678e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006792:	931a      	str	r3, [sp, #104]	@ 0x68
 8006794:	4654      	mov	r4, sl
 8006796:	2205      	movs	r2, #5
 8006798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800679c:	484e      	ldr	r0, [pc, #312]	@ (80068d8 <_svfiprintf_r+0x1e4>)
 800679e:	f7f9 fd1f 	bl	80001e0 <memchr>
 80067a2:	9a04      	ldr	r2, [sp, #16]
 80067a4:	b9d8      	cbnz	r0, 80067de <_svfiprintf_r+0xea>
 80067a6:	06d0      	lsls	r0, r2, #27
 80067a8:	bf44      	itt	mi
 80067aa:	2320      	movmi	r3, #32
 80067ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067b0:	0711      	lsls	r1, r2, #28
 80067b2:	bf44      	itt	mi
 80067b4:	232b      	movmi	r3, #43	@ 0x2b
 80067b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067ba:	f89a 3000 	ldrb.w	r3, [sl]
 80067be:	2b2a      	cmp	r3, #42	@ 0x2a
 80067c0:	d015      	beq.n	80067ee <_svfiprintf_r+0xfa>
 80067c2:	9a07      	ldr	r2, [sp, #28]
 80067c4:	4654      	mov	r4, sl
 80067c6:	2000      	movs	r0, #0
 80067c8:	f04f 0c0a 	mov.w	ip, #10
 80067cc:	4621      	mov	r1, r4
 80067ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067d2:	3b30      	subs	r3, #48	@ 0x30
 80067d4:	2b09      	cmp	r3, #9
 80067d6:	d94b      	bls.n	8006870 <_svfiprintf_r+0x17c>
 80067d8:	b1b0      	cbz	r0, 8006808 <_svfiprintf_r+0x114>
 80067da:	9207      	str	r2, [sp, #28]
 80067dc:	e014      	b.n	8006808 <_svfiprintf_r+0x114>
 80067de:	eba0 0308 	sub.w	r3, r0, r8
 80067e2:	fa09 f303 	lsl.w	r3, r9, r3
 80067e6:	4313      	orrs	r3, r2
 80067e8:	9304      	str	r3, [sp, #16]
 80067ea:	46a2      	mov	sl, r4
 80067ec:	e7d2      	b.n	8006794 <_svfiprintf_r+0xa0>
 80067ee:	9b03      	ldr	r3, [sp, #12]
 80067f0:	1d19      	adds	r1, r3, #4
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	9103      	str	r1, [sp, #12]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	bfbb      	ittet	lt
 80067fa:	425b      	neglt	r3, r3
 80067fc:	f042 0202 	orrlt.w	r2, r2, #2
 8006800:	9307      	strge	r3, [sp, #28]
 8006802:	9307      	strlt	r3, [sp, #28]
 8006804:	bfb8      	it	lt
 8006806:	9204      	strlt	r2, [sp, #16]
 8006808:	7823      	ldrb	r3, [r4, #0]
 800680a:	2b2e      	cmp	r3, #46	@ 0x2e
 800680c:	d10a      	bne.n	8006824 <_svfiprintf_r+0x130>
 800680e:	7863      	ldrb	r3, [r4, #1]
 8006810:	2b2a      	cmp	r3, #42	@ 0x2a
 8006812:	d132      	bne.n	800687a <_svfiprintf_r+0x186>
 8006814:	9b03      	ldr	r3, [sp, #12]
 8006816:	1d1a      	adds	r2, r3, #4
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	9203      	str	r2, [sp, #12]
 800681c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006820:	3402      	adds	r4, #2
 8006822:	9305      	str	r3, [sp, #20]
 8006824:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80068e8 <_svfiprintf_r+0x1f4>
 8006828:	7821      	ldrb	r1, [r4, #0]
 800682a:	2203      	movs	r2, #3
 800682c:	4650      	mov	r0, sl
 800682e:	f7f9 fcd7 	bl	80001e0 <memchr>
 8006832:	b138      	cbz	r0, 8006844 <_svfiprintf_r+0x150>
 8006834:	9b04      	ldr	r3, [sp, #16]
 8006836:	eba0 000a 	sub.w	r0, r0, sl
 800683a:	2240      	movs	r2, #64	@ 0x40
 800683c:	4082      	lsls	r2, r0
 800683e:	4313      	orrs	r3, r2
 8006840:	3401      	adds	r4, #1
 8006842:	9304      	str	r3, [sp, #16]
 8006844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006848:	4824      	ldr	r0, [pc, #144]	@ (80068dc <_svfiprintf_r+0x1e8>)
 800684a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800684e:	2206      	movs	r2, #6
 8006850:	f7f9 fcc6 	bl	80001e0 <memchr>
 8006854:	2800      	cmp	r0, #0
 8006856:	d036      	beq.n	80068c6 <_svfiprintf_r+0x1d2>
 8006858:	4b21      	ldr	r3, [pc, #132]	@ (80068e0 <_svfiprintf_r+0x1ec>)
 800685a:	bb1b      	cbnz	r3, 80068a4 <_svfiprintf_r+0x1b0>
 800685c:	9b03      	ldr	r3, [sp, #12]
 800685e:	3307      	adds	r3, #7
 8006860:	f023 0307 	bic.w	r3, r3, #7
 8006864:	3308      	adds	r3, #8
 8006866:	9303      	str	r3, [sp, #12]
 8006868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800686a:	4433      	add	r3, r6
 800686c:	9309      	str	r3, [sp, #36]	@ 0x24
 800686e:	e76a      	b.n	8006746 <_svfiprintf_r+0x52>
 8006870:	fb0c 3202 	mla	r2, ip, r2, r3
 8006874:	460c      	mov	r4, r1
 8006876:	2001      	movs	r0, #1
 8006878:	e7a8      	b.n	80067cc <_svfiprintf_r+0xd8>
 800687a:	2300      	movs	r3, #0
 800687c:	3401      	adds	r4, #1
 800687e:	9305      	str	r3, [sp, #20]
 8006880:	4619      	mov	r1, r3
 8006882:	f04f 0c0a 	mov.w	ip, #10
 8006886:	4620      	mov	r0, r4
 8006888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800688c:	3a30      	subs	r2, #48	@ 0x30
 800688e:	2a09      	cmp	r2, #9
 8006890:	d903      	bls.n	800689a <_svfiprintf_r+0x1a6>
 8006892:	2b00      	cmp	r3, #0
 8006894:	d0c6      	beq.n	8006824 <_svfiprintf_r+0x130>
 8006896:	9105      	str	r1, [sp, #20]
 8006898:	e7c4      	b.n	8006824 <_svfiprintf_r+0x130>
 800689a:	fb0c 2101 	mla	r1, ip, r1, r2
 800689e:	4604      	mov	r4, r0
 80068a0:	2301      	movs	r3, #1
 80068a2:	e7f0      	b.n	8006886 <_svfiprintf_r+0x192>
 80068a4:	ab03      	add	r3, sp, #12
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	462a      	mov	r2, r5
 80068aa:	4b0e      	ldr	r3, [pc, #56]	@ (80068e4 <_svfiprintf_r+0x1f0>)
 80068ac:	a904      	add	r1, sp, #16
 80068ae:	4638      	mov	r0, r7
 80068b0:	f3af 8000 	nop.w
 80068b4:	1c42      	adds	r2, r0, #1
 80068b6:	4606      	mov	r6, r0
 80068b8:	d1d6      	bne.n	8006868 <_svfiprintf_r+0x174>
 80068ba:	89ab      	ldrh	r3, [r5, #12]
 80068bc:	065b      	lsls	r3, r3, #25
 80068be:	f53f af2d 	bmi.w	800671c <_svfiprintf_r+0x28>
 80068c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80068c4:	e72c      	b.n	8006720 <_svfiprintf_r+0x2c>
 80068c6:	ab03      	add	r3, sp, #12
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	462a      	mov	r2, r5
 80068cc:	4b05      	ldr	r3, [pc, #20]	@ (80068e4 <_svfiprintf_r+0x1f0>)
 80068ce:	a904      	add	r1, sp, #16
 80068d0:	4638      	mov	r0, r7
 80068d2:	f000 f879 	bl	80069c8 <_printf_i>
 80068d6:	e7ed      	b.n	80068b4 <_svfiprintf_r+0x1c0>
 80068d8:	08006e40 	.word	0x08006e40
 80068dc:	08006e4a 	.word	0x08006e4a
 80068e0:	00000000 	.word	0x00000000
 80068e4:	0800663d 	.word	0x0800663d
 80068e8:	08006e46 	.word	0x08006e46

080068ec <_printf_common>:
 80068ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068f0:	4616      	mov	r6, r2
 80068f2:	4698      	mov	r8, r3
 80068f4:	688a      	ldr	r2, [r1, #8]
 80068f6:	690b      	ldr	r3, [r1, #16]
 80068f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068fc:	4293      	cmp	r3, r2
 80068fe:	bfb8      	it	lt
 8006900:	4613      	movlt	r3, r2
 8006902:	6033      	str	r3, [r6, #0]
 8006904:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006908:	4607      	mov	r7, r0
 800690a:	460c      	mov	r4, r1
 800690c:	b10a      	cbz	r2, 8006912 <_printf_common+0x26>
 800690e:	3301      	adds	r3, #1
 8006910:	6033      	str	r3, [r6, #0]
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	0699      	lsls	r1, r3, #26
 8006916:	bf42      	ittt	mi
 8006918:	6833      	ldrmi	r3, [r6, #0]
 800691a:	3302      	addmi	r3, #2
 800691c:	6033      	strmi	r3, [r6, #0]
 800691e:	6825      	ldr	r5, [r4, #0]
 8006920:	f015 0506 	ands.w	r5, r5, #6
 8006924:	d106      	bne.n	8006934 <_printf_common+0x48>
 8006926:	f104 0a19 	add.w	sl, r4, #25
 800692a:	68e3      	ldr	r3, [r4, #12]
 800692c:	6832      	ldr	r2, [r6, #0]
 800692e:	1a9b      	subs	r3, r3, r2
 8006930:	42ab      	cmp	r3, r5
 8006932:	dc26      	bgt.n	8006982 <_printf_common+0x96>
 8006934:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006938:	6822      	ldr	r2, [r4, #0]
 800693a:	3b00      	subs	r3, #0
 800693c:	bf18      	it	ne
 800693e:	2301      	movne	r3, #1
 8006940:	0692      	lsls	r2, r2, #26
 8006942:	d42b      	bmi.n	800699c <_printf_common+0xb0>
 8006944:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006948:	4641      	mov	r1, r8
 800694a:	4638      	mov	r0, r7
 800694c:	47c8      	blx	r9
 800694e:	3001      	adds	r0, #1
 8006950:	d01e      	beq.n	8006990 <_printf_common+0xa4>
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	6922      	ldr	r2, [r4, #16]
 8006956:	f003 0306 	and.w	r3, r3, #6
 800695a:	2b04      	cmp	r3, #4
 800695c:	bf02      	ittt	eq
 800695e:	68e5      	ldreq	r5, [r4, #12]
 8006960:	6833      	ldreq	r3, [r6, #0]
 8006962:	1aed      	subeq	r5, r5, r3
 8006964:	68a3      	ldr	r3, [r4, #8]
 8006966:	bf0c      	ite	eq
 8006968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800696c:	2500      	movne	r5, #0
 800696e:	4293      	cmp	r3, r2
 8006970:	bfc4      	itt	gt
 8006972:	1a9b      	subgt	r3, r3, r2
 8006974:	18ed      	addgt	r5, r5, r3
 8006976:	2600      	movs	r6, #0
 8006978:	341a      	adds	r4, #26
 800697a:	42b5      	cmp	r5, r6
 800697c:	d11a      	bne.n	80069b4 <_printf_common+0xc8>
 800697e:	2000      	movs	r0, #0
 8006980:	e008      	b.n	8006994 <_printf_common+0xa8>
 8006982:	2301      	movs	r3, #1
 8006984:	4652      	mov	r2, sl
 8006986:	4641      	mov	r1, r8
 8006988:	4638      	mov	r0, r7
 800698a:	47c8      	blx	r9
 800698c:	3001      	adds	r0, #1
 800698e:	d103      	bne.n	8006998 <_printf_common+0xac>
 8006990:	f04f 30ff 	mov.w	r0, #4294967295
 8006994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006998:	3501      	adds	r5, #1
 800699a:	e7c6      	b.n	800692a <_printf_common+0x3e>
 800699c:	18e1      	adds	r1, r4, r3
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	2030      	movs	r0, #48	@ 0x30
 80069a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80069a6:	4422      	add	r2, r4
 80069a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80069ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80069b0:	3302      	adds	r3, #2
 80069b2:	e7c7      	b.n	8006944 <_printf_common+0x58>
 80069b4:	2301      	movs	r3, #1
 80069b6:	4622      	mov	r2, r4
 80069b8:	4641      	mov	r1, r8
 80069ba:	4638      	mov	r0, r7
 80069bc:	47c8      	blx	r9
 80069be:	3001      	adds	r0, #1
 80069c0:	d0e6      	beq.n	8006990 <_printf_common+0xa4>
 80069c2:	3601      	adds	r6, #1
 80069c4:	e7d9      	b.n	800697a <_printf_common+0x8e>
	...

080069c8 <_printf_i>:
 80069c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069cc:	7e0f      	ldrb	r7, [r1, #24]
 80069ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80069d0:	2f78      	cmp	r7, #120	@ 0x78
 80069d2:	4691      	mov	r9, r2
 80069d4:	4680      	mov	r8, r0
 80069d6:	460c      	mov	r4, r1
 80069d8:	469a      	mov	sl, r3
 80069da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80069de:	d807      	bhi.n	80069f0 <_printf_i+0x28>
 80069e0:	2f62      	cmp	r7, #98	@ 0x62
 80069e2:	d80a      	bhi.n	80069fa <_printf_i+0x32>
 80069e4:	2f00      	cmp	r7, #0
 80069e6:	f000 80d2 	beq.w	8006b8e <_printf_i+0x1c6>
 80069ea:	2f58      	cmp	r7, #88	@ 0x58
 80069ec:	f000 80b9 	beq.w	8006b62 <_printf_i+0x19a>
 80069f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80069f8:	e03a      	b.n	8006a70 <_printf_i+0xa8>
 80069fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80069fe:	2b15      	cmp	r3, #21
 8006a00:	d8f6      	bhi.n	80069f0 <_printf_i+0x28>
 8006a02:	a101      	add	r1, pc, #4	@ (adr r1, 8006a08 <_printf_i+0x40>)
 8006a04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a08:	08006a61 	.word	0x08006a61
 8006a0c:	08006a75 	.word	0x08006a75
 8006a10:	080069f1 	.word	0x080069f1
 8006a14:	080069f1 	.word	0x080069f1
 8006a18:	080069f1 	.word	0x080069f1
 8006a1c:	080069f1 	.word	0x080069f1
 8006a20:	08006a75 	.word	0x08006a75
 8006a24:	080069f1 	.word	0x080069f1
 8006a28:	080069f1 	.word	0x080069f1
 8006a2c:	080069f1 	.word	0x080069f1
 8006a30:	080069f1 	.word	0x080069f1
 8006a34:	08006b75 	.word	0x08006b75
 8006a38:	08006a9f 	.word	0x08006a9f
 8006a3c:	08006b2f 	.word	0x08006b2f
 8006a40:	080069f1 	.word	0x080069f1
 8006a44:	080069f1 	.word	0x080069f1
 8006a48:	08006b97 	.word	0x08006b97
 8006a4c:	080069f1 	.word	0x080069f1
 8006a50:	08006a9f 	.word	0x08006a9f
 8006a54:	080069f1 	.word	0x080069f1
 8006a58:	080069f1 	.word	0x080069f1
 8006a5c:	08006b37 	.word	0x08006b37
 8006a60:	6833      	ldr	r3, [r6, #0]
 8006a62:	1d1a      	adds	r2, r3, #4
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6032      	str	r2, [r6, #0]
 8006a68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a70:	2301      	movs	r3, #1
 8006a72:	e09d      	b.n	8006bb0 <_printf_i+0x1e8>
 8006a74:	6833      	ldr	r3, [r6, #0]
 8006a76:	6820      	ldr	r0, [r4, #0]
 8006a78:	1d19      	adds	r1, r3, #4
 8006a7a:	6031      	str	r1, [r6, #0]
 8006a7c:	0606      	lsls	r6, r0, #24
 8006a7e:	d501      	bpl.n	8006a84 <_printf_i+0xbc>
 8006a80:	681d      	ldr	r5, [r3, #0]
 8006a82:	e003      	b.n	8006a8c <_printf_i+0xc4>
 8006a84:	0645      	lsls	r5, r0, #25
 8006a86:	d5fb      	bpl.n	8006a80 <_printf_i+0xb8>
 8006a88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a8c:	2d00      	cmp	r5, #0
 8006a8e:	da03      	bge.n	8006a98 <_printf_i+0xd0>
 8006a90:	232d      	movs	r3, #45	@ 0x2d
 8006a92:	426d      	negs	r5, r5
 8006a94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a98:	4859      	ldr	r0, [pc, #356]	@ (8006c00 <_printf_i+0x238>)
 8006a9a:	230a      	movs	r3, #10
 8006a9c:	e011      	b.n	8006ac2 <_printf_i+0xfa>
 8006a9e:	6821      	ldr	r1, [r4, #0]
 8006aa0:	6833      	ldr	r3, [r6, #0]
 8006aa2:	0608      	lsls	r0, r1, #24
 8006aa4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006aa8:	d402      	bmi.n	8006ab0 <_printf_i+0xe8>
 8006aaa:	0649      	lsls	r1, r1, #25
 8006aac:	bf48      	it	mi
 8006aae:	b2ad      	uxthmi	r5, r5
 8006ab0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ab2:	4853      	ldr	r0, [pc, #332]	@ (8006c00 <_printf_i+0x238>)
 8006ab4:	6033      	str	r3, [r6, #0]
 8006ab6:	bf14      	ite	ne
 8006ab8:	230a      	movne	r3, #10
 8006aba:	2308      	moveq	r3, #8
 8006abc:	2100      	movs	r1, #0
 8006abe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ac2:	6866      	ldr	r6, [r4, #4]
 8006ac4:	60a6      	str	r6, [r4, #8]
 8006ac6:	2e00      	cmp	r6, #0
 8006ac8:	bfa2      	ittt	ge
 8006aca:	6821      	ldrge	r1, [r4, #0]
 8006acc:	f021 0104 	bicge.w	r1, r1, #4
 8006ad0:	6021      	strge	r1, [r4, #0]
 8006ad2:	b90d      	cbnz	r5, 8006ad8 <_printf_i+0x110>
 8006ad4:	2e00      	cmp	r6, #0
 8006ad6:	d04b      	beq.n	8006b70 <_printf_i+0x1a8>
 8006ad8:	4616      	mov	r6, r2
 8006ada:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ade:	fb03 5711 	mls	r7, r3, r1, r5
 8006ae2:	5dc7      	ldrb	r7, [r0, r7]
 8006ae4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ae8:	462f      	mov	r7, r5
 8006aea:	42bb      	cmp	r3, r7
 8006aec:	460d      	mov	r5, r1
 8006aee:	d9f4      	bls.n	8006ada <_printf_i+0x112>
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	d10b      	bne.n	8006b0c <_printf_i+0x144>
 8006af4:	6823      	ldr	r3, [r4, #0]
 8006af6:	07df      	lsls	r7, r3, #31
 8006af8:	d508      	bpl.n	8006b0c <_printf_i+0x144>
 8006afa:	6923      	ldr	r3, [r4, #16]
 8006afc:	6861      	ldr	r1, [r4, #4]
 8006afe:	4299      	cmp	r1, r3
 8006b00:	bfde      	ittt	le
 8006b02:	2330      	movle	r3, #48	@ 0x30
 8006b04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b0c:	1b92      	subs	r2, r2, r6
 8006b0e:	6122      	str	r2, [r4, #16]
 8006b10:	f8cd a000 	str.w	sl, [sp]
 8006b14:	464b      	mov	r3, r9
 8006b16:	aa03      	add	r2, sp, #12
 8006b18:	4621      	mov	r1, r4
 8006b1a:	4640      	mov	r0, r8
 8006b1c:	f7ff fee6 	bl	80068ec <_printf_common>
 8006b20:	3001      	adds	r0, #1
 8006b22:	d14a      	bne.n	8006bba <_printf_i+0x1f2>
 8006b24:	f04f 30ff 	mov.w	r0, #4294967295
 8006b28:	b004      	add	sp, #16
 8006b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	f043 0320 	orr.w	r3, r3, #32
 8006b34:	6023      	str	r3, [r4, #0]
 8006b36:	4833      	ldr	r0, [pc, #204]	@ (8006c04 <_printf_i+0x23c>)
 8006b38:	2778      	movs	r7, #120	@ 0x78
 8006b3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b3e:	6823      	ldr	r3, [r4, #0]
 8006b40:	6831      	ldr	r1, [r6, #0]
 8006b42:	061f      	lsls	r7, r3, #24
 8006b44:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b48:	d402      	bmi.n	8006b50 <_printf_i+0x188>
 8006b4a:	065f      	lsls	r7, r3, #25
 8006b4c:	bf48      	it	mi
 8006b4e:	b2ad      	uxthmi	r5, r5
 8006b50:	6031      	str	r1, [r6, #0]
 8006b52:	07d9      	lsls	r1, r3, #31
 8006b54:	bf44      	itt	mi
 8006b56:	f043 0320 	orrmi.w	r3, r3, #32
 8006b5a:	6023      	strmi	r3, [r4, #0]
 8006b5c:	b11d      	cbz	r5, 8006b66 <_printf_i+0x19e>
 8006b5e:	2310      	movs	r3, #16
 8006b60:	e7ac      	b.n	8006abc <_printf_i+0xf4>
 8006b62:	4827      	ldr	r0, [pc, #156]	@ (8006c00 <_printf_i+0x238>)
 8006b64:	e7e9      	b.n	8006b3a <_printf_i+0x172>
 8006b66:	6823      	ldr	r3, [r4, #0]
 8006b68:	f023 0320 	bic.w	r3, r3, #32
 8006b6c:	6023      	str	r3, [r4, #0]
 8006b6e:	e7f6      	b.n	8006b5e <_printf_i+0x196>
 8006b70:	4616      	mov	r6, r2
 8006b72:	e7bd      	b.n	8006af0 <_printf_i+0x128>
 8006b74:	6833      	ldr	r3, [r6, #0]
 8006b76:	6825      	ldr	r5, [r4, #0]
 8006b78:	6961      	ldr	r1, [r4, #20]
 8006b7a:	1d18      	adds	r0, r3, #4
 8006b7c:	6030      	str	r0, [r6, #0]
 8006b7e:	062e      	lsls	r6, r5, #24
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	d501      	bpl.n	8006b88 <_printf_i+0x1c0>
 8006b84:	6019      	str	r1, [r3, #0]
 8006b86:	e002      	b.n	8006b8e <_printf_i+0x1c6>
 8006b88:	0668      	lsls	r0, r5, #25
 8006b8a:	d5fb      	bpl.n	8006b84 <_printf_i+0x1bc>
 8006b8c:	8019      	strh	r1, [r3, #0]
 8006b8e:	2300      	movs	r3, #0
 8006b90:	6123      	str	r3, [r4, #16]
 8006b92:	4616      	mov	r6, r2
 8006b94:	e7bc      	b.n	8006b10 <_printf_i+0x148>
 8006b96:	6833      	ldr	r3, [r6, #0]
 8006b98:	1d1a      	adds	r2, r3, #4
 8006b9a:	6032      	str	r2, [r6, #0]
 8006b9c:	681e      	ldr	r6, [r3, #0]
 8006b9e:	6862      	ldr	r2, [r4, #4]
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	4630      	mov	r0, r6
 8006ba4:	f7f9 fb1c 	bl	80001e0 <memchr>
 8006ba8:	b108      	cbz	r0, 8006bae <_printf_i+0x1e6>
 8006baa:	1b80      	subs	r0, r0, r6
 8006bac:	6060      	str	r0, [r4, #4]
 8006bae:	6863      	ldr	r3, [r4, #4]
 8006bb0:	6123      	str	r3, [r4, #16]
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bb8:	e7aa      	b.n	8006b10 <_printf_i+0x148>
 8006bba:	6923      	ldr	r3, [r4, #16]
 8006bbc:	4632      	mov	r2, r6
 8006bbe:	4649      	mov	r1, r9
 8006bc0:	4640      	mov	r0, r8
 8006bc2:	47d0      	blx	sl
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	d0ad      	beq.n	8006b24 <_printf_i+0x15c>
 8006bc8:	6823      	ldr	r3, [r4, #0]
 8006bca:	079b      	lsls	r3, r3, #30
 8006bcc:	d413      	bmi.n	8006bf6 <_printf_i+0x22e>
 8006bce:	68e0      	ldr	r0, [r4, #12]
 8006bd0:	9b03      	ldr	r3, [sp, #12]
 8006bd2:	4298      	cmp	r0, r3
 8006bd4:	bfb8      	it	lt
 8006bd6:	4618      	movlt	r0, r3
 8006bd8:	e7a6      	b.n	8006b28 <_printf_i+0x160>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	4632      	mov	r2, r6
 8006bde:	4649      	mov	r1, r9
 8006be0:	4640      	mov	r0, r8
 8006be2:	47d0      	blx	sl
 8006be4:	3001      	adds	r0, #1
 8006be6:	d09d      	beq.n	8006b24 <_printf_i+0x15c>
 8006be8:	3501      	adds	r5, #1
 8006bea:	68e3      	ldr	r3, [r4, #12]
 8006bec:	9903      	ldr	r1, [sp, #12]
 8006bee:	1a5b      	subs	r3, r3, r1
 8006bf0:	42ab      	cmp	r3, r5
 8006bf2:	dcf2      	bgt.n	8006bda <_printf_i+0x212>
 8006bf4:	e7eb      	b.n	8006bce <_printf_i+0x206>
 8006bf6:	2500      	movs	r5, #0
 8006bf8:	f104 0619 	add.w	r6, r4, #25
 8006bfc:	e7f5      	b.n	8006bea <_printf_i+0x222>
 8006bfe:	bf00      	nop
 8006c00:	08006e51 	.word	0x08006e51
 8006c04:	08006e62 	.word	0x08006e62

08006c08 <memmove>:
 8006c08:	4288      	cmp	r0, r1
 8006c0a:	b510      	push	{r4, lr}
 8006c0c:	eb01 0402 	add.w	r4, r1, r2
 8006c10:	d902      	bls.n	8006c18 <memmove+0x10>
 8006c12:	4284      	cmp	r4, r0
 8006c14:	4623      	mov	r3, r4
 8006c16:	d807      	bhi.n	8006c28 <memmove+0x20>
 8006c18:	1e43      	subs	r3, r0, #1
 8006c1a:	42a1      	cmp	r1, r4
 8006c1c:	d008      	beq.n	8006c30 <memmove+0x28>
 8006c1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c26:	e7f8      	b.n	8006c1a <memmove+0x12>
 8006c28:	4402      	add	r2, r0
 8006c2a:	4601      	mov	r1, r0
 8006c2c:	428a      	cmp	r2, r1
 8006c2e:	d100      	bne.n	8006c32 <memmove+0x2a>
 8006c30:	bd10      	pop	{r4, pc}
 8006c32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c3a:	e7f7      	b.n	8006c2c <memmove+0x24>

08006c3c <_sbrk_r>:
 8006c3c:	b538      	push	{r3, r4, r5, lr}
 8006c3e:	4d06      	ldr	r5, [pc, #24]	@ (8006c58 <_sbrk_r+0x1c>)
 8006c40:	2300      	movs	r3, #0
 8006c42:	4604      	mov	r4, r0
 8006c44:	4608      	mov	r0, r1
 8006c46:	602b      	str	r3, [r5, #0]
 8006c48:	f7fa f9ca 	bl	8000fe0 <_sbrk>
 8006c4c:	1c43      	adds	r3, r0, #1
 8006c4e:	d102      	bne.n	8006c56 <_sbrk_r+0x1a>
 8006c50:	682b      	ldr	r3, [r5, #0]
 8006c52:	b103      	cbz	r3, 8006c56 <_sbrk_r+0x1a>
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	bd38      	pop	{r3, r4, r5, pc}
 8006c58:	20001e68 	.word	0x20001e68

08006c5c <_realloc_r>:
 8006c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c60:	4680      	mov	r8, r0
 8006c62:	4615      	mov	r5, r2
 8006c64:	460c      	mov	r4, r1
 8006c66:	b921      	cbnz	r1, 8006c72 <_realloc_r+0x16>
 8006c68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c6c:	4611      	mov	r1, r2
 8006c6e:	f7ff bc59 	b.w	8006524 <_malloc_r>
 8006c72:	b92a      	cbnz	r2, 8006c80 <_realloc_r+0x24>
 8006c74:	f7ff fbea 	bl	800644c <_free_r>
 8006c78:	2400      	movs	r4, #0
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c80:	f000 f81a 	bl	8006cb8 <_malloc_usable_size_r>
 8006c84:	4285      	cmp	r5, r0
 8006c86:	4606      	mov	r6, r0
 8006c88:	d802      	bhi.n	8006c90 <_realloc_r+0x34>
 8006c8a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006c8e:	d8f4      	bhi.n	8006c7a <_realloc_r+0x1e>
 8006c90:	4629      	mov	r1, r5
 8006c92:	4640      	mov	r0, r8
 8006c94:	f7ff fc46 	bl	8006524 <_malloc_r>
 8006c98:	4607      	mov	r7, r0
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	d0ec      	beq.n	8006c78 <_realloc_r+0x1c>
 8006c9e:	42b5      	cmp	r5, r6
 8006ca0:	462a      	mov	r2, r5
 8006ca2:	4621      	mov	r1, r4
 8006ca4:	bf28      	it	cs
 8006ca6:	4632      	movcs	r2, r6
 8006ca8:	f7ff fbc2 	bl	8006430 <memcpy>
 8006cac:	4621      	mov	r1, r4
 8006cae:	4640      	mov	r0, r8
 8006cb0:	f7ff fbcc 	bl	800644c <_free_r>
 8006cb4:	463c      	mov	r4, r7
 8006cb6:	e7e0      	b.n	8006c7a <_realloc_r+0x1e>

08006cb8 <_malloc_usable_size_r>:
 8006cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cbc:	1f18      	subs	r0, r3, #4
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	bfbc      	itt	lt
 8006cc2:	580b      	ldrlt	r3, [r1, r0]
 8006cc4:	18c0      	addlt	r0, r0, r3
 8006cc6:	4770      	bx	lr

08006cc8 <_init>:
 8006cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cca:	bf00      	nop
 8006ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cce:	bc08      	pop	{r3}
 8006cd0:	469e      	mov	lr, r3
 8006cd2:	4770      	bx	lr

08006cd4 <_fini>:
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	bf00      	nop
 8006cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cda:	bc08      	pop	{r3}
 8006cdc:	469e      	mov	lr, r3
 8006cde:	4770      	bx	lr
